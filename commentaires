Prop: en première phase, le but est d'obtenir:
- les produits scalaires
- les numéros de cas
- une liste avec les nombre de cas pour chaque "thread"

En deuxième phase, on transforme les comptes en offsets.

En troisième phase, on fait un parcourt des produits scalaires et on colle les index triés à partir des offsets.

========================================================================================================================================
Optimisations ? L'idéal serait de travailler sur un cas réel, avec les diagramme de puissance

========================================================================================================================================
Interface de powerdiagram

-> c'est l'endroit où il faut faire du out of core
-> il faut trier les diracs dans des boites de ~ 30
-> on pourrait chronométrer le temps de récupération 

Prop: on fait des histogrammes pour déterminer la répartition en out-of core.

A priori, on doit faire un premier passage pour avoir
- nb elements
- min max

========================================================================================================================================
Prop: les valeurs sont communiquées sous forme sérialisées.

C'est lors de la génération de code qu'on désérialise dans le bon type.

Prop simple: on utilise un type (spécifié par chaine de caractère) et un "pointeur".
   Le pointeur doit idéalement dire sur quelle machine on est

Sortie des tasks: 
  Prop 1: les noyaux sortent un pointeur.

On a besoin de Value pour construire les tasks 

Prop: Task se base sur TaskRef


========================================================================================================================================
cta 15ème lecourbe,


========================================================================================================================================
Ça serait bien qu'on commence par les intersections, ça sera utile pour les tomographies


Prop: on fait juste des sorties d'un côté et des entrées de l'autre, mais on autorise la réutilisation des entrées.

Prop: add_repeated crée les 3 tenseurs

Prop simple: on sort des tuple de pointeurs

Pb: comment permettre la réutilisation des entrées ?
  prop 1: on passe task

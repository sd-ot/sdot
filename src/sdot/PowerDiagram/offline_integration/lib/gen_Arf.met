def rot90( P )
    return [ - P[ 1 ], P[ 0 ] ]

<<<<<<< HEAD
def part_int( coeffs, u0 = 0, u1 = 1 )
    # P0   := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    # P1   := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    # N    := rot90( P0 - P1 )
    # u    := symbol( "u" )
    # Pi   := ( 1 - u ) * P0 + u * P1
    # r2   := dot( Pi, Pi )

    # val := Op()
    # for i in 0 .. coeffs.size
    #     val += coeffs[ i ] * dot( Pi, Pi ) ^ i
    # val *= dot( Pi, N )

    # res := polynomial_integration( val, u, u0, u1, deg_poly_max = 20 )

    # cw := CodeWriter( "TF" )
    # cw.add( "res", res, add )
    # print cw.to_string( 4 )
    O0  := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] )
    O1  := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] )
    P0  := O0 + ( O1 - O0 ) * u0
    P1  := O0 + ( O1 - O0 ) * u1
    u   := symbol( "u" )
    v   := symbol( "v" )
    w   := symbol( "w" )
    Pi  := u * P0 + v * P1
    r2  := dot( Pi, Pi )
=======
def part_int( ns, u0 = 0, u1 = 1 )
    coeffs := Vec[ Op, ns ]( p => symbol( "ap->integration_coeffs[ $( p + 1 ) ]" ) )
    pred_v := symbol( "ap->integration_coeffs[ 0 ]" )
    beg := symbol( "ap->beg" )
    th := symbol( "th" )
    
    P0   := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    P1   := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    N    := rot90( P0 - P1 )
    u    := symbol( "u" )
    Pi   := ( 1 - u ) * P0 + u * P1
    r2   := dot( Pi, Pi )
>>>>>>> 7b26c8cc65c6f9881d986953e180fb1fc9fe86eb

    val_beg := Op()
    for i in 0 .. coeffs.size
        val_beg += coeffs[ i ] * beg ^ ( 2 * i )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * dot( Pi, Pi ) ^ i
    val *= vect_prod( P0, P1 )

<<<<<<< HEAD
    mea := polynomial_integration( val, v, 0, 1 - u, deg_poly_max = 20 )
    mea  = polynomial_integration( mea, u, 0, 1    , deg_poly_max = 20 ) # * os / is ^ 2
=======
    res := polynomial_integration( val, u, u0, u1, deg_poly_max = 20 )
    res += th * ( pred_v - val_beg )
>>>>>>> 7b26c8cc65c6f9881d986953e180fb1fc9fe86eb

    cw := CodeWriter( "TF" )
    cw.add( "mea", mea, add )
    print cw.to_string( 4 )

def centroid( coeffs, u0, u1 )
    O0  := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] )
    O1  := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] )
    P0  := O0 + ( O1 - O0 ) * u0
    P1  := O0 + ( O1 - O0 ) * u1
    u   := symbol( "u" )
    v   := symbol( "v" )
    w   := symbol( "w" )
    Pi  := u * P0 + v * P1
    r2  := dot( Pi, Pi )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * dot( Pi, Pi ) ^ i
    val *= vect_prod( P0, P1 )

    r_x := polynomial_integration( Pi[ 0 ] * val, v, 0, 1 - u, deg_poly_max = 20 )
    r_y := polynomial_integration( Pi[ 1 ] * val, v, 0, 1 - u, deg_poly_max = 20 )
    mea := polynomial_integration(           val, v, 0, 1 - u, deg_poly_max = 20 )
    r_x = polynomial_integration( r_x, u, 0, 1, deg_poly_max = 20 ) # * os / is ^ 3
    r_y = polynomial_integration( r_y, u, 0, 1, deg_poly_max = 20 ) # * os / is ^ 3
    mea = polynomial_integration( mea, u, 0, 1, deg_poly_max = 20 ) # * os / is ^ 2

    cw := CodeWriter( "TF" )
    cw.add( "ltd.x", r_x, add )
    cw.add( "ltd.y", r_y, add )
    cw.add( "lea", mea, add )
    print cw.to_string( 4 )

def segment( coeffs, u0, u1 )
    P0  := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] )
    P1  := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] )
    u   := symbol( "u" )
    Pi  := P0 + ( P1 - P0 ) * u
    r2  := dot( Pi, Pi )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * r2 ^ i
    val *= norm_2( P1- P0 )

    res := polynomial_integration( val, u, u0, u1, deg_poly_max = 20 )

    cw := CodeWriter( "TF" )
    cw.add( "res", res, add )
    print cw.to_string( 4 )

# symbols
ns := 4
u0 := symbol( "u0" )
u1 := symbol( "u1" )
sa := "static_assert( FunctionEnum::Arfd::nb_coeffs == $ns, \"\" );"


print( "========= integration" )
print( sa )
<<<<<<< HEAD
part_int( Vec[ Op, ns ]( p => symbol( "ap->value_coeffs[ $p ]" ) ), u0, u1 )
=======
part_int( ns, u0, u1 )
>>>>>>> 7b26c8cc65c6f9881d986953e180fb1fc9fe86eb

# print( "========= centroid" )
# print( sa )
# centroid( Vec[ Op, ns ]( p => symbol( "ap->value_coeffs[ $p ]" ) ), u0, u1 )

# print( "========= segment" )
# print( sa )
# segment( Vec[ Op, ns ]( p => symbol( "ap->value_coeffs[ $p ]" ) ), u0, u1 )


def rot90( P )
    return [ - P[ 1 ], P[ 0 ] ]

def part_int( coeffs, u0 = 0, u1 = 1, with_os = true )
    P0   := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    P1   := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    N    := rot90( P0 - P1 )
    u    := symbol( "u" )
    Pi   := ( 1 - u ) * P0 + u * P1
    r2   := dot( Pi, Pi )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * dot( Pi, Pi ) ^ i
    val *= dot( Pi, N )

    res := polynomial_integration( val, u, u0, u1, deg_poly_max = 20 )

    cw := CodeWriter( "TF" )
    cw.add( "res", res, add )
    print cw.to_string( 4 )

def centroid()
    P0  := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    P1  := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    u   := symbol( "u" )
    v   := symbol( "v" )
    w   := symbol( "w" )
    Pi  := u * P0 + v * P1
    r2  := dot( Pi, Pi )

    val := ( w - r2 ) * vect_prod( P0, P1 )

    r_x := polynomial_integration( Pi[ 0 ] * val, v, 0, 1 - u, deg_poly_max = 20 )
    r_y := polynomial_integration( Pi[ 1 ] * val, v, 0, 1 - u, deg_poly_max = 20 )
    r_x = polynomial_integration( r_x, u, 0, 1, deg_poly_max = 20 )
    r_y = polynomial_integration( r_y, u, 0, 1, deg_poly_max = 20 )

    cw := CodeWriter( "TF" )
    cw.add( "r_x", r_x, add )
    cw.add( "r_y", r_y, add )
    print cw.to_string( 4 )

print( "========= integration" )
# w := symbol( "w" )
u0 := symbol( "u" )
u1 := symbol( "new_u" )
coeffs := Vec[ Op, 4 ]( p => symbol( "ap->coeffs[ $( p + 1 ) ]" ) )
print "static_assert( FunctionEnum::Arfd::nb_coeffs == ${ coeffs.size }, \"\" );"
part_int( coeffs, u0, u1 )

print( "========= centroid" )
# centroid()

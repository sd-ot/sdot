#include <iostream>
#include <array>

int main() {
    std::cout << "static std::int32_t lengthTable[ 256 ] = {";
    for( std::size_t i = 0; i < 256; ++i ) {
        std::size_t val = ~i;

        std::size_t c = 0;
        for( std::size_t j = 0; j < 8; ++j )
            c += bool( val & ( 1 << j ) );

        std::cout << ( i % 16 == 0 ? "\n    " : "" ) << c << ",";
    }
    std::cout << "\n};\n";

    std::cout << "static std::uint8_t vecDecodeTableByte[ 256 ][ 8 ] = {\n";
    std::array<std::size_t,8> offsets;
    for( std::size_t i = 0; i < 256; ++i ) {
        std::size_t val = ~i;

        std::size_t c = 0;
        for( std::size_t j = 0; j < 8; ++j )
            if ( val & ( 1 << j ) )
                offsets[ c++ ] = j;
        for( std::size_t j = c; j < 8; ++j )
            offsets[ j ] = 128;

        std::cout << "    { ";
        for( std::size_t j = 0; j < 8; ++j )
            std::cout << offsets[ j ] << ( j < 7 ? ", " : " " );
        std::cout << "},\n";
    }
    std::cout << "};\n";

    std::cout << "static std::uint8_t spaccTable[ 256 ][ 8 ] = {\n";
    for( std::size_t i = 0; i < 256; ++i ) {
        std::cout << "    { ";
        for( std::size_t j = 0, c = 0; j < 8; ++j ) {
            c += bool( i & ( 1 << j ) );
            std::cout << c << ( j < 7 ? ", " : " " );
        }
        std::cout << "},\n";
    }
    std::cout << "};\n";
}


//static uint8_t lengthTable[256] = {
//    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
//    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
//    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
//    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
//    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
//    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
//    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
//    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
//};


//alignas( 16 )
//static uint8_t vecDecodeTableByte[ 256 ][ 8 ] = {
//    { 0, 0, 0, 0, 0, 0, 0, 0 }, /* 0x00 (00000000) */
//    { 1, 0, 0, 0, 0, 0, 0, 0 }, /* 0x01 (00000001) */
//    { 2, 0, 0, 0, 0, 0, 0, 0 }, /* 0x02 (00000010) */
//    { 1, 2, 0, 0, 0, 0, 0, 0 }, /* 0x03 (00000011) */
//    { 3, 0, 0, 0, 0, 0, 0, 0 }, /* 0x04 (00000100) */
//    { 1, 3, 0, 0, 0, 0, 0, 0 }, /* 0x05 (00000101) */
//    { 2, 3, 0, 0, 0, 0, 0, 0 }, /* 0x06 (00000110) */
//    { 1, 2, 3, 0, 0, 0, 0, 0 }, /* 0x07 (00000111) */
//    { 4, 0, 0, 0, 0, 0, 0, 0 }, /* 0x08 (00001000) */
//    { 1, 4, 0, 0, 0, 0, 0, 0 }, /* 0x09 (00001001) */
//    { 2, 4, 0, 0, 0, 0, 0, 0 }, /* 0x0A (00001010) */
//    { 1, 2, 4, 0, 0, 0, 0, 0 }, /* 0x0B (00001011) */
//    { 3, 4, 0, 0, 0, 0, 0, 0 }, /* 0x0C (00001100) */
//    { 1, 3, 4, 0, 0, 0, 0, 0 }, /* 0x0D (00001101) */
//    { 2, 3, 4, 0, 0, 0, 0, 0 }, /* 0x0E (00001110) */
//    { 1, 2, 3, 4, 0, 0, 0, 0 }, /* 0x0F (00001111) */
//    { 5, 0, 0, 0, 0, 0, 0, 0 }, /* 0x10 (00010000) */
//    { 1, 5, 0, 0, 0, 0, 0, 0 }, /* 0x11 (00010001) */
//    { 2, 5, 0, 0, 0, 0, 0, 0 }, /* 0x12 (00010010) */
//    { 1, 2, 5, 0, 0, 0, 0, 0 }, /* 0x13 (00010011) */
//    { 3, 5, 0, 0, 0, 0, 0, 0 }, /* 0x14 (00010100) */
//    { 1, 3, 5, 0, 0, 0, 0, 0 }, /* 0x15 (00010101) */
//    { 2, 3, 5, 0, 0, 0, 0, 0 }, /* 0x16 (00010110) */
//    { 1, 2, 3, 5, 0, 0, 0, 0 }, /* 0x17 (00010111) */
//    { 4, 5, 0, 0, 0, 0, 0, 0 }, /* 0x18 (00011000) */
//    { 1, 4, 5, 0, 0, 0, 0, 0 }, /* 0x19 (00011001) */
//    { 2, 4, 5, 0, 0, 0, 0, 0 }, /* 0x1A (00011010) */
//    { 1, 2, 4, 5, 0, 0, 0, 0 }, /* 0x1B (00011011) */
//    { 3, 4, 5, 0, 0, 0, 0, 0 }, /* 0x1C (00011100) */
//    { 1, 3, 4, 5, 0, 0, 0, 0 }, /* 0x1D (00011101) */
//    { 2, 3, 4, 5, 0, 0, 0, 0 }, /* 0x1E (00011110) */
//    { 1, 2, 3, 4, 5, 0, 0, 0 }, /* 0x1F (00011111) */
//    { 6, 0, 0, 0, 0, 0, 0, 0 }, /* 0x20 (00100000) */
//    { 1, 6, 0, 0, 0, 0, 0, 0 }, /* 0x21 (00100001) */
//    { 2, 6, 0, 0, 0, 0, 0, 0 }, /* 0x22 (00100010) */
//    { 1, 2, 6, 0, 0, 0, 0, 0 }, /* 0x23 (00100011) */
//    { 3, 6, 0, 0, 0, 0, 0, 0 }, /* 0x24 (00100100) */
//    { 1, 3, 6, 0, 0, 0, 0, 0 }, /* 0x25 (00100101) */
//    { 2, 3, 6, 0, 0, 0, 0, 0 }, /* 0x26 (00100110) */
//    { 1, 2, 3, 6, 0, 0, 0, 0 }, /* 0x27 (00100111) */
//    { 4, 6, 0, 0, 0, 0, 0, 0 }, /* 0x28 (00101000) */
//    { 1, 4, 6, 0, 0, 0, 0, 0 }, /* 0x29 (00101001) */
//    { 2, 4, 6, 0, 0, 0, 0, 0 }, /* 0x2A (00101010) */
//    { 1, 2, 4, 6, 0, 0, 0, 0 }, /* 0x2B (00101011) */
//    { 3, 4, 6, 0, 0, 0, 0, 0 }, /* 0x2C (00101100) */
//    { 1, 3, 4, 6, 0, 0, 0, 0 }, /* 0x2D (00101101) */
//    { 2, 3, 4, 6, 0, 0, 0, 0 }, /* 0x2E (00101110) */
//    { 1, 2, 3, 4, 6, 0, 0, 0 }, /* 0x2F (00101111) */
//    { 5, 6, 0, 0, 0, 0, 0, 0 }, /* 0x30 (00110000) */
//    { 1, 5, 6, 0, 0, 0, 0, 0 }, /* 0x31 (00110001) */
//    { 2, 5, 6, 0, 0, 0, 0, 0 }, /* 0x32 (00110010) */
//    { 1, 2, 5, 6, 0, 0, 0, 0 }, /* 0x33 (00110011) */
//    { 3, 5, 6, 0, 0, 0, 0, 0 }, /* 0x34 (00110100) */
//    { 1, 3, 5, 6, 0, 0, 0, 0 }, /* 0x35 (00110101) */
//    { 2, 3, 5, 6, 0, 0, 0, 0 }, /* 0x36 (00110110) */
//    { 1, 2, 3, 5, 6, 0, 0, 0 }, /* 0x37 (00110111) */
//    { 4, 5, 6, 0, 0, 0, 0, 0 }, /* 0x38 (00111000) */
//    { 1, 4, 5, 6, 0, 0, 0, 0 }, /* 0x39 (00111001) */
//    { 2, 4, 5, 6, 0, 0, 0, 0 }, /* 0x3A (00111010) */
//    { 1, 2, 4, 5, 6, 0, 0, 0 }, /* 0x3B (00111011) */
//    { 3, 4, 5, 6, 0, 0, 0, 0 }, /* 0x3C (00111100) */
//    { 1, 3, 4, 5, 6, 0, 0, 0 }, /* 0x3D (00111101) */
//    { 2, 3, 4, 5, 6, 0, 0, 0 }, /* 0x3E (00111110) */
//    { 1, 2, 3, 4, 5, 6, 0, 0 }, /* 0x3F (00111111) */
//    { 7, 0, 0, 0, 0, 0, 0, 0 }, /* 0x40 (01000000) */
//    { 1, 7, 0, 0, 0, 0, 0, 0 }, /* 0x41 (01000001) */
//    { 2, 7, 0, 0, 0, 0, 0, 0 }, /* 0x42 (01000010) */
//    { 1, 2, 7, 0, 0, 0, 0, 0 }, /* 0x43 (01000011) */
//    { 3, 7, 0, 0, 0, 0, 0, 0 }, /* 0x44 (01000100) */
//    { 1, 3, 7, 0, 0, 0, 0, 0 }, /* 0x45 (01000101) */
//    { 2, 3, 7, 0, 0, 0, 0, 0 }, /* 0x46 (01000110) */
//    { 1, 2, 3, 7, 0, 0, 0, 0 }, /* 0x47 (01000111) */
//    { 4, 7, 0, 0, 0, 0, 0, 0 }, /* 0x48 (01001000) */
//    { 1, 4, 7, 0, 0, 0, 0, 0 }, /* 0x49 (01001001) */
//    { 2, 4, 7, 0, 0, 0, 0, 0 }, /* 0x4A (01001010) */
//    { 1, 2, 4, 7, 0, 0, 0, 0 }, /* 0x4B (01001011) */
//    { 3, 4, 7, 0, 0, 0, 0, 0 }, /* 0x4C (01001100) */
//    { 1, 3, 4, 7, 0, 0, 0, 0 }, /* 0x4D (01001101) */
//    { 2, 3, 4, 7, 0, 0, 0, 0 }, /* 0x4E (01001110) */
//    { 1, 2, 3, 4, 7, 0, 0, 0 }, /* 0x4F (01001111) */
//    { 5, 7, 0, 0, 0, 0, 0, 0 }, /* 0x50 (01010000) */
//    { 1, 5, 7, 0, 0, 0, 0, 0 }, /* 0x51 (01010001) */
//    { 2, 5, 7, 0, 0, 0, 0, 0 }, /* 0x52 (01010010) */
//    { 1, 2, 5, 7, 0, 0, 0, 0 }, /* 0x53 (01010011) */
//    { 3, 5, 7, 0, 0, 0, 0, 0 }, /* 0x54 (01010100) */
//    { 1, 3, 5, 7, 0, 0, 0, 0 }, /* 0x55 (01010101) */
//    { 2, 3, 5, 7, 0, 0, 0, 0 }, /* 0x56 (01010110) */
//    { 1, 2, 3, 5, 7, 0, 0, 0 }, /* 0x57 (01010111) */
//    { 4, 5, 7, 0, 0, 0, 0, 0 }, /* 0x58 (01011000) */
//    { 1, 4, 5, 7, 0, 0, 0, 0 }, /* 0x59 (01011001) */
//    { 2, 4, 5, 7, 0, 0, 0, 0 }, /* 0x5A (01011010) */
//    { 1, 2, 4, 5, 7, 0, 0, 0 }, /* 0x5B (01011011) */
//    { 3, 4, 5, 7, 0, 0, 0, 0 }, /* 0x5C (01011100) */
//    { 1, 3, 4, 5, 7, 0, 0, 0 }, /* 0x5D (01011101) */
//    { 2, 3, 4, 5, 7, 0, 0, 0 }, /* 0x5E (01011110) */
//    { 1, 2, 3, 4, 5, 7, 0, 0 }, /* 0x5F (01011111) */
//    { 6, 7, 0, 0, 0, 0, 0, 0 }, /* 0x60 (01100000) */
//    { 1, 6, 7, 0, 0, 0, 0, 0 }, /* 0x61 (01100001) */
//    { 2, 6, 7, 0, 0, 0, 0, 0 }, /* 0x62 (01100010) */
//    { 1, 2, 6, 7, 0, 0, 0, 0 }, /* 0x63 (01100011) */
//    { 3, 6, 7, 0, 0, 0, 0, 0 }, /* 0x64 (01100100) */
//    { 1, 3, 6, 7, 0, 0, 0, 0 }, /* 0x65 (01100101) */
//    { 2, 3, 6, 7, 0, 0, 0, 0 }, /* 0x66 (01100110) */
//    { 1, 2, 3, 6, 7, 0, 0, 0 }, /* 0x67 (01100111) */
//    { 4, 6, 7, 0, 0, 0, 0, 0 }, /* 0x68 (01101000) */
//    { 1, 4, 6, 7, 0, 0, 0, 0 }, /* 0x69 (01101001) */
//    { 2, 4, 6, 7, 0, 0, 0, 0 }, /* 0x6A (01101010) */
//    { 1, 2, 4, 6, 7, 0, 0, 0 }, /* 0x6B (01101011) */
//    { 3, 4, 6, 7, 0, 0, 0, 0 }, /* 0x6C (01101100) */
//    { 1, 3, 4, 6, 7, 0, 0, 0 }, /* 0x6D (01101101) */
//    { 2, 3, 4, 6, 7, 0, 0, 0 }, /* 0x6E (01101110) */
//    { 1, 2, 3, 4, 6, 7, 0, 0 }, /* 0x6F (01101111) */
//    { 5, 6, 7, 0, 0, 0, 0, 0 }, /* 0x70 (01110000) */
//    { 1, 5, 6, 7, 0, 0, 0, 0 }, /* 0x71 (01110001) */
//    { 2, 5, 6, 7, 0, 0, 0, 0 }, /* 0x72 (01110010) */
//    { 1, 2, 5, 6, 7, 0, 0, 0 }, /* 0x73 (01110011) */
//    { 3, 5, 6, 7, 0, 0, 0, 0 }, /* 0x74 (01110100) */
//    { 1, 3, 5, 6, 7, 0, 0, 0 }, /* 0x75 (01110101) */
//    { 2, 3, 5, 6, 7, 0, 0, 0 }, /* 0x76 (01110110) */
//    { 1, 2, 3, 5, 6, 7, 0, 0 }, /* 0x77 (01110111) */
//    { 4, 5, 6, 7, 0, 0, 0, 0 }, /* 0x78 (01111000) */
//    { 1, 4, 5, 6, 7, 0, 0, 0 }, /* 0x79 (01111001) */
//    { 2, 4, 5, 6, 7, 0, 0, 0 }, /* 0x7A (01111010) */
//    { 1, 2, 4, 5, 6, 7, 0, 0 }, /* 0x7B (01111011) */
//    { 3, 4, 5, 6, 7, 0, 0, 0 }, /* 0x7C (01111100) */
//    { 1, 3, 4, 5, 6, 7, 0, 0 }, /* 0x7D (01111101) */
//    { 2, 3, 4, 5, 6, 7, 0, 0 }, /* 0x7E (01111110) */
//    { 1, 2, 3, 4, 5, 6, 7, 0 }, /* 0x7F (01111111) */
//    { 8, 0, 0, 0, 0, 0, 0, 0 }, /* 0x80 (10000000) */
//    { 1, 8, 0, 0, 0, 0, 0, 0 }, /* 0x81 (10000001) */
//    { 2, 8, 0, 0, 0, 0, 0, 0 }, /* 0x82 (10000010) */
//    { 1, 2, 8, 0, 0, 0, 0, 0 }, /* 0x83 (10000011) */
//    { 3, 8, 0, 0, 0, 0, 0, 0 }, /* 0x84 (10000100) */
//    { 1, 3, 8, 0, 0, 0, 0, 0 }, /* 0x85 (10000101) */
//    { 2, 3, 8, 0, 0, 0, 0, 0 }, /* 0x86 (10000110) */
//    { 1, 2, 3, 8, 0, 0, 0, 0 }, /* 0x87 (10000111) */
//    { 4, 8, 0, 0, 0, 0, 0, 0 }, /* 0x88 (10001000) */
//    { 1, 4, 8, 0, 0, 0, 0, 0 }, /* 0x89 (10001001) */
//    { 2, 4, 8, 0, 0, 0, 0, 0 }, /* 0x8A (10001010) */
//    { 1, 2, 4, 8, 0, 0, 0, 0 }, /* 0x8B (10001011) */
//    { 3, 4, 8, 0, 0, 0, 0, 0 }, /* 0x8C (10001100) */
//    { 1, 3, 4, 8, 0, 0, 0, 0 }, /* 0x8D (10001101) */
//    { 2, 3, 4, 8, 0, 0, 0, 0 }, /* 0x8E (10001110) */
//    { 1, 2, 3, 4, 8, 0, 0, 0 }, /* 0x8F (10001111) */
//    { 5, 8, 0, 0, 0, 0, 0, 0 }, /* 0x90 (10010000) */
//    { 1, 5, 8, 0, 0, 0, 0, 0 }, /* 0x91 (10010001) */
//    { 2, 5, 8, 0, 0, 0, 0, 0 }, /* 0x92 (10010010) */
//    { 1, 2, 5, 8, 0, 0, 0, 0 }, /* 0x93 (10010011) */
//    { 3, 5, 8, 0, 0, 0, 0, 0 }, /* 0x94 (10010100) */
//    { 1, 3, 5, 8, 0, 0, 0, 0 }, /* 0x95 (10010101) */
//    { 2, 3, 5, 8, 0, 0, 0, 0 }, /* 0x96 (10010110) */
//    { 1, 2, 3, 5, 8, 0, 0, 0 }, /* 0x97 (10010111) */
//    { 4, 5, 8, 0, 0, 0, 0, 0 }, /* 0x98 (10011000) */
//    { 1, 4, 5, 8, 0, 0, 0, 0 }, /* 0x99 (10011001) */
//    { 2, 4, 5, 8, 0, 0, 0, 0 }, /* 0x9A (10011010) */
//    { 1, 2, 4, 5, 8, 0, 0, 0 }, /* 0x9B (10011011) */
//    { 3, 4, 5, 8, 0, 0, 0, 0 }, /* 0x9C (10011100) */
//    { 1, 3, 4, 5, 8, 0, 0, 0 }, /* 0x9D (10011101) */
//    { 2, 3, 4, 5, 8, 0, 0, 0 }, /* 0x9E (10011110) */
//    { 1, 2, 3, 4, 5, 8, 0, 0 }, /* 0x9F (10011111) */
//    { 6, 8, 0, 0, 0, 0, 0, 0 }, /* 0xA0 (10100000) */
//    { 1, 6, 8, 0, 0, 0, 0, 0 }, /* 0xA1 (10100001) */
//    { 2, 6, 8, 0, 0, 0, 0, 0 }, /* 0xA2 (10100010) */
//    { 1, 2, 6, 8, 0, 0, 0, 0 }, /* 0xA3 (10100011) */
//    { 3, 6, 8, 0, 0, 0, 0, 0 }, /* 0xA4 (10100100) */
//    { 1, 3, 6, 8, 0, 0, 0, 0 }, /* 0xA5 (10100101) */
//    { 2, 3, 6, 8, 0, 0, 0, 0 }, /* 0xA6 (10100110) */
//    { 1, 2, 3, 6, 8, 0, 0, 0 }, /* 0xA7 (10100111) */
//    { 4, 6, 8, 0, 0, 0, 0, 0 }, /* 0xA8 (10101000) */
//    { 1, 4, 6, 8, 0, 0, 0, 0 }, /* 0xA9 (10101001) */
//    { 2, 4, 6, 8, 0, 0, 0, 0 }, /* 0xAA (10101010) */
//    { 1, 2, 4, 6, 8, 0, 0, 0 }, /* 0xAB (10101011) */
//    { 3, 4, 6, 8, 0, 0, 0, 0 }, /* 0xAC (10101100) */
//    { 1, 3, 4, 6, 8, 0, 0, 0 }, /* 0xAD (10101101) */
//    { 2, 3, 4, 6, 8, 0, 0, 0 }, /* 0xAE (10101110) */
//    { 1, 2, 3, 4, 6, 8, 0, 0 }, /* 0xAF (10101111) */
//    { 5, 6, 8, 0, 0, 0, 0, 0 }, /* 0xB0 (10110000) */
//    { 1, 5, 6, 8, 0, 0, 0, 0 }, /* 0xB1 (10110001) */
//    { 2, 5, 6, 8, 0, 0, 0, 0 }, /* 0xB2 (10110010) */
//    { 1, 2, 5, 6, 8, 0, 0, 0 }, /* 0xB3 (10110011) */
//    { 3, 5, 6, 8, 0, 0, 0, 0 }, /* 0xB4 (10110100) */
//    { 1, 3, 5, 6, 8, 0, 0, 0 }, /* 0xB5 (10110101) */
//    { 2, 3, 5, 6, 8, 0, 0, 0 }, /* 0xB6 (10110110) */
//    { 1, 2, 3, 5, 6, 8, 0, 0 }, /* 0xB7 (10110111) */
//    { 4, 5, 6, 8, 0, 0, 0, 0 }, /* 0xB8 (10111000) */
//    { 1, 4, 5, 6, 8, 0, 0, 0 }, /* 0xB9 (10111001) */
//    { 2, 4, 5, 6, 8, 0, 0, 0 }, /* 0xBA (10111010) */
//    { 1, 2, 4, 5, 6, 8, 0, 0 }, /* 0xBB (10111011) */
//    { 3, 4, 5, 6, 8, 0, 0, 0 }, /* 0xBC (10111100) */
//    { 1, 3, 4, 5, 6, 8, 0, 0 }, /* 0xBD (10111101) */
//    { 2, 3, 4, 5, 6, 8, 0, 0 }, /* 0xBE (10111110) */
//    { 1, 2, 3, 4, 5, 6, 8, 0 }, /* 0xBF (10111111) */
//    { 7, 8, 0, 0, 0, 0, 0, 0 }, /* 0xC0 (11000000) */
//    { 1, 7, 8, 0, 0, 0, 0, 0 }, /* 0xC1 (11000001) */
//    { 2, 7, 8, 0, 0, 0, 0, 0 }, /* 0xC2 (11000010) */
//    { 1, 2, 7, 8, 0, 0, 0, 0 }, /* 0xC3 (11000011) */
//    { 3, 7, 8, 0, 0, 0, 0, 0 }, /* 0xC4 (11000100) */
//    { 1, 3, 7, 8, 0, 0, 0, 0 }, /* 0xC5 (11000101) */
//    { 2, 3, 7, 8, 0, 0, 0, 0 }, /* 0xC6 (11000110) */
//    { 1, 2, 3, 7, 8, 0, 0, 0 }, /* 0xC7 (11000111) */
//    { 4, 7, 8, 0, 0, 0, 0, 0 }, /* 0xC8 (11001000) */
//    { 1, 4, 7, 8, 0, 0, 0, 0 }, /* 0xC9 (11001001) */
//    { 2, 4, 7, 8, 0, 0, 0, 0 }, /* 0xCA (11001010) */
//    { 1, 2, 4, 7, 8, 0, 0, 0 }, /* 0xCB (11001011) */
//    { 3, 4, 7, 8, 0, 0, 0, 0 }, /* 0xCC (11001100) */
//    { 1, 3, 4, 7, 8, 0, 0, 0 }, /* 0xCD (11001101) */
//    { 2, 3, 4, 7, 8, 0, 0, 0 }, /* 0xCE (11001110) */
//    { 1, 2, 3, 4, 7, 8, 0, 0 }, /* 0xCF (11001111) */
//    { 5, 7, 8, 0, 0, 0, 0, 0 }, /* 0xD0 (11010000) */
//    { 1, 5, 7, 8, 0, 0, 0, 0 }, /* 0xD1 (11010001) */
//    { 2, 5, 7, 8, 0, 0, 0, 0 }, /* 0xD2 (11010010) */
//    { 1, 2, 5, 7, 8, 0, 0, 0 }, /* 0xD3 (11010011) */
//    { 3, 5, 7, 8, 0, 0, 0, 0 }, /* 0xD4 (11010100) */
//    { 1, 3, 5, 7, 8, 0, 0, 0 }, /* 0xD5 (11010101) */
//    { 2, 3, 5, 7, 8, 0, 0, 0 }, /* 0xD6 (11010110) */
//    { 1, 2, 3, 5, 7, 8, 0, 0 }, /* 0xD7 (11010111) */
//    { 4, 5, 7, 8, 0, 0, 0, 0 }, /* 0xD8 (11011000) */
//    { 1, 4, 5, 7, 8, 0, 0, 0 }, /* 0xD9 (11011001) */
//    { 2, 4, 5, 7, 8, 0, 0, 0 }, /* 0xDA (11011010) */
//    { 1, 2, 4, 5, 7, 8, 0, 0 }, /* 0xDB (11011011) */
//    { 3, 4, 5, 7, 8, 0, 0, 0 }, /* 0xDC (11011100) */
//    { 1, 3, 4, 5, 7, 8, 0, 0 }, /* 0xDD (11011101) */
//    { 2, 3, 4, 5, 7, 8, 0, 0 }, /* 0xDE (11011110) */
//    { 1, 2, 3, 4, 5, 7, 8, 0 }, /* 0xDF (11011111) */
//    { 6, 7, 8, 0, 0, 0, 0, 0 }, /* 0xE0 (11100000) */
//    { 1, 6, 7, 8, 0, 0, 0, 0 }, /* 0xE1 (11100001) */
//    { 2, 6, 7, 8, 0, 0, 0, 0 }, /* 0xE2 (11100010) */
//    { 1, 2, 6, 7, 8, 0, 0, 0 }, /* 0xE3 (11100011) */
//    { 3, 6, 7, 8, 0, 0, 0, 0 }, /* 0xE4 (11100100) */
//    { 1, 3, 6, 7, 8, 0, 0, 0 }, /* 0xE5 (11100101) */
//    { 2, 3, 6, 7, 8, 0, 0, 0 }, /* 0xE6 (11100110) */
//    { 1, 2, 3, 6, 7, 8, 0, 0 }, /* 0xE7 (11100111) */
//    { 4, 6, 7, 8, 0, 0, 0, 0 }, /* 0xE8 (11101000) */
//    { 1, 4, 6, 7, 8, 0, 0, 0 }, /* 0xE9 (11101001) */
//    { 2, 4, 6, 7, 8, 0, 0, 0 }, /* 0xEA (11101010) */
//    { 1, 2, 4, 6, 7, 8, 0, 0 }, /* 0xEB (11101011) */
//    { 3, 4, 6, 7, 8, 0, 0, 0 }, /* 0xEC (11101100) */
//    { 1, 3, 4, 6, 7, 8, 0, 0 }, /* 0xED (11101101) */
//    { 2, 3, 4, 6, 7, 8, 0, 0 }, /* 0xEE (11101110) */
//    { 1, 2, 3, 4, 6, 7, 8, 0 }, /* 0xEF (11101111) */
//    { 5, 6, 7, 8, 0, 0, 0, 0 }, /* 0xF0 (11110000) */
//    { 1, 5, 6, 7, 8, 0, 0, 0 }, /* 0xF1 (11110001) */
//    { 2, 5, 6, 7, 8, 0, 0, 0 }, /* 0xF2 (11110010) */
//    { 1, 2, 5, 6, 7, 8, 0, 0 }, /* 0xF3 (11110011) */
//    { 3, 5, 6, 7, 8, 0, 0, 0 }, /* 0xF4 (11110100) */
//    { 1, 3, 5, 6, 7, 8, 0, 0 }, /* 0xF5 (11110101) */
//    { 2, 3, 5, 6, 7, 8, 0, 0 }, /* 0xF6 (11110110) */
//    { 1, 2, 3, 5, 6, 7, 8, 0 }, /* 0xF7 (11110111) */
//    { 4, 5, 6, 7, 8, 0, 0, 0 }, /* 0xF8 (11111000) */
//    { 1, 4, 5, 6, 7, 8, 0, 0 }, /* 0xF9 (11111001) */
//    { 2, 4, 5, 6, 7, 8, 0, 0 }, /* 0xFA (11111010) */
//    { 1, 2, 4, 5, 6, 7, 8, 0 }, /* 0xFB (11111011) */
//    { 3, 4, 5, 6, 7, 8, 0, 0 }, /* 0xFC (11111100) */
//    { 1, 3, 4, 5, 6, 7, 8, 0 }, /* 0xFD (11111101) */
//    { 2, 3, 4, 5, 6, 7, 8, 0 }, /* 0xFE (11111110) */
//    { 1, 2, 3, 4, 5, 6, 7, 8 }  /* 0xFF (11111111) */
//};

//struct Node {
//    std::size_t offset;
//    char        type;
//};

//struct Parser {
//    template<int disp>
//    void parse( const char *beg, const char *end, std::integral_constant<int,disp> ) {
//        const char sp =   1u; // space (32)
//        const char o0 =   2u; // operators
//        const char o1 =   4u; // operators
//        const char o2 =   8u; // operators
//        const char v0 =  16u; // variable
//        const char v1 =  32u; // variable
//        const char nu =  64u; // numbers
//        const char cr = 128u; // carriage return (10)

//        #define SE8( v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 ) \
//            _mm256_set_epi8( v15, v14, v13, v12, v11, v10, v9, v8, v7, v6, v5, v4, v3, v2, v1, v0, \
//                             v15, v14, v13, v12, v11, v10, v9, v8, v7, v6, v5, v4, v3, v2, v1, v0 )

//        __m256i shfl_h = SE8( cr, 0, o0 | sp, o1 | nu, o0 | v0, o2 | v1, o0 | v0, o2 | v1,
//                               0, 0,       0,       0,       0,       0,       0,       0 );

//        __m256i shfl_l = SE8(
//            0 |  0 | sp | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | nu | v0 | v1 | v0 | v1,
//            0 | cr | o0 | o1 | v0 | v1 | v0 | v1,
//            0 |  0 | o0 | o1 | v0 | o2 | v0 | o2,
//            0 |  0 | o0 | o1 | v0 | o2 | v0 | o2,
//            0 |  0 | o0 | o1 | v0 | o2 | v0 | o2,
//            0 |  0 | o0 | o1 | v0 | o2 | v0 | o2,
//            0 |  0 | o0 | o1 | v0 | v1 | v0 | v1
//        );

//        //        cr        0          o0|sp    o1|nu    o0|v0    o2|v1    o0|v0     o2|v1
//        //        0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 `  112 70 p    : 0 |  0 | sp | nu | v0 | v1 | v0 | v1
//        //        1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        2 02 STX  18 12 DC2  34 22 "  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        6 06 ACK  22 16 SYN  38 26 &  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //        9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y    : 0 |  0 | o0 | nu | v0 | v1 | v0 | v1
//        //       10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z    : 0 | cr | o0 | o1 | v0 | v1 | v0 | v1
//        //       11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {    : 0 |  0 | o0 | o1 | v0 | o2 | v0 | o2
//        //       12 0C FF   28 1C FS   44 2C ,  60 3C <  76 4C L  92 5C \  108 6C l  124 7C |    : 0 |  0 | o0 | o1 | v0 | o2 | v0 | o2
//        //       13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }    : 0 |  0 | o0 | o1 | v0 | o2 | v0 | o2
//        //       14 0E SO   30 1E RS   46 2E .  62 3E >  78 4E N  94 5E ^  110 6E n  126 7E ~    : 0 |  0 | o0 | o1 | v0 | o2 | v0 | o2
//        //       15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL  : 0 |  0 | o0 | o1 | v0 | v1 | v0 | v1

//        __m256i baseVec = _mm256_set1_epi32( -1 );
//        int *out = offsets.data();

//        // __m256i value = _mm256_set1_epi8(  );
//        std::size_t old_c = (unsigned char)cr;
//        for( const __m256i *data = reinterpret_cast<const __m256i *>( beg ); data < reinterpret_cast<const __m256i *>( end ); data += 2 ) {
//            __m256i value_0 = _mm256_load_si256( data + 0 );
//            __m256i value_1 = _mm256_load_si256( data + 1 );

//            __m256i hs_0 = _mm256_shuffle_epi8( shfl_h, _mm256_and_si256( _mm256_srli_epi32( value_0, 4 ), _mm256_set1_epi8( 0x0f ) ) );
//            __m256i hs_1 = _mm256_shuffle_epi8( shfl_h, _mm256_and_si256( _mm256_srli_epi32( value_1, 4 ), _mm256_set1_epi8( 0x0f ) ) );
//            __m256i ls_0 = _mm256_shuffle_epi8( shfl_l, value_0 );
//            __m256i ls_1 = _mm256_shuffle_epi8( shfl_l, value_1 );
//            __m256i as_0 = _mm256_and_si256( hs_0, ls_0 );
//            __m256i as_1 = _mm256_and_si256( hs_1, ls_1 );

//            // coalescing of variables
//            __m256i va_0 = _mm256_and_si256( _mm256_cmpgt_epi8( as_0, _mm256_set1_epi8( v0 ) ), _mm256_set1_epi8( v0 | v1 | nu | o0 ) );
//            __m256i va_1 = _mm256_and_si256( _mm256_cmpgt_epi8( as_1, _mm256_set1_epi8( v0 ) ), _mm256_set1_epi8( v0 | v1 | nu | o0 ) );
//            as_0 = _mm256_or_si256( as_0, va_0 );
//            as_1 = _mm256_or_si256( as_1, va_1 );

//            // byte shift
//            __m256i sa_0 = _mm256_shuffle_epi8( as_0, SE8( 128u, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ) );
//            __m256i sa_1 = _mm256_shuffle_epi8( as_1, SE8( 128u, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ) );
//            sa_0 = _mm256_or_si256( sa_0, _mm256_set_epi64x( 0, _mm256_extract_epi8( as_0, 15 ), 0, old_c ) );
//            sa_1 = _mm256_or_si256( sa_1, _mm256_set_epi64x( 0, _mm256_extract_epi8( as_1, 15 ), 0, _mm256_extract_epi8( as_0, 31 ) ) );
//            old_c = _mm256_extract_epi8( as_1, 31 );

//            // save
//            std::size_t len = out - offsets.data();
//            if ( len + 64 > offsets.size() ) {
//                offsets.resize( offsets.size() + 64 );
//                out = offsets.data() + len;
//            }

//            int ch_0 = ~ _mm256_movemask_epi8( _mm256_cmpeq_epi8( as_0, sa_0 ) );
//            for( int k = 0; k < 2; ++k ) {
//                int byteA = ( ch_0 >> 0 ) & 0xFF;
//                int byteB = ( ch_0 >> 8 ) & 0xFF;
//                ch_0 >>= 16;

//                __m256i vecA =  _mm256_cvtepu8_epi32( _mm_cvtsi64_si128( *(uint64_t *)( vecDecodeTableByte[ byteA ] ) ) );
//                __m256i vecB =  _mm256_cvtepu8_epi32( _mm_cvtsi64_si128( *(uint64_t *)( vecDecodeTableByte[ byteB ] ) ) );
//                int advanceA = lengthTable[ byteA ];
//                int advanceB = lengthTable[ byteB ];

//                vecA = _mm256_add_epi32( baseVec, vecA );
//                baseVec = _mm256_add_epi32( baseVec, _mm256_set1_epi32( 8 ) );
//                vecB = _mm256_add_epi32( baseVec, vecB );
//                baseVec = _mm256_add_epi32( baseVec, _mm256_set1_epi32( 8 ) );

//                _mm256_storeu_si256( (__m256i *)out, vecA );
//                out += advanceA;
//                _mm256_storeu_si256( (__m256i *)out, vecB );
//                out += advanceB;
//            }

//            int ch_1 = ~ _mm256_movemask_epi8( _mm256_cmpeq_epi8( as_1, sa_1 ) );
//            for( int k = 0; k < 2; ++k ) {
//                int byteA = ( ch_1 >> 0 ) & 0xFF;
//                int byteB = ( ch_1 >> 8 ) & 0xFF;
//                ch_1 >>= 16;

//                __m256i vecA =  _mm256_cvtepu8_epi32( _mm_cvtsi64_si128( *(uint64_t *)( vecDecodeTableByte[ byteA ] ) ) );
//                __m256i vecB =  _mm256_cvtepu8_epi32( _mm_cvtsi64_si128( *(uint64_t *)( vecDecodeTableByte[ byteB ] ) ) );
//                int advanceA = lengthTable[ byteA ];
//                int advanceB = lengthTable[ byteB ];

//                vecA = _mm256_add_epi32( baseVec, vecA );
//                baseVec = _mm256_add_epi32( baseVec, _mm256_set1_epi32( 8 ) );
//                vecB = _mm256_add_epi32( baseVec, vecB );
//                baseVec = _mm256_add_epi32( baseVec, _mm256_set1_epi32( 8 ) );

//                _mm256_storeu_si256( (__m256i *)out, vecA );
//                out += advanceA;
//                _mm256_storeu_si256( (__m256i *)out, vecB );
//                out += advanceB;
//            }
//        }
//        offsets.resize( out - offsets.data() );
//    }

//    std::vector<int> offsets;
//    std::vector<int> types;
//};

//int main( int argc, char **argv ) {
//    // aligned buffer
//    const char content_0[] = { 99, 108, 97, 115, 115, 32, 77, 121, 67, 108, 97, 115, 115, 32, 58, 32, 77, 121, 65, 110, 99, 101, 115, 116, 111, 114, 10, 32, 32, 32, 32, 100, 101, 102, 32, 115, 109, 117, 114, 102, 40, 32, 118, 58, 32, 49, 55, 44, 32, 99, 32, 61, 32, 50, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 32, 43, 32, 40, 32, 55, 32, 42, 32, 52, 32, 41, 32, 35, 32, 98, 105, 103, 32, 99, 111, 109, 109, 101, 110, 116, 10, 32, 32, 32, 32, 100, 101, 102, 32, 115, 109, 117, 114, 102, 40, 32, 118, 58, 32, 49, 55, 44, 32, 99, 32, 61, 32, 50, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 112, 111, 117, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 32, 43, 32, 40, 32, 55, 32, 42, 32, 52, 32, 41, 32, 35, 32, 118, 101, 114, 121, 32, 98, 105, 103, 32, 99, 111, 109, 109, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 121, 101, 115, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 10, 10, 109, 121, 95, 102, 117, 110, 99, 32, 34, 115, 109, 117, 114, 102, 111, 117, 105, 108, 108, 101, 115, 109, 117, 114, 102, 111, 117, 105, 108, 108, 101, 115, 109, 117, 114, 102, 111, 117, 105, 108, 108, 101, 115, 109, 117, 114, 102, 111, 117, 105, 108, 108, 101, 34, 44, 32, 118, 97, 114, 105, 44, 32, 53, 44, 32, 99, 100, 115, 111, 104, 58, 32, 55, 49, 10, 0 };
//    std::size_t length_0 = sizeof( content_0 ) - 1;
//    std::size_t mul_0 = 100;

//    char *alloc = reinterpret_cast<char *>( malloc( mul_0 * length_0 + 32 + 64 ) );
//    char *beg = reinterpret_cast<char *>( ( reinterpret_cast<std::size_t>( alloc ) + 31 ) & ~31 );
//    for( std::size_t i = 0; i < mul_0; ++i )
//        std::memcpy( beg + length_0 * i, content_0, length_0 );
//    for( std::size_t i = length_0 * mul_0; i < length_0 * mul_0 + 64; ++i )
//        beg[ i ] = 0;

//    // to check if code is correct
//    Parser parser;
//    parser.offsets.resize( 20000 );
//    parser.parse( beg, beg + length_0, std::integral_constant<int,1>() );
//    for( std::size_t i = 1; i < parser.offsets.size(); ++i ) {
//        if ( beg[ parser.offsets[ i - 1 ] ] == 10 || beg[ parser.offsets[ i - 1 ] ] == 32 )
//            continue;
//        std::cout.write( beg + parser.offsets[ i - 1 ], parser.offsets[ i ] - parser.offsets[ i - 1 ] );
//        std::cout << std::endl;
//    }
//    P( parser.offsets );

//    // speed
//    std::size_t rep = 200000;
//    auto t0 = std::chrono::high_resolution_clock::now();
//    for( std::size_t i = 0; i < rep; ++i ) {
//        parser.offsets.clear();
//        parser.parse( beg, beg + length_0 * mul_0, std::integral_constant<int,0>() );
//    }
//    auto dt = std::chrono::duration_cast<std::chrono::microseconds>( std::chrono::high_resolution_clock::now() - t0 ).count() / 1e6;
//    P( parser.offsets.size() );

//    std::cout << "dt: " << dt << " speed: " << 1e-6 * ( rep * length_0 * mul_0 ) / dt << " MB/s" << std::endl;
//    free( alloc );
//}

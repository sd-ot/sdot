#include "../../support/TypeName.h"
#include "../../support/Arch.h"
#include "../HwType.h"
#include "../HwInfo.h"

#include "KernelSlot_Cpu.h"

namespace sdot {

/**
*/
template<class TF,class TI,class Arch>
class HwType_Cpu : public HwType {
public:
    HwType_Cpu( std::string TF_name, std::string TI_name ) : HwType( TF_name, TI_name ) {}

    virtual void get_available_slots( std::vector<std::unique_ptr<KernelSlot>> &available, const HwInfo &hw_info, std::string TF_name, std::string TI_name ) {
        if ( this->TF_name != TF_name || this->TI_name != TI_name )
            return;
        if ( ARCH_COND )
            available.push_back( std::make_unique<KernelSlot_Cpu<TF,TI,Arch>>( "cpu 0", ARCH_SCORE ) );
    }
};

#define POSSIBLE_TF( NAME ) \
    static HwType_Cpu<NAME,std::uint64_t,ARCH_NAME> inst_HwType_Cpu_##NAME( TypeName<NAME>::name(), "uint64" );
#include "../possible_TFs.h"
#undef POSSIBLE_TF

}

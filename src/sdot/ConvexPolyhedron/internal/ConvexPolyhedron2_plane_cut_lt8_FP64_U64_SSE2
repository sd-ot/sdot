#ifndef METHOD_INCLUDE
#include "../../support/type_config.h"
#include "../../support/SimdVec.h"
using namespace sdot;
using TF = FP64;
using ST = U64;

void plane_cut( const TF **nds, const TF *nss, const ST *nis, ST nb_cuts, ST nodes_size, ST nodes_rese, TF *position_xs, TF *position_ys, TF *normal_xs, TF *normal_ys, TF *distances, ST *cut_ids ) {
    ST num_cut = 0;
    #endif

    if ( nodes_size <= 8 ) {
        SimdVec<FP64,2> px0;
        SimdVec<FP64,2> px2;
        SimdVec<FP64,2> px4;
        SimdVec<FP64,2> px6;
        SimdVec<FP64,2> py0;
        SimdVec<FP64,2> py2;
        SimdVec<FP64,2> py4;
        SimdVec<FP64,2> py6;
        SimdVec<U64,2> pi0;
        SimdVec<U64,2> pi2;
        SimdVec<U64,2> pi4;
        SimdVec<U64,2> pi6;

        px0 = SimdVec<FP64,2>::load_aligned( position_xs + 0 );
        py0 = SimdVec<FP64,2>::load_aligned( position_ys + 0 );
        pi0 = SimdVec<U64,2>::load_aligned( cut_ids + 0 );
        px2 = SimdVec<FP64,2>::load_aligned( position_xs + 2 );
        py2 = SimdVec<FP64,2>::load_aligned( position_ys + 2 );
        pi2 = SimdVec<U64,2>::load_aligned( cut_ids + 2 );
        if ( nodes_size > 4 ) {
            px4 = SimdVec<FP64,2>::load_aligned( position_xs + 4 );
            py4 = SimdVec<FP64,2>::load_aligned( position_ys + 4 );
            pi4 = SimdVec<U64,2>::load_aligned( cut_ids + 4 );
            if ( nodes_size > 6 ) {
                px6 = SimdVec<FP64,2>::load_aligned( position_xs + 6 );
                py6 = SimdVec<FP64,2>::load_aligned( position_ys + 6 );
                pi6 = SimdVec<U64,2>::load_aligned( cut_ids + 6 );
            }
        }

        for( ; ; ++num_cut ) {
            if ( num_cut == nb_cuts ) {
                SimdVec<FP64,2>::store_aligned( position_xs + 0, px0 );
                SimdVec<FP64,2>::store_aligned( position_ys + 0, py0 );
                SimdVec<U64,2>::store_aligned( cut_ids + 0, pi0 );
                SimdVec<FP64,2>::store_aligned( position_xs + 2, px2 );
                SimdVec<FP64,2>::store_aligned( position_ys + 2, py2 );
                SimdVec<U64,2>::store_aligned( cut_ids + 2, pi2 );
                if ( nodes_size > 4 ) {
                    SimdVec<FP64,2>::store_aligned( position_xs + 4, px4 );
                    SimdVec<FP64,2>::store_aligned( position_ys + 4, py4 );
                    SimdVec<U64,2>::store_aligned( cut_ids + 4, pi4 );
                    if ( nodes_size > 6 ) {
                        SimdVec<FP64,2>::store_aligned( position_xs + 6, px6 );
                        SimdVec<FP64,2>::store_aligned( position_ys + 6, py6 );
                        SimdVec<U64,2>::store_aligned( cut_ids + 6, pi6 );
                    }
                }
                return;
            }

            // get distance and outside bit for each node
            int nmsk = 1 << nodes_size;
            TF nx = nds[ 0 ][ num_cut ];
            TF ny = nds[ 1 ][ num_cut ];
            TF ns = nss[ num_cut ];
            
            SimdVec<FP64,2> bi0 = px0 * nx + py0 * ny;
            SimdVec<FP64,2> bi2 = px2 * nx + py2 * ny;
            SimdVec<FP64,2> bi4 = px4 * nx + py4 * ny;
            SimdVec<FP64,2> bi6 = px6 * nx + py6 * ny;

            int outside_nodes = ( ( bi0 > ns ) << 0 ) | ( ( bi2 > ns ) << 2 ) | ( ( bi4 > ns ) << 4 ) | ( ( bi6 > ns ) << 6 );
            int case_code = ( outside_nodes & ( nmsk - 1 ) ) | nmsk;
            SimdVec<FP64,2> di0 = bi0 - ns;
            SimdVec<FP64,2> di2 = bi2 - ns;
            SimdVec<FP64,2> di4 = bi4 - ns;
            SimdVec<FP64,2> di6 = bi6 - ns;
            
            static void *dispatch_table[] = {
                &&case_168, &&case_170, &&case_170, &&case_169, &&case_170, &&case_1, &&case_0, &&case_169,
                &&case_170, &&case_5, &&case_3, &&case_7, &&case_2, &&case_6, &&case_4, &&case_169,
                &&case_170, &&case_14, &&case_11, &&case_17, &&case_9, &&store_and_break, &&case_12, &&case_19,
                &&case_8, &&case_15, &&store_and_break, &&case_18, &&case_10, &&case_16, &&case_13, &&case_169,
                &&case_170, &&case_30, &&case_26, &&case_34, &&case_23, &&store_and_break, &&case_27, &&case_37,
                &&case_21, &&store_and_break, &&store_and_break, &&store_and_break, &&case_24, &&store_and_break, &&case_28, &&case_39,
                &&case_20, &&case_31, &&store_and_break, &&case_35, &&store_and_break, &&store_and_break, &&store_and_break, &&case_38,
                &&case_22, &&case_32, &&store_and_break, &&case_36, &&case_25, &&case_33, &&case_29, &&case_169,
                &&case_170, &&case_55, &&case_50, &&case_60, &&case_46, &&store_and_break, &&case_51, &&case_64,
                &&case_43, &&store_and_break, &&store_and_break, &&store_and_break, &&case_47, &&store_and_break, &&case_52, &&case_67,
                &&case_41, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_44, &&store_and_break, &&store_and_break, &&store_and_break, &&case_48, &&store_and_break, &&case_53, &&case_69,
                &&case_40, &&case_56, &&store_and_break, &&case_61, &&store_and_break, &&store_and_break, &&store_and_break, &&case_65,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_68,
                &&case_42, &&case_57, &&store_and_break, &&case_62, &&store_and_break, &&store_and_break, &&store_and_break, &&case_66,
                &&case_45, &&case_58, &&store_and_break, &&case_63, &&case_49, &&case_59, &&case_54, &&case_169,
                &&case_170, &&case_91, &&case_85, &&case_97, &&case_80, &&store_and_break, &&case_86, &&case_102,
                &&case_76, &&store_and_break, &&store_and_break, &&store_and_break, &&case_81, &&store_and_break, &&case_87, &&case_106,
                &&case_73, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_77, &&store_and_break, &&store_and_break, &&store_and_break, &&case_82, &&store_and_break, &&case_88, &&case_109,
                &&case_71, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_74, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_78, &&store_and_break, &&store_and_break, &&store_and_break, &&case_83, &&store_and_break, &&case_89, &&case_111,
                &&case_70, &&case_92, &&store_and_break, &&case_98, &&store_and_break, &&store_and_break, &&store_and_break, &&case_103,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_107,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_110,
                &&case_72, &&case_93, &&store_and_break, &&case_99, &&store_and_break, &&store_and_break, &&store_and_break, &&case_104,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_108,
                &&case_75, &&case_94, &&store_and_break, &&case_100, &&store_and_break, &&store_and_break, &&store_and_break, &&case_105,
                &&case_79, &&case_95, &&store_and_break, &&case_101, &&case_84, &&case_96, &&case_90, &&case_169,
                &&case_170, &&case_140, &&case_133, &&case_147, &&case_127, &&store_and_break, &&case_134, &&case_153,
                &&case_122, &&store_and_break, &&store_and_break, &&store_and_break, &&case_128, &&store_and_break, &&case_135, &&case_158,
                &&case_118, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_123, &&store_and_break, &&store_and_break, &&store_and_break, &&case_129, &&store_and_break, &&case_136, &&case_162,
                &&case_115, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_119, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_124, &&store_and_break, &&store_and_break, &&store_and_break, &&case_130, &&store_and_break, &&case_137, &&case_165,
                &&case_113, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_116, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_120, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&case_125, &&store_and_break, &&store_and_break, &&store_and_break, &&case_131, &&store_and_break, &&case_138, &&case_167,
                &&case_112, &&case_141, &&store_and_break, &&case_148, &&store_and_break, &&store_and_break, &&store_and_break, &&case_154,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_159,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_163,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_166,
                &&case_114, &&case_142, &&store_and_break, &&case_149, &&store_and_break, &&store_and_break, &&store_and_break, &&case_155,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_160,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_164,
                &&case_117, &&case_143, &&store_and_break, &&case_150, &&store_and_break, &&store_and_break, &&store_and_break, &&case_156,
                &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&store_and_break, &&case_161,
                &&case_121, &&case_144, &&store_and_break, &&case_151, &&store_and_break, &&store_and_break, &&store_and_break, &&case_157,
                &&case_126, &&case_145, &&store_and_break, &&case_152, &&case_132, &&case_146, &&case_139, &&case_169,
            };
            goto *dispatch_table[ case_code ];
            
            case_0: {
                // old_nb_nodes: 2 nodes: 0 [0,1] [1,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t3{ pi0[ 1 ] };
                SimdVec<U64,2> t4;
                t4[ 0 ] = t3[ 0 ];
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 1 ] };
                SimdVec<FP64,1> t10{ py0[ 0 ] };
                SimdVec<FP64,1> t11 = t10 - t9;
                SimdVec<FP64,1> t12 = t9 - t10;
                SimdVec<FP64,1> t15{ di0[ 1 ] };
                SimdVec<FP64,1> t16{ di0[ 0 ] };
                SimdVec<FP64,1> t17 = t15 - t16;
                SimdVec<FP64,1> t18 = t15 / t17;
                SimdVec<FP64,1> t19 = t18 * t11;
                SimdVec<FP64,1> t20 = t9 + t19;
                SimdVec<FP64,2> t21;
                t21[ 0 ] = t20[ 0 ];
                SimdVec<FP64,1> t22 = t16 - t15;
                SimdVec<FP64,1> t23 = t16 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t10 + t24;
                SimdVec<FP64,2> t26{ t10[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t28{ px0[ 1 ] };
                SimdVec<FP64,1> t29{ px0[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t28;
                SimdVec<FP64,1> t31 = t30 * t18;
                SimdVec<FP64,1> t32 = t28 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t34 = t28 - t29;
                SimdVec<FP64,1> t35 = t34 * t23;
                SimdVec<FP64,1> t36 = t29 + t35;
                SimdVec<FP64,2> t37{ t29[ 0 ], t36[ 0 ] };
                px0 = t37;
                px2 = t33;
                py0 = t26;
                py2 = t21;
                pi0 = t6;
                pi2 = t4;
                continue;
            }
            case_1: {
                // old_nb_nodes: 2 nodes: [0,1] 1 [1,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 1 ] };
                SimdVec<FP64,1> t10{ py0[ 0 ] };
                SimdVec<FP64,1> t11 = t10 - t9;
                SimdVec<FP64,1> t12 = t9 - t10;
                SimdVec<FP64,1> t15{ di0[ 1 ] };
                SimdVec<FP64,1> t16{ di0[ 0 ] };
                SimdVec<FP64,1> t17 = t15 - t16;
                SimdVec<FP64,1> t18 = t15 / t17;
                SimdVec<FP64,1> t19 = t18 * t11;
                SimdVec<FP64,1> t20 = t9 + t19;
                SimdVec<FP64,2> t21;
                t21[ 0 ] = t20[ 0 ];
                SimdVec<FP64,1> t22 = t16 - t15;
                SimdVec<FP64,1> t23 = t16 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t10 + t24;
                SimdVec<FP64,2> t26{ t25[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t28{ px0[ 1 ] };
                SimdVec<FP64,1> t29{ px0[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t28;
                SimdVec<FP64,1> t31 = t30 * t18;
                SimdVec<FP64,1> t32 = t28 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t34 = t28 - t29;
                SimdVec<FP64,1> t35 = t34 * t23;
                SimdVec<FP64,1> t36 = t29 + t35;
                SimdVec<FP64,2> t37{ t36[ 0 ], t28[ 0 ] };
                px0 = t37;
                px2 = t33;
                py0 = t26;
                py2 = t21;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_2: {
                // old_nb_nodes: 3 nodes: 0 1 [1,2] [2,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t9;
                SimdVec<FP64,2> t15{ t13[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ di0[ 0 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21 = t17 / t20;
                SimdVec<FP64,1> t22 = t21 * t14;
                SimdVec<FP64,1> t23 = t9 + t22;
                SimdVec<FP64,1> t24{ di0[ 1 ] };
                SimdVec<FP64,1> t25 = t24 - t17;
                SimdVec<FP64,1> t26 = t24 / t25;
                SimdVec<FP64,1> t27 = t26 * t12;
                SimdVec<FP64,1> t28 = t11 + t27;
                SimdVec<FP64,2> t29{ t28[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t31{ px2[ 0 ] };
                SimdVec<FP64,1> t33{ px0[ 1 ] };
                SimdVec<FP64,1> t34 = t31 - t33;
                SimdVec<FP64,1> t35 = t34 * t26;
                SimdVec<FP64,1> t36 = t33 + t35;
                SimdVec<FP64,1> t37{ px0[ 0 ] };
                SimdVec<FP64,1> t38 = t37 - t31;
                SimdVec<FP64,1> t39 = t38 * t21;
                SimdVec<FP64,1> t40 = t31 + t39;
                SimdVec<FP64,2> t41{ t36[ 0 ], t40[ 0 ] };
                SimdVec<FP64,2> t42{ t37[ 0 ], t33[ 0 ] };
                px0 = t42;
                px2 = t41;
                py0 = t15;
                py2 = t29;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_3: {
                // old_nb_nodes: 3 nodes: 0 [0,1] [1,2] 2
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi2[ 0 ] };
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,2> t5{ t4[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t16{ di2[ 0 ] };
                SimdVec<FP64,1> t18{ px2[ 0 ] };
                SimdVec<FP64,1> t20{ di0[ 1 ] };
                SimdVec<FP64,1> t21 = t20 - t16;
                SimdVec<FP64,1> t22 = t20 / t21;
                SimdVec<FP64,1> t23 = t22 * t12;
                SimdVec<FP64,1> t24 = t11 + t23;
                SimdVec<FP64,2> t25{ t24[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t20;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t14;
                SimdVec<FP64,1> t30 = t13 + t29;
                SimdVec<FP64,2> t31{ t13[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t33{ px0[ 1 ] };
                SimdVec<FP64,1> t34 = t18 - t33;
                SimdVec<FP64,1> t35 = t34 * t22;
                SimdVec<FP64,1> t36 = t33 + t35;
                SimdVec<FP64,2> t37{ t36[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t38{ px0[ 0 ] };
                SimdVec<FP64,1> t39 = t33 - t38;
                SimdVec<FP64,1> t40 = t39 * t28;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t38[ 0 ], t41[ 0 ] };
                px0 = t42;
                px2 = t37;
                py0 = t31;
                py2 = t25;
                pi0 = t7;
                pi2 = t5;
                continue;
            }
            case_4: {
                // old_nb_nodes: 3 nodes: 0 [0,1] [2,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t20{ px2[ 0 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_5: {
                // old_nb_nodes: 3 nodes: [0,1] 1 2 [2,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12{ py0[ 0 ] };
                SimdVec<FP64,1> t13 = t12 - t9;
                SimdVec<FP64,1> t14 = t11 - t12;
                SimdVec<FP64,1> t16{ di2[ 0 ] };
                SimdVec<FP64,1> t18{ px2[ 0 ] };
                SimdVec<FP64,1> t20{ di0[ 1 ] };
                SimdVec<FP64,1> t21{ di0[ 0 ] };
                SimdVec<FP64,1> t22 = t16 - t21;
                SimdVec<FP64,1> t23 = t16 / t22;
                SimdVec<FP64,1> t24 = t23 * t13;
                SimdVec<FP64,1> t25 = t9 + t24;
                SimdVec<FP64,2> t26{ t9[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t27 = t21 - t20;
                SimdVec<FP64,1> t28 = t21 / t27;
                SimdVec<FP64,1> t29 = t28 * t14;
                SimdVec<FP64,1> t30 = t12 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px0[ 1 ] };
                SimdVec<FP64,1> t34{ px0[ 0 ] };
                SimdVec<FP64,1> t35 = t34 - t18;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t18 + t36;
                SimdVec<FP64,2> t38{ t18[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t39 = t33 - t34;
                SimdVec<FP64,1> t40 = t39 * t28;
                SimdVec<FP64,1> t41 = t34 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t33[ 0 ] };
                px0 = t42;
                px2 = t38;
                py0 = t31;
                py2 = t26;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_6: {
                // old_nb_nodes: 3 nodes: [0,1] 1 [1,2]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_7: {
                // old_nb_nodes: 3 nodes: [1,2] 2 [2,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 0 ] };
                SimdVec<FP64,1> t13 = t12 - t10;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t10 - t14;
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t20{ di0[ 0 ] };
                SimdVec<FP64,1> t21 = t18 - t20;
                SimdVec<FP64,1> t22 = t18 / t21;
                SimdVec<FP64,1> t23 = t22 * t13;
                SimdVec<FP64,1> t24 = t10 + t23;
                SimdVec<FP64,2> t25;
                t25[ 0 ] = t24[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t18;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t10[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 0 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t36 * t22;
                SimdVec<FP64,1> t38 = t33 + t37;
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t33 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t33[ 0 ] };
                px0 = t44;
                px2 = t39;
                py0 = t31;
                py2 = t25;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_8: {
                // old_nb_nodes: 4 nodes: 0 1 2 [2,3] [3,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t3{ pi2[ 1 ] };
                SimdVec<U64,2> t4;
                t4[ 0 ] = t3[ 0 ];
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,1> t14{ py2[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py0[ 1 ] };
                SimdVec<FP64,1> t18{ py0[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t13;
                SimdVec<FP64,2> t20{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t25{ di2[ 1 ] };
                SimdVec<FP64,1> t26 = t25 - t23;
                SimdVec<FP64,1> t27 = t25 / t26;
                SimdVec<FP64,1> t28 = t27 * t19;
                SimdVec<FP64,1> t29 = t13 + t28;
                SimdVec<FP64,2> t30;
                t30[ 0 ] = t29[ 0 ];
                SimdVec<FP64,1> t31{ di2[ 0 ] };
                SimdVec<FP64,1> t32 = t31 - t25;
                SimdVec<FP64,1> t33 = t31 / t32;
                SimdVec<FP64,1> t34 = t33 * t15;
                SimdVec<FP64,1> t35 = t14 + t34;
                SimdVec<FP64,2> t36{ t14[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t38{ px2[ 1 ] };
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t38 - t39;
                SimdVec<FP64,1> t41 = t40 * t33;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t39[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px0[ 1 ] };
                SimdVec<FP64,1> t46{ px0[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t38;
                SimdVec<FP64,1> t48 = t47 * t27;
                SimdVec<FP64,1> t49 = t38 + t48;
                SimdVec<FP64,2> t50;
                t50[ 0 ] = t49[ 0 ];
                SimdVec<FP64,2> t51{ t46[ 0 ], t45[ 0 ] };
                px0 = t51;
                px2 = t43;
                px4 = t50;
                py0 = t20;
                py2 = t36;
                py4 = t30;
                pi0 = t10;
                pi2 = t6;
                pi4 = t4;
                continue;
            }
            case_9: {
                // old_nb_nodes: 4 nodes: 0 1 [1,2] [2,3] 3
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ snis[ num_cut ][ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,2> t14;
                t14[ 0 ] = t13[ 0 ];
                SimdVec<FP64,1> t15{ py2[ 0 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ py0[ 1 ] };
                SimdVec<FP64,1> t19 = t15 - t18;
                SimdVec<FP64,1> t20{ py0[ 0 ] };
                SimdVec<FP64,2> t21{ t20[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t24{ di2[ 1 ] };
                SimdVec<FP64,1> t25{ di2[ 0 ] };
                SimdVec<FP64,1> t26 = t25 - t24;
                SimdVec<FP64,1> t27 = t25 / t26;
                SimdVec<FP64,1> t28 = t27 * t16;
                SimdVec<FP64,1> t29 = t15 + t28;
                SimdVec<FP64,1> t31{ di0[ 1 ] };
                SimdVec<FP64,1> t32 = t31 - t25;
                SimdVec<FP64,1> t33 = t31 / t32;
                SimdVec<FP64,1> t34 = t33 * t19;
                SimdVec<FP64,1> t35 = t18 + t34;
                SimdVec<FP64,2> t36{ t35[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t38{ px2[ 1 ] };
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t40{ px2[ 0 ] };
                SimdVec<FP64,1> t41 = t38 - t40;
                SimdVec<FP64,1> t42 = t41 * t27;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,1> t45{ px0[ 1 ] };
                SimdVec<FP64,1> t46 = t40 - t45;
                SimdVec<FP64,1> t47 = t46 * t33;
                SimdVec<FP64,1> t48 = t45 + t47;
                SimdVec<FP64,2> t49{ t48[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t50{ px0[ 0 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t45[ 0 ] };
                px0 = t51;
                px2 = t49;
                px4 = t39;
                py0 = t21;
                py2 = t36;
                py4 = t14;
                pi0 = t10;
                pi2 = t6;
                pi4 = t3;
                continue;
            }
            case_10: {
                // old_nb_nodes: 4 nodes: 0 1 [1,2] [3,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13 = t10 - t12;
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t14 - t9;
                SimdVec<FP64,2> t16{ t14[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 0 ] };
                SimdVec<FP64,1> t22 = t18 - t21;
                SimdVec<FP64,1> t23 = t18 / t22;
                SimdVec<FP64,1> t24 = t23 * t15;
                SimdVec<FP64,1> t25 = t9 + t24;
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t13;
                SimdVec<FP64,1> t30 = t12 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t36{ px0[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t28;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,1> t40{ px0[ 0 ] };
                SimdVec<FP64,1> t41 = t40 - t33;
                SimdVec<FP64,1> t42 = t41 * t23;
                SimdVec<FP64,1> t43 = t33 + t42;
                SimdVec<FP64,2> t44{ t39[ 0 ], t43[ 0 ] };
                SimdVec<FP64,2> t45{ t40[ 0 ], t36[ 0 ] };
                px0 = t45;
                px2 = t44;
                py0 = t16;
                py2 = t31;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_11: {
                // old_nb_nodes: 4 nodes: 0 [0,1] [1,2] 2 3
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t7{ pi0[ 1 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,2> t14;
                t14[ 0 ] = t13[ 0 ];
                SimdVec<FP64,1> t15{ py2[ 0 ] };
                SimdVec<FP64,1> t17{ py0[ 1 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t19{ py0[ 0 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t23{ di2[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ px2[ 0 ] };
                SimdVec<FP64,1> t29{ di0[ 1 ] };
                SimdVec<FP64,1> t30 = t29 - t23;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t18;
                SimdVec<FP64,1> t33 = t17 + t32;
                SimdVec<FP64,2> t34{ t33[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t35{ di0[ 0 ] };
                SimdVec<FP64,1> t36 = t35 - t29;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,2> t40{ t19[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t42{ px0[ 1 ] };
                SimdVec<FP64,1> t43 = t27 - t42;
                SimdVec<FP64,1> t44 = t43 * t31;
                SimdVec<FP64,1> t45 = t42 + t44;
                SimdVec<FP64,2> t46{ t45[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t47{ px0[ 0 ] };
                SimdVec<FP64,1> t48 = t42 - t47;
                SimdVec<FP64,1> t49 = t48 * t37;
                SimdVec<FP64,1> t50 = t47 + t49;
                SimdVec<FP64,2> t51{ t47[ 0 ], t50[ 0 ] };
                px0 = t51;
                px2 = t46;
                px4 = t26;
                py0 = t40;
                py2 = t34;
                py4 = t14;
                pi0 = t10;
                pi2 = t8;
                pi4 = t3;
                continue;
            }
            case_12: {
                // old_nb_nodes: 4 nodes: 0 [0,1] [2,3] 3
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi2[ 1 ] };
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t22[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t29[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t14[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t41[ 0 ], t44[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_13: {
                // old_nb_nodes: 4 nodes: 0 [0,1] [3,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t20{ px2[ 1 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_14: {
                // old_nb_nodes: 4 nodes: [0,1] 1 2 3 [3,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,1> t14{ py2[ 0 ] };
                SimdVec<FP64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py0[ 1 ] };
                SimdVec<FP64,1> t18{ py0[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t13;
                SimdVec<FP64,1> t20 = t17 - t18;
                SimdVec<FP64,1> t23{ di2[ 1 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ di0[ 1 ] };
                SimdVec<FP64,1> t30{ di0[ 0 ] };
                SimdVec<FP64,1> t31 = t23 - t30;
                SimdVec<FP64,1> t32 = t23 / t31;
                SimdVec<FP64,1> t33 = t32 * t19;
                SimdVec<FP64,1> t34 = t13 + t33;
                SimdVec<FP64,2> t35;
                t35[ 0 ] = t34[ 0 ];
                SimdVec<FP64,1> t36 = t30 - t29;
                SimdVec<FP64,1> t37 = t30 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t18 + t38;
                SimdVec<FP64,2> t40{ t39[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t42{ px0[ 1 ] };
                SimdVec<FP64,1> t43{ px0[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t25;
                SimdVec<FP64,1> t45 = t44 * t32;
                SimdVec<FP64,1> t46 = t25 + t45;
                SimdVec<FP64,2> t47;
                t47[ 0 ] = t46[ 0 ];
                SimdVec<FP64,1> t48 = t42 - t43;
                SimdVec<FP64,1> t49 = t48 * t37;
                SimdVec<FP64,1> t50 = t43 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t42[ 0 ] };
                px0 = t51;
                px2 = t27;
                px4 = t47;
                py0 = t40;
                py2 = t15;
                py4 = t35;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_15: {
                // old_nb_nodes: 4 nodes: [0,1] 1 2 [2,3]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_16: {
                // old_nb_nodes: 4 nodes: [0,1] 1 [1,2]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_17: {
                // old_nb_nodes: 4 nodes: [1,2] 2 3 [3,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 0 ] };
                SimdVec<FP64,1> t13 = t12 - t9;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t10 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t20{ di0[ 0 ] };
                SimdVec<FP64,1> t21 = t17 - t20;
                SimdVec<FP64,1> t22 = t17 / t21;
                SimdVec<FP64,1> t23 = t22 * t13;
                SimdVec<FP64,1> t24 = t9 + t23;
                SimdVec<FP64,2> t25{ t9[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t18;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t10[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t33;
                SimdVec<FP64,1> t38 = t37 * t22;
                SimdVec<FP64,1> t39 = t33 + t38;
                SimdVec<FP64,2> t40{ t33[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t41{ px0[ 1 ] };
                SimdVec<FP64,1> t42 = t34 - t41;
                SimdVec<FP64,1> t43 = t42 * t28;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t34[ 0 ] };
                px0 = t45;
                px2 = t40;
                py0 = t31;
                py2 = t25;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_18: {
                // old_nb_nodes: 4 nodes: [1,2] 2 [2,3]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_19: {
                // old_nb_nodes: 4 nodes: [2,3] 3 [3,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di0[ 0 ] };
                SimdVec<FP64,1> t19{ px0[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di2[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px2[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_20: {
                // old_nb_nodes: 5 nodes: 0 1 2 3 [3,4] [4,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t21 - t13;
                SimdVec<FP64,2> t23{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t22;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,1> t33{ di2[ 1 ] };
                SimdVec<FP64,1> t34 = t33 - t27;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t16;
                SimdVec<FP64,1> t37 = t15 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t31[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 1 ] };
                SimdVec<FP64,1> t43 = t40 - t42;
                SimdVec<FP64,1> t44 = t43 * t35;
                SimdVec<FP64,1> t45 = t42 + t44;
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,2> t47{ t46[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t49{ px0[ 1 ] };
                SimdVec<FP64,1> t50{ px0[ 0 ] };
                SimdVec<FP64,1> t51 = t50 - t40;
                SimdVec<FP64,1> t52 = t51 * t29;
                SimdVec<FP64,1> t53 = t40 + t52;
                SimdVec<FP64,2> t54{ t45[ 0 ], t53[ 0 ] };
                SimdVec<FP64,2> t55{ t50[ 0 ], t49[ 0 ] };
                px0 = t55;
                px2 = t47;
                px4 = t54;
                py0 = t23;
                py2 = t18;
                py4 = t38;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_21: {
                // old_nb_nodes: 5 nodes: 0 1 2 [2,3] [3,4] 4
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,2> t5{ t4[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t24{ di4[ 0 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t24;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t16;
                SimdVec<FP64,1> t32 = t15 + t31;
                SimdVec<FP64,2> t33{ t32[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t34{ di2[ 0 ] };
                SimdVec<FP64,1> t35 = t34 - t28;
                SimdVec<FP64,1> t36 = t34 / t35;
                SimdVec<FP64,1> t37 = t36 * t18;
                SimdVec<FP64,1> t38 = t17 + t37;
                SimdVec<FP64,2> t39{ t17[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t41{ px2[ 1 ] };
                SimdVec<FP64,1> t42 = t26 - t41;
                SimdVec<FP64,1> t43 = t42 * t30;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,1> t47 = t41 - t46;
                SimdVec<FP64,1> t48 = t47 * t36;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t46[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t52[ 0 ] };
                px0 = t54;
                px2 = t50;
                px4 = t45;
                py0 = t22;
                py2 = t39;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t5;
                continue;
            }
            case_22: {
                // old_nb_nodes: 5 nodes: 0 1 2 [2,3] [4,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t16 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t21 - t14;
                SimdVec<FP64,2> t23{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t14 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t37{ di2[ 1 ] };
                SimdVec<FP64,1> t38{ di2[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t18;
                SimdVec<FP64,1> t42 = t17 + t41;
                SimdVec<FP64,2> t43{ t17[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t46[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t35;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t35 + t55;
                SimdVec<FP64,2> t57;
                t57[ 0 ] = t56[ 0 ];
                SimdVec<FP64,2> t58{ t53[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t50;
                px4 = t57;
                py0 = t23;
                py2 = t43;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_23: {
                // old_nb_nodes: 5 nodes: 0 1 [1,2] [2,3] 3 4
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,1> t3{ pi2[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,2> t16{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21 = t17 - t20;
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t25{ px4[ 0 ] };
                SimdVec<FP64,1> t27{ di2[ 1 ] };
                SimdVec<FP64,1> t28{ di2[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t27;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t18;
                SimdVec<FP64,1> t32 = t17 + t31;
                SimdVec<FP64,1> t34{ di0[ 1 ] };
                SimdVec<FP64,1> t35 = t34 - t28;
                SimdVec<FP64,1> t36 = t34 / t35;
                SimdVec<FP64,1> t37 = t36 * t21;
                SimdVec<FP64,1> t38 = t20 + t37;
                SimdVec<FP64,2> t39{ t38[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t41{ px2[ 1 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t43{ px2[ 0 ] };
                SimdVec<FP64,1> t44 = t41 - t43;
                SimdVec<FP64,1> t45 = t44 * t30;
                SimdVec<FP64,1> t46 = t43 + t45;
                SimdVec<FP64,1> t48{ px0[ 1 ] };
                SimdVec<FP64,1> t49 = t43 - t48;
                SimdVec<FP64,1> t50 = t49 * t36;
                SimdVec<FP64,1> t51 = t48 + t50;
                SimdVec<FP64,2> t52{ t51[ 0 ], t46[ 0 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t48[ 0 ] };
                px0 = t54;
                px2 = t52;
                px4 = t42;
                py0 = t23;
                py2 = t39;
                py4 = t16;
                pi0 = t11;
                pi2 = t7;
                pi4 = t4;
                continue;
            }
            case_24: {
                // old_nb_nodes: 5 nodes: 0 1 [1,2] [3,4] 4
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18 = t14 - t17;
                SimdVec<FP64,1> t19{ py2[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t23{ py0[ 0 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t29{ px4[ 0 ] };
                SimdVec<FP64,2> t30;
                t30[ 0 ] = t29[ 0 ];
                SimdVec<FP64,1> t32{ di2[ 1 ] };
                SimdVec<FP64,1> t33 = t32 - t27;
                SimdVec<FP64,1> t34 = t32 / t33;
                SimdVec<FP64,1> t35 = t34 * t18;
                SimdVec<FP64,1> t36 = t17 + t35;
                SimdVec<FP64,1> t37{ di2[ 0 ] };
                SimdVec<FP64,1> t39{ di0[ 1 ] };
                SimdVec<FP64,1> t40 = t39 - t37;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t22;
                SimdVec<FP64,1> t43 = t21 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t46{ px2[ 1 ] };
                SimdVec<FP64,1> t47 = t29 - t46;
                SimdVec<FP64,1> t48 = t47 * t34;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,1> t50{ px2[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53 = t50 - t52;
                SimdVec<FP64,1> t54 = t53 * t41;
                SimdVec<FP64,1> t55 = t52 + t54;
                SimdVec<FP64,2> t56{ t55[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 0 ] };
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t56;
                px4 = t30;
                py0 = t24;
                py2 = t44;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_25: {
                // old_nb_nodes: 5 nodes: 0 1 [1,2] [4,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t15{ py0[ 0 ] };
                SimdVec<FP64,1> t16 = t15 - t9;
                SimdVec<FP64,2> t17{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t19{ di4[ 0 ] };
                SimdVec<FP64,1> t21{ px4[ 0 ] };
                SimdVec<FP64,1> t23{ di2[ 0 ] };
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t26 = t19 - t25;
                SimdVec<FP64,1> t27 = t19 / t26;
                SimdVec<FP64,1> t28 = t27 * t16;
                SimdVec<FP64,1> t29 = t9 + t28;
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t14;
                SimdVec<FP64,1> t34 = t13 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 0 ] };
                SimdVec<FP64,1> t39{ px0[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t32;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t43{ px0[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t21;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t21 + t45;
                SimdVec<FP64,2> t47{ t42[ 0 ], t46[ 0 ] };
                SimdVec<FP64,2> t48{ t43[ 0 ], t39[ 0 ] };
                px0 = t48;
                px2 = t47;
                py0 = t17;
                py2 = t35;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_26: {
                // old_nb_nodes: 5 nodes: 0 [0,1] [1,2] 2 3 4
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,1> t3{ pi2[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,2> t16{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t19{ py0[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t24{ px4[ 0 ] };
                SimdVec<FP64,1> t26{ di2[ 0 ] };
                SimdVec<FP64,1> t28{ px2[ 1 ] };
                SimdVec<FP64,2> t29{ t28[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t30{ px2[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33 = t32 - t26;
                SimdVec<FP64,1> t34 = t32 / t33;
                SimdVec<FP64,1> t35 = t34 * t20;
                SimdVec<FP64,1> t36 = t19 + t35;
                SimdVec<FP64,2> t37{ t36[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t38{ di0[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t32;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t22;
                SimdVec<FP64,1> t42 = t21 + t41;
                SimdVec<FP64,2> t43{ t21[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px0[ 1 ] };
                SimdVec<FP64,1> t46 = t30 - t45;
                SimdVec<FP64,1> t47 = t46 * t34;
                SimdVec<FP64,1> t48 = t45 + t47;
                SimdVec<FP64,2> t49{ t48[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t50{ px0[ 0 ] };
                SimdVec<FP64,1> t51 = t45 - t50;
                SimdVec<FP64,1> t52 = t51 * t40;
                SimdVec<FP64,1> t53 = t50 + t52;
                SimdVec<FP64,2> t54{ t50[ 0 ], t53[ 0 ] };
                px0 = t54;
                px2 = t49;
                px4 = t29;
                py0 = t43;
                py2 = t37;
                py4 = t16;
                pi0 = t11;
                pi2 = t9;
                pi4 = t4;
                continue;
            }
            case_27: {
                // old_nb_nodes: 5 nodes: 0 [0,1] [2,3] 3 4
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,2> t27;
                t27[ 0 ] = t26[ 0 ];
                SimdVec<FP64,1> t29{ di2[ 1 ] };
                SimdVec<FP64,1> t30{ di2[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t29;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t19;
                SimdVec<FP64,1> t34 = t18 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38{ px2[ 0 ] };
                SimdVec<FP64,1> t39 = t37 - t38;
                SimdVec<FP64,1> t40 = t39 * t32;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t22[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t53[ 0 ], t56[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t27;
                py0 = t50;
                py2 = t35;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_28: {
                // old_nb_nodes: 5 nodes: 0 [0,1] [3,4] 4
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 0 ] };
                SimdVec<U64,1> t3{ pi2[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t7{ pi0[ 0 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t12{ py2[ 1 ] };
                SimdVec<FP64,1> t13 = t10 - t12;
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16{ py0[ 0 ] };
                SimdVec<FP64,1> t17 = t15 - t16;
                SimdVec<FP64,1> t19{ di4[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t19;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t13;
                SimdVec<FP64,1> t25 = t12 + t24;
                SimdVec<FP64,2> t26{ t25[ 0 ], t10[ 0 ] };
                SimdVec<FP64,1> t28{ px4[ 0 ] };
                SimdVec<FP64,1> t30{ px2[ 1 ] };
                SimdVec<FP64,1> t31 = t28 - t30;
                SimdVec<FP64,1> t32 = t31 * t23;
                SimdVec<FP64,1> t33 = t30 + t32;
                SimdVec<FP64,2> t34{ t33[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t36{ di0[ 1 ] };
                SimdVec<FP64,1> t37{ di0[ 0 ] };
                SimdVec<FP64,1> t38 = t37 - t36;
                SimdVec<FP64,1> t39 = t37 / t38;
                SimdVec<FP64,1> t40 = t39 * t17;
                SimdVec<FP64,1> t41 = t16 + t40;
                SimdVec<FP64,2> t42{ t16[ 0 ], t41[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45{ px0[ 0 ] };
                SimdVec<FP64,1> t46 = t44 - t45;
                SimdVec<FP64,1> t47 = t46 * t39;
                SimdVec<FP64,1> t48 = t45 + t47;
                SimdVec<FP64,2> t49{ t45[ 0 ], t48[ 0 ] };
                px0 = t49;
                px2 = t34;
                py0 = t42;
                py2 = t26;
                pi0 = t8;
                pi2 = t4;
                continue;
            }
            case_29: {
                // old_nb_nodes: 5 nodes: 0 [0,1] [4,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t20{ px4[ 0 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_30: {
                // old_nb_nodes: 5 nodes: [0,1] 1 2 3 4 [4,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16{ py2[ 0 ] };
                SimdVec<FP64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py0[ 1 ] };
                SimdVec<FP64,1> t20{ py0[ 0 ] };
                SimdVec<FP64,1> t21 = t20 - t13;
                SimdVec<FP64,1> t22 = t19 - t20;
                SimdVec<FP64,1> t24{ di4[ 0 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t28{ px2[ 1 ] };
                SimdVec<FP64,1> t29{ px2[ 0 ] };
                SimdVec<FP64,2> t30{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t24 - t33;
                SimdVec<FP64,1> t35 = t24 / t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t13 + t36;
                SimdVec<FP64,2> t38{ t13[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t39 = t33 - t32;
                SimdVec<FP64,1> t40 = t33 / t39;
                SimdVec<FP64,1> t41 = t40 * t22;
                SimdVec<FP64,1> t42 = t20 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t45{ px0[ 1 ] };
                SimdVec<FP64,1> t46{ px0[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t26;
                SimdVec<FP64,1> t48 = t47 * t35;
                SimdVec<FP64,1> t49 = t26 + t48;
                SimdVec<FP64,2> t50{ t26[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t51 = t45 - t46;
                SimdVec<FP64,1> t52 = t51 * t40;
                SimdVec<FP64,1> t53 = t46 + t52;
                SimdVec<FP64,2> t54{ t53[ 0 ], t45[ 0 ] };
                px0 = t54;
                px2 = t30;
                px4 = t50;
                py0 = t43;
                py2 = t17;
                py4 = t38;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_31: {
                // old_nb_nodes: 5 nodes: [0,1] 1 2 3 [3,4]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di4[ 0 ] };
                SimdVec<FP64,1> t27{ di2[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t36{ px2[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_32: {
                // old_nb_nodes: 5 nodes: [0,1] 1 2 [2,3]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_33: {
                // old_nb_nodes: 5 nodes: [0,1] 1 [1,2]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_34: {
                // old_nb_nodes: 5 nodes: [1,2] 2 3 4 [4,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,2> t17{ t16[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 0 ] };
                SimdVec<FP64,1> t21 = t20 - t14;
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t18 - t22;
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t28{ px4[ 0 ] };
                SimdVec<FP64,1> t30{ di2[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 0 ] };
                SimdVec<FP64,1> t33 = t26 - t32;
                SimdVec<FP64,1> t34 = t26 / t33;
                SimdVec<FP64,1> t35 = t34 * t21;
                SimdVec<FP64,1> t36 = t14 + t35;
                SimdVec<FP64,2> t37;
                t37[ 0 ] = t36[ 0 ];
                SimdVec<FP64,1> t38{ di0[ 1 ] };
                SimdVec<FP64,1> t39 = t38 - t30;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t23;
                SimdVec<FP64,1> t42 = t22 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,2> t46{ t45[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t47{ px2[ 0 ] };
                SimdVec<FP64,1> t49{ px0[ 0 ] };
                SimdVec<FP64,1> t50 = t49 - t28;
                SimdVec<FP64,1> t51 = t50 * t34;
                SimdVec<FP64,1> t52 = t28 + t51;
                SimdVec<FP64,2> t53;
                t53[ 0 ] = t52[ 0 ];
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t47 - t54;
                SimdVec<FP64,1> t56 = t55 * t40;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t47[ 0 ] };
                px0 = t58;
                px2 = t46;
                px4 = t53;
                py0 = t43;
                py2 = t17;
                py4 = t37;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_35: {
                // old_nb_nodes: 5 nodes: [1,2] 2 3 [3,4]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t20{ px4[ 0 ] };
                SimdVec<FP64,1> t22{ di2[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 0 ] };
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_36: {
                // old_nb_nodes: 5 nodes: [1,2] 2 [2,3]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_37: {
                // old_nb_nodes: 5 nodes: [2,3] 3 4 [4,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 0 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t14{ py2[ 1 ] };
                SimdVec<FP64,1> t15{ py2[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ di0[ 0 ] };
                SimdVec<FP64,1> t20{ di4[ 0 ] };
                SimdVec<FP64,1> t21 = t20 - t18;
                SimdVec<FP64,1> t22 = t20 / t21;
                SimdVec<FP64,1> t23 = t22 * t12;
                SimdVec<FP64,1> t24 = t11 + t23;
                SimdVec<FP64,2> t25{ t11[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t27{ px0[ 0 ] };
                SimdVec<FP64,1> t29{ px4[ 0 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t29 + t31;
                SimdVec<FP64,2> t33{ t29[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ di2[ 1 ] };
                SimdVec<FP64,1> t36{ di2[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t35;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t16;
                SimdVec<FP64,1> t40 = t15 + t39;
                SimdVec<FP64,2> t41{ t40[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t43{ px2[ 1 ] };
                SimdVec<FP64,1> t44{ px2[ 0 ] };
                SimdVec<FP64,1> t45 = t43 - t44;
                SimdVec<FP64,1> t46 = t45 * t38;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t43[ 0 ] };
                px0 = t48;
                px2 = t33;
                py0 = t41;
                py2 = t25;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_38: {
                // old_nb_nodes: 5 nodes: [2,3] 3 [3,4]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di4[ 0 ] };
                SimdVec<FP64,1> t19{ px4[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di2[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px2[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_39: {
                // old_nb_nodes: 5 nodes: [3,4] 4 [4,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py0[ 0 ] };
                SimdVec<FP64,1> t12{ py4[ 0 ] };
                SimdVec<FP64,1> t13 = t10 - t12;
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t12 - t15;
                SimdVec<FP64,1> t19{ di0[ 0 ] };
                SimdVec<FP64,1> t21{ px0[ 0 ] };
                SimdVec<FP64,1> t23{ di4[ 0 ] };
                SimdVec<FP64,1> t24 = t23 - t19;
                SimdVec<FP64,1> t25 = t23 / t24;
                SimdVec<FP64,1> t26 = t25 * t13;
                SimdVec<FP64,1> t27 = t12 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t30{ di2[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 0 ] };
                SimdVec<FP64,1> t38 = t21 - t37;
                SimdVec<FP64,1> t39 = t38 * t25;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41;
                t41[ 0 ] = t40[ 0 ];
                SimdVec<FP64,1> t43{ px2[ 1 ] };
                SimdVec<FP64,1> t44 = t37 - t43;
                SimdVec<FP64,1> t45 = t44 * t32;
                SimdVec<FP64,1> t46 = t43 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t37[ 0 ] };
                px0 = t47;
                px2 = t41;
                py0 = t35;
                py2 = t28;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_40: {
                // old_nb_nodes: 6 nodes: 0 1 2 3 4 [4,5] [5,0]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4;
                t4[ 0 ] = t3[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,1> t22{ py2[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py0[ 1 ] };
                SimdVec<FP64,1> t26{ py0[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t17;
                SimdVec<FP64,2> t28{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t31{ di0[ 0 ] };
                SimdVec<FP64,1> t33{ di4[ 1 ] };
                SimdVec<FP64,1> t34 = t33 - t31;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t27;
                SimdVec<FP64,1> t37 = t17 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ di4[ 0 ] };
                SimdVec<FP64,1> t40 = t39 - t33;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t19;
                SimdVec<FP64,1> t43 = t18 + t42;
                SimdVec<FP64,2> t44{ t18[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t46{ px4[ 1 ] };
                SimdVec<FP64,1> t47{ px4[ 0 ] };
                SimdVec<FP64,1> t48 = t46 - t47;
                SimdVec<FP64,1> t49 = t48 * t41;
                SimdVec<FP64,1> t50 = t47 + t49;
                SimdVec<FP64,2> t51{ t47[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,1> t54{ px2[ 0 ] };
                SimdVec<FP64,2> t55{ t54[ 0 ], t53[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58{ px0[ 0 ] };
                SimdVec<FP64,1> t59 = t58 - t46;
                SimdVec<FP64,1> t60 = t59 * t35;
                SimdVec<FP64,1> t61 = t46 + t60;
                SimdVec<FP64,2> t62;
                t62[ 0 ] = t61[ 0 ];
                SimdVec<FP64,2> t63{ t58[ 0 ], t57[ 0 ] };
                px0 = t63;
                px2 = t55;
                px4 = t51;
                px6 = t62;
                py0 = t28;
                py2 = t23;
                py4 = t44;
                py6 = t38;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t4;
                continue;
            }
            case_41: {
                // old_nb_nodes: 6 nodes: 0 1 2 3 [3,4] [4,5] 5
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ snis[ num_cut ][ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py4[ 0 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t22{ py2[ 1 ] };
                SimdVec<FP64,1> t23 = t19 - t22;
                SimdVec<FP64,1> t24{ py2[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t27{ py0[ 1 ] };
                SimdVec<FP64,1> t28{ py0[ 0 ] };
                SimdVec<FP64,2> t29{ t28[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t32{ di4[ 1 ] };
                SimdVec<FP64,1> t33{ di4[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t20;
                SimdVec<FP64,1> t37 = t19 + t36;
                SimdVec<FP64,1> t39{ di2[ 1 ] };
                SimdVec<FP64,1> t40 = t39 - t33;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t23;
                SimdVec<FP64,1> t43 = t22 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t46{ px4[ 1 ] };
                SimdVec<FP64,2> t47;
                t47[ 0 ] = t46[ 0 ];
                SimdVec<FP64,1> t48{ px4[ 0 ] };
                SimdVec<FP64,1> t49 = t46 - t48;
                SimdVec<FP64,1> t50 = t49 * t35;
                SimdVec<FP64,1> t51 = t48 + t50;
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,1> t54 = t48 - t53;
                SimdVec<FP64,1> t55 = t54 * t41;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t51[ 0 ] };
                SimdVec<FP64,1> t58{ px2[ 0 ] };
                SimdVec<FP64,2> t59{ t58[ 0 ], t53[ 0 ] };
                SimdVec<FP64,1> t61{ px0[ 1 ] };
                SimdVec<FP64,1> t62{ px0[ 0 ] };
                SimdVec<FP64,2> t63{ t62[ 0 ], t61[ 0 ] };
                px0 = t63;
                px2 = t59;
                px4 = t57;
                px6 = t47;
                py0 = t29;
                py2 = t25;
                py4 = t44;
                py6 = t18;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t3;
                continue;
            }
            case_42: {
                // old_nb_nodes: 6 nodes: 0 1 2 3 [3,4] [5,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,1> t17 = t14 - t16;
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t16[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t22 - t13;
                SimdVec<FP64,2> t24{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t23;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,1> t33{ di4[ 0 ] };
                SimdVec<FP64,1> t35{ di2[ 1 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t17;
                SimdVec<FP64,1> t39 = t16 + t38;
                SimdVec<FP64,2> t40{ t39[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 1 ] };
                SimdVec<FP64,1> t43{ px4[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,1> t46 = t43 - t45;
                SimdVec<FP64,1> t47 = t46 * t37;
                SimdVec<FP64,1> t48 = t45 + t47;
                SimdVec<FP64,1> t49{ px2[ 0 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t42;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t42 + t55;
                SimdVec<FP64,2> t57{ t48[ 0 ], t56[ 0 ] };
                SimdVec<FP64,2> t58{ t53[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t50;
                px4 = t57;
                py0 = t24;
                py2 = t19;
                py4 = t40;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_43: {
                // old_nb_nodes: 6 nodes: 0 1 2 [2,3] [3,4] 4 5
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t7{ pi2[ 1 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py4[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t23{ py2[ 0 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ py0[ 1 ] };
                SimdVec<FP64,1> t27{ py0[ 0 ] };
                SimdVec<FP64,2> t28{ t27[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t31{ di4[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,2> t34;
                t34[ 0 ] = t33[ 0 ];
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t37{ di2[ 1 ] };
                SimdVec<FP64,1> t38 = t37 - t31;
                SimdVec<FP64,1> t39 = t37 / t38;
                SimdVec<FP64,1> t40 = t39 * t22;
                SimdVec<FP64,1> t41 = t21 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t43{ di2[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t37;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t24;
                SimdVec<FP64,1> t47 = t23 + t46;
                SimdVec<FP64,2> t48{ t23[ 0 ], t47[ 0 ] };
                SimdVec<FP64,1> t50{ px2[ 1 ] };
                SimdVec<FP64,1> t51 = t35 - t50;
                SimdVec<FP64,1> t52 = t51 * t39;
                SimdVec<FP64,1> t53 = t50 + t52;
                SimdVec<FP64,2> t54{ t53[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t55{ px2[ 0 ] };
                SimdVec<FP64,1> t56 = t50 - t55;
                SimdVec<FP64,1> t57 = t56 * t45;
                SimdVec<FP64,1> t58 = t55 + t57;
                SimdVec<FP64,2> t59{ t55[ 0 ], t58[ 0 ] };
                SimdVec<FP64,1> t61{ px0[ 1 ] };
                SimdVec<FP64,1> t62{ px0[ 0 ] };
                SimdVec<FP64,2> t63{ t62[ 0 ], t61[ 0 ] };
                px0 = t63;
                px2 = t59;
                px4 = t54;
                px6 = t34;
                py0 = t28;
                py2 = t48;
                py4 = t42;
                py6 = t18;
                pi0 = t14;
                pi2 = t10;
                pi4 = t8;
                pi6 = t3;
                continue;
            }
            case_44: {
                // old_nb_nodes: 6 nodes: 0 1 2 [2,3] [4,5] 5
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ di4[ 1 ] };
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t40{ di2[ 1 ] };
                SimdVec<FP64,1> t41{ di2[ 0 ] };
                SimdVec<FP64,1> t42 = t41 - t40;
                SimdVec<FP64,1> t43 = t41 / t42;
                SimdVec<FP64,1> t44 = t43 * t19;
                SimdVec<FP64,1> t45 = t18 + t44;
                SimdVec<FP64,2> t46{ t18[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t48{ px2[ 1 ] };
                SimdVec<FP64,1> t49{ px2[ 0 ] };
                SimdVec<FP64,1> t50 = t48 - t49;
                SimdVec<FP64,1> t51 = t50 * t43;
                SimdVec<FP64,1> t52 = t49 + t51;
                SimdVec<FP64,2> t53{ t49[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,2> t57{ t56[ 0 ], t55[ 0 ] };
                px0 = t57;
                px2 = t53;
                px4 = t38;
                py0 = t23;
                py2 = t46;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_45: {
                // old_nb_nodes: 6 nodes: 0 1 2 [2,3] [5,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t16 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t21 - t14;
                SimdVec<FP64,2> t23{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t14 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t35{ px4[ 1 ] };
                SimdVec<FP64,1> t37{ di2[ 1 ] };
                SimdVec<FP64,1> t38{ di2[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t18;
                SimdVec<FP64,1> t42 = t17 + t41;
                SimdVec<FP64,2> t43{ t17[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t46[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t35;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t35 + t55;
                SimdVec<FP64,2> t57;
                t57[ 0 ] = t56[ 0 ];
                SimdVec<FP64,2> t58{ t53[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t50;
                px4 = t57;
                py0 = t23;
                py2 = t43;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_46: {
                // old_nb_nodes: 6 nodes: 0 1 [1,2] [2,3] 3 4 5
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ snis[ num_cut ][ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py4[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 0 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ py0[ 1 ] };
                SimdVec<FP64,1> t27 = t23 - t26;
                SimdVec<FP64,1> t28{ py0[ 0 ] };
                SimdVec<FP64,2> t29{ t28[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t32{ px4[ 1 ] };
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t36{ di2[ 1 ] };
                SimdVec<FP64,1> t37{ di2[ 0 ] };
                SimdVec<FP64,1> t38 = t37 - t36;
                SimdVec<FP64,1> t39 = t37 / t38;
                SimdVec<FP64,1> t40 = t39 * t24;
                SimdVec<FP64,1> t41 = t23 + t40;
                SimdVec<FP64,1> t43{ di0[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t37;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t27;
                SimdVec<FP64,1> t47 = t26 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t41[ 0 ] };
                SimdVec<FP64,1> t50{ px2[ 1 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t34[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,1> t53 = t50 - t52;
                SimdVec<FP64,1> t54 = t53 * t39;
                SimdVec<FP64,1> t55 = t52 + t54;
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58 = t52 - t57;
                SimdVec<FP64,1> t59 = t58 * t45;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                SimdVec<FP64,1> t62{ px0[ 0 ] };
                SimdVec<FP64,2> t63{ t62[ 0 ], t57[ 0 ] };
                px0 = t63;
                px2 = t61;
                px4 = t51;
                px6 = t33;
                py0 = t29;
                py2 = t48;
                py4 = t22;
                py6 = t18;
                pi0 = t14;
                pi2 = t10;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_47: {
                // old_nb_nodes: 6 nodes: 0 1 [1,2] [3,4] 4 5
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18 = t14 - t17;
                SimdVec<FP64,1> t19{ py2[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t23{ py0[ 0 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t28{ px4[ 1 ] };
                SimdVec<FP64,1> t29{ px4[ 0 ] };
                SimdVec<FP64,2> t30{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t32{ di2[ 1 ] };
                SimdVec<FP64,1> t33 = t32 - t26;
                SimdVec<FP64,1> t34 = t32 / t33;
                SimdVec<FP64,1> t35 = t34 * t18;
                SimdVec<FP64,1> t36 = t17 + t35;
                SimdVec<FP64,1> t37{ di2[ 0 ] };
                SimdVec<FP64,1> t39{ di0[ 1 ] };
                SimdVec<FP64,1> t40 = t39 - t37;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t22;
                SimdVec<FP64,1> t43 = t21 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t46{ px2[ 1 ] };
                SimdVec<FP64,1> t47 = t29 - t46;
                SimdVec<FP64,1> t48 = t47 * t34;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,1> t50{ px2[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53 = t50 - t52;
                SimdVec<FP64,1> t54 = t53 * t41;
                SimdVec<FP64,1> t55 = t52 + t54;
                SimdVec<FP64,2> t56{ t55[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 0 ] };
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t56;
                px4 = t30;
                py0 = t24;
                py2 = t44;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_48: {
                // old_nb_nodes: 6 nodes: 0 1 [1,2] [4,5] 5
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ snis[ num_cut ][ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,2> t14;
                t14[ 0 ] = t13[ 0 ];
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21 = t18 - t20;
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di4[ 1 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,2> t34;
                t34[ 0 ] = t33[ 0 ];
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t36 = t33 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,1> t40{ di2[ 0 ] };
                SimdVec<FP64,1> t42{ di0[ 1 ] };
                SimdVec<FP64,1> t43 = t42 - t40;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t21;
                SimdVec<FP64,1> t46 = t20 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t31[ 0 ] };
                SimdVec<FP64,1> t49{ px2[ 0 ] };
                SimdVec<FP64,1> t51{ px0[ 1 ] };
                SimdVec<FP64,1> t52 = t49 - t51;
                SimdVec<FP64,1> t53 = t52 * t44;
                SimdVec<FP64,1> t54 = t51 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,2> t57{ t56[ 0 ], t51[ 0 ] };
                px0 = t57;
                px2 = t55;
                px4 = t34;
                py0 = t23;
                py2 = t47;
                py4 = t14;
                pi0 = t10;
                pi2 = t6;
                pi4 = t3;
                continue;
            }
            case_49: {
                // old_nb_nodes: 6 nodes: 0 1 [1,2] [5,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t15{ py0[ 0 ] };
                SimdVec<FP64,1> t16 = t15 - t9;
                SimdVec<FP64,2> t17{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t19{ di4[ 1 ] };
                SimdVec<FP64,1> t21{ px4[ 1 ] };
                SimdVec<FP64,1> t23{ di2[ 0 ] };
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t26 = t19 - t25;
                SimdVec<FP64,1> t27 = t19 / t26;
                SimdVec<FP64,1> t28 = t27 * t16;
                SimdVec<FP64,1> t29 = t9 + t28;
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t14;
                SimdVec<FP64,1> t34 = t13 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 0 ] };
                SimdVec<FP64,1> t39{ px0[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t32;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t43{ px0[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t21;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t21 + t45;
                SimdVec<FP64,2> t47{ t42[ 0 ], t46[ 0 ] };
                SimdVec<FP64,2> t48{ t43[ 0 ], t39[ 0 ] };
                px0 = t48;
                px2 = t47;
                py0 = t17;
                py2 = t35;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_50: {
                // old_nb_nodes: 6 nodes: 0 [0,1] [1,2] 2 3 4 5
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t11{ pi0[ 1 ] };
                SimdVec<U64,2> t12{ t11[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py4[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 0 ] };
                SimdVec<FP64,1> t25{ py0[ 1 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t27{ py0[ 0 ] };
                SimdVec<FP64,1> t28 = t25 - t27;
                SimdVec<FP64,1> t31{ px4[ 1 ] };
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t33{ px4[ 0 ] };
                SimdVec<FP64,1> t35{ di2[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,2> t38{ t37[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t41{ di0[ 1 ] };
                SimdVec<FP64,1> t42 = t41 - t35;
                SimdVec<FP64,1> t43 = t41 / t42;
                SimdVec<FP64,1> t44 = t43 * t26;
                SimdVec<FP64,1> t45 = t25 + t44;
                SimdVec<FP64,2> t46{ t45[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t47{ di0[ 0 ] };
                SimdVec<FP64,1> t48 = t47 - t41;
                SimdVec<FP64,1> t49 = t47 / t48;
                SimdVec<FP64,1> t50 = t49 * t28;
                SimdVec<FP64,1> t51 = t27 + t50;
                SimdVec<FP64,2> t52{ t27[ 0 ], t51[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t39 - t54;
                SimdVec<FP64,1> t56 = t55 * t43;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t59{ px0[ 0 ] };
                SimdVec<FP64,1> t60 = t54 - t59;
                SimdVec<FP64,1> t61 = t60 * t49;
                SimdVec<FP64,1> t62 = t59 + t61;
                SimdVec<FP64,2> t63{ t59[ 0 ], t62[ 0 ] };
                px0 = t63;
                px2 = t58;
                px4 = t38;
                px6 = t32;
                py0 = t52;
                py2 = t46;
                py4 = t22;
                py6 = t18;
                pi0 = t14;
                pi2 = t12;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_51: {
                // old_nb_nodes: 6 nodes: 0 [0,1] [2,3] 3 4 5
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ px4[ 1 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ di2[ 1 ] };
                SimdVec<FP64,1> t30{ di2[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t29;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t19;
                SimdVec<FP64,1> t34 = t18 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38{ px2[ 0 ] };
                SimdVec<FP64,1> t39 = t37 - t38;
                SimdVec<FP64,1> t40 = t39 * t32;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t22[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t53[ 0 ], t56[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t27;
                py0 = t50;
                py2 = t35;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_52: {
                // old_nb_nodes: 6 nodes: 0 [0,1] [3,4] 4 5
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t16{ py4[ 0 ] };
                SimdVec<FP64,1> t18{ py2[ 1 ] };
                SimdVec<FP64,1> t19 = t16 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t19;
                SimdVec<FP64,1> t32 = t18 + t31;
                SimdVec<FP64,2> t33{ t32[ 0 ], t16[ 0 ] };
                SimdVec<FP64,1> t35{ px4[ 1 ] };
                SimdVec<FP64,2> t36;
                t36[ 0 ] = t35[ 0 ];
                SimdVec<FP64,1> t37{ px4[ 0 ] };
                SimdVec<FP64,1> t39{ px2[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t30;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t45{ di0[ 1 ] };
                SimdVec<FP64,1> t46{ di0[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t45;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t23;
                SimdVec<FP64,1> t50 = t22 + t49;
                SimdVec<FP64,2> t51{ t22[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px0[ 1 ] };
                SimdVec<FP64,1> t54{ px0[ 0 ] };
                SimdVec<FP64,1> t55 = t53 - t54;
                SimdVec<FP64,1> t56 = t55 * t48;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t54[ 0 ], t57[ 0 ] };
                px0 = t58;
                px2 = t43;
                px4 = t36;
                py0 = t51;
                py2 = t33;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_53: {
                // old_nb_nodes: 6 nodes: 0 [0,1] [4,5] 5
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi4[ 1 ] };
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 1 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di4[ 1 ] };
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t22[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t25{ px4[ 1 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t29[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t14[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t41[ 0 ], t44[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_54: {
                // old_nb_nodes: 6 nodes: 0 [0,1] [5,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 1 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di4[ 1 ] };
                SimdVec<FP64,1> t20{ px4[ 1 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_55: {
                // old_nb_nodes: 6 nodes: [0,1] 1 2 3 4 5 [5,0]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,1> t22{ py2[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py0[ 1 ] };
                SimdVec<FP64,1> t26{ py0[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t17;
                SimdVec<FP64,1> t28 = t25 - t26;
                SimdVec<FP64,1> t31{ di4[ 1 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38{ px2[ 0 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t41{ di0[ 1 ] };
                SimdVec<FP64,1> t42{ di0[ 0 ] };
                SimdVec<FP64,1> t43 = t31 - t42;
                SimdVec<FP64,1> t44 = t31 / t43;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t17 + t45;
                SimdVec<FP64,2> t47;
                t47[ 0 ] = t46[ 0 ];
                SimdVec<FP64,1> t48 = t42 - t41;
                SimdVec<FP64,1> t49 = t42 / t48;
                SimdVec<FP64,1> t50 = t49 * t28;
                SimdVec<FP64,1> t51 = t26 + t50;
                SimdVec<FP64,2> t52{ t51[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55{ px0[ 0 ] };
                SimdVec<FP64,1> t56 = t55 - t33;
                SimdVec<FP64,1> t57 = t56 * t44;
                SimdVec<FP64,1> t58 = t33 + t57;
                SimdVec<FP64,2> t59;
                t59[ 0 ] = t58[ 0 ];
                SimdVec<FP64,1> t60 = t54 - t55;
                SimdVec<FP64,1> t61 = t60 * t49;
                SimdVec<FP64,1> t62 = t55 + t61;
                SimdVec<FP64,2> t63{ t62[ 0 ], t54[ 0 ] };
                px0 = t63;
                px2 = t39;
                px4 = t35;
                px6 = t59;
                py0 = t52;
                py2 = t23;
                py4 = t19;
                py6 = t47;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t2;
                continue;
            }
            case_56: {
                // old_nb_nodes: 6 nodes: [0,1] 1 2 3 4 [4,5]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ di4[ 1 ] };
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t14[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t34[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t38;
                py0 = t50;
                py2 = t19;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_57: {
                // old_nb_nodes: 6 nodes: [0,1] 1 2 3 [3,4]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di4[ 0 ] };
                SimdVec<FP64,1> t27{ di2[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t36{ px2[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_58: {
                // old_nb_nodes: 6 nodes: [0,1] 1 2 [2,3]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_59: {
                // old_nb_nodes: 6 nodes: [0,1] 1 [1,2]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_60: {
                // old_nb_nodes: 6 nodes: [1,2] 2 3 4 5 [5,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,2> t17{ t16[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 0 ] };
                SimdVec<FP64,1> t21 = t20 - t13;
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t18 - t22;
                SimdVec<FP64,1> t25{ di4[ 1 ] };
                SimdVec<FP64,1> t27{ px4[ 1 ] };
                SimdVec<FP64,1> t28{ px4[ 0 ] };
                SimdVec<FP64,1> t30{ di2[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 0 ] };
                SimdVec<FP64,1> t33 = t25 - t32;
                SimdVec<FP64,1> t34 = t25 / t33;
                SimdVec<FP64,1> t35 = t34 * t21;
                SimdVec<FP64,1> t36 = t13 + t35;
                SimdVec<FP64,2> t37{ t13[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t38{ di0[ 1 ] };
                SimdVec<FP64,1> t39 = t38 - t30;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t23;
                SimdVec<FP64,1> t42 = t22 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,2> t46{ t45[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t47{ px2[ 0 ] };
                SimdVec<FP64,1> t49{ px0[ 0 ] };
                SimdVec<FP64,1> t50 = t49 - t27;
                SimdVec<FP64,1> t51 = t50 * t34;
                SimdVec<FP64,1> t52 = t27 + t51;
                SimdVec<FP64,2> t53{ t27[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t47 - t54;
                SimdVec<FP64,1> t56 = t55 * t40;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t47[ 0 ] };
                px0 = t58;
                px2 = t46;
                px4 = t53;
                py0 = t43;
                py2 = t17;
                py4 = t37;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_61: {
                // old_nb_nodes: 6 nodes: [1,2] 2 3 4 [4,5]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ py2[ 1 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t26{ di4[ 1 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t36 = t34 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t41{ di2[ 0 ] };
                SimdVec<FP64,1> t43{ di0[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t41;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t23;
                SimdVec<FP64,1> t47 = t22 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t50{ px2[ 1 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t52 - t54;
                SimdVec<FP64,1> t56 = t55 * t45;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t51;
                px4 = t39;
                py0 = t48;
                py2 = t19;
                py4 = t32;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_62: {
                // old_nb_nodes: 6 nodes: [1,2] 2 3 [3,4]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t20{ px4[ 0 ] };
                SimdVec<FP64,1> t22{ di2[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 0 ] };
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_63: {
                // old_nb_nodes: 6 nodes: [1,2] 2 [2,3]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_64: {
                // old_nb_nodes: 6 nodes: [2,3] 3 4 5 [5,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 1 ] };
                SimdVec<FP64,1> t21{ py2[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t27{ di4[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px0[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45{ di2[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_65: {
                // old_nb_nodes: 6 nodes: [2,3] 3 4 [4,5]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 1 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,1> t14{ py2[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di4[ 1 ] };
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px4[ 1 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di2[ 1 ] };
                SimdVec<FP64,1> t33{ di2[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_66: {
                // old_nb_nodes: 6 nodes: [2,3] 3 [3,4]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di4[ 0 ] };
                SimdVec<FP64,1> t19{ px4[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di2[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px2[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_67: {
                // old_nb_nodes: 6 nodes: [3,4] 4 5 [5,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di0[ 0 ] };
                SimdVec<FP64,1> t20{ px0[ 0 ] };
                SimdVec<FP64,1> t22{ di4[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 0 ] };
                SimdVec<FP64,1> t30{ di2[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ px2[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_68: {
                // old_nb_nodes: 6 nodes: [3,4] 4 [4,5]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 1 ] };
                SimdVec<FP64,1> t11{ py4[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py2[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di4[ 1 ] };
                SimdVec<FP64,1> t19{ di4[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di2[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_69: {
                // old_nb_nodes: 6 nodes: [4,5] 5 [5,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di0[ 0 ] };
                SimdVec<FP64,1> t19{ px0[ 0 ] };
                SimdVec<FP64,1> t21{ di4[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px4[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_70: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 4 5 [5,6] [6,0]
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t17;
                SimdVec<FP64,2> t31{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t35{ di6[ 0 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t30;
                SimdVec<FP64,1> t39 = t17 + t38;
                SimdVec<FP64,1> t41{ di4[ 1 ] };
                SimdVec<FP64,1> t42 = t41 - t35;
                SimdVec<FP64,1> t43 = t41 / t42;
                SimdVec<FP64,1> t44 = t43 * t20;
                SimdVec<FP64,1> t45 = t19 + t44;
                SimdVec<FP64,2> t46{ t45[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t48{ px6[ 0 ] };
                SimdVec<FP64,1> t50{ px4[ 1 ] };
                SimdVec<FP64,1> t51 = t48 - t50;
                SimdVec<FP64,1> t52 = t51 * t43;
                SimdVec<FP64,1> t53 = t50 + t52;
                SimdVec<FP64,1> t54{ px4[ 0 ] };
                SimdVec<FP64,2> t55{ t54[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t57{ px2[ 1 ] };
                SimdVec<FP64,1> t58{ px2[ 0 ] };
                SimdVec<FP64,2> t59{ t58[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t61{ px0[ 1 ] };
                SimdVec<FP64,1> t62{ px0[ 0 ] };
                SimdVec<FP64,1> t63 = t62 - t48;
                SimdVec<FP64,1> t64 = t63 * t37;
                SimdVec<FP64,1> t65 = t48 + t64;
                SimdVec<FP64,2> t66{ t53[ 0 ], t65[ 0 ] };
                SimdVec<FP64,2> t67{ t62[ 0 ], t61[ 0 ] };
                px0 = t67;
                px2 = t59;
                px4 = t55;
                px6 = t66;
                py0 = t31;
                py2 = t26;
                py4 = t22;
                py6 = t46;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_71: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 4 [4,5] [5,6] 6
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,2> t5{ t4[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,2> t30{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t32{ di6[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t36{ di4[ 1 ] };
                SimdVec<FP64,1> t37 = t36 - t32;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t20;
                SimdVec<FP64,1> t40 = t19 + t39;
                SimdVec<FP64,2> t41{ t40[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t42{ di4[ 0 ] };
                SimdVec<FP64,1> t43 = t42 - t36;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t22;
                SimdVec<FP64,1> t46 = t21 + t45;
                SimdVec<FP64,2> t47{ t21[ 0 ], t46[ 0 ] };
                SimdVec<FP64,1> t49{ px4[ 1 ] };
                SimdVec<FP64,1> t50 = t34 - t49;
                SimdVec<FP64,1> t51 = t50 * t38;
                SimdVec<FP64,1> t52 = t49 + t51;
                SimdVec<FP64,2> t53{ t52[ 0 ], t34[ 0 ] };
                SimdVec<FP64,1> t54{ px4[ 0 ] };
                SimdVec<FP64,1> t55 = t49 - t54;
                SimdVec<FP64,1> t56 = t55 * t44;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t54[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,2> t62{ t61[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t64[ 0 ] };
                px0 = t66;
                px2 = t62;
                px4 = t58;
                px6 = t53;
                py0 = t30;
                py2 = t26;
                py4 = t47;
                py6 = t41;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t5;
                continue;
            }
            case_72: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 4 [4,5] [6,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t18;
                SimdVec<FP64,2> t31{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t34{ di0[ 0 ] };
                SimdVec<FP64,1> t36{ di6[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t34;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t18 + t39;
                SimdVec<FP64,2> t41;
                t41[ 0 ] = t40[ 0 ];
                SimdVec<FP64,1> t43{ px6[ 0 ] };
                SimdVec<FP64,1> t45{ di4[ 1 ] };
                SimdVec<FP64,1> t46{ di4[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t45;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t22;
                SimdVec<FP64,1> t50 = t21 + t49;
                SimdVec<FP64,2> t51{ t21[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px4[ 1 ] };
                SimdVec<FP64,1> t54{ px4[ 0 ] };
                SimdVec<FP64,1> t55 = t53 - t54;
                SimdVec<FP64,1> t56 = t55 * t48;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t54[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,2> t62{ t61[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t65 - t43;
                SimdVec<FP64,1> t67 = t66 * t38;
                SimdVec<FP64,1> t68 = t43 + t67;
                SimdVec<FP64,2> t69;
                t69[ 0 ] = t68[ 0 ];
                SimdVec<FP64,2> t70{ t65[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t62;
                px4 = t58;
                px6 = t69;
                py0 = t31;
                py2 = t26;
                py4 = t51;
                py6 = t41;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_73: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 [3,4] [4,5] 5 6
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25 = t21 - t24;
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 0 ] };
                SimdVec<FP64,1> t35{ di4[ 1 ] };
                SimdVec<FP64,1> t36{ di4[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t35;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t22;
                SimdVec<FP64,1> t40 = t21 + t39;
                SimdVec<FP64,1> t42{ di2[ 1 ] };
                SimdVec<FP64,1> t43 = t42 - t36;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t25;
                SimdVec<FP64,1> t46 = t24 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t49{ px4[ 1 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t51{ px4[ 0 ] };
                SimdVec<FP64,1> t52 = t49 - t51;
                SimdVec<FP64,1> t53 = t52 * t38;
                SimdVec<FP64,1> t54 = t51 + t53;
                SimdVec<FP64,1> t56{ px2[ 1 ] };
                SimdVec<FP64,1> t57 = t51 - t56;
                SimdVec<FP64,1> t58 = t57 * t44;
                SimdVec<FP64,1> t59 = t56 + t58;
                SimdVec<FP64,2> t60{ t59[ 0 ], t54[ 0 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,2> t62{ t61[ 0 ], t56[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t64[ 0 ] };
                px0 = t66;
                px2 = t62;
                px4 = t60;
                px6 = t50;
                py0 = t31;
                py2 = t27;
                py4 = t47;
                py6 = t20;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t4;
                continue;
            }
            case_74: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 [3,4] [5,6] 6
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22 = t18 - t21;
                SimdVec<FP64,1> t23{ py4[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t27{ py2[ 0 ] };
                SimdVec<FP64,2> t28{ t27[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t30{ py0[ 1 ] };
                SimdVec<FP64,1> t31{ py0[ 0 ] };
                SimdVec<FP64,2> t32{ t31[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t35{ di6[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 0 ] };
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ di4[ 1 ] };
                SimdVec<FP64,1> t41 = t40 - t35;
                SimdVec<FP64,1> t42 = t40 / t41;
                SimdVec<FP64,1> t43 = t42 * t22;
                SimdVec<FP64,1> t44 = t21 + t43;
                SimdVec<FP64,1> t45{ di4[ 0 ] };
                SimdVec<FP64,1> t47{ di2[ 1 ] };
                SimdVec<FP64,1> t48 = t47 - t45;
                SimdVec<FP64,1> t49 = t47 / t48;
                SimdVec<FP64,1> t50 = t49 * t26;
                SimdVec<FP64,1> t51 = t25 + t50;
                SimdVec<FP64,2> t52{ t51[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t54{ px4[ 1 ] };
                SimdVec<FP64,1> t55 = t37 - t54;
                SimdVec<FP64,1> t56 = t55 * t42;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,1> t58{ px4[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61 = t58 - t60;
                SimdVec<FP64,1> t62 = t61 * t49;
                SimdVec<FP64,1> t63 = t60 + t62;
                SimdVec<FP64,2> t64{ t63[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t65{ px2[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t68{ px0[ 1 ] };
                SimdVec<FP64,1> t69{ px0[ 0 ] };
                SimdVec<FP64,2> t70{ t69[ 0 ], t68[ 0 ] };
                px0 = t70;
                px2 = t66;
                px4 = t64;
                px6 = t38;
                py0 = t32;
                py2 = t28;
                py4 = t52;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_75: {
                // old_nb_nodes: 7 nodes: 0 1 2 3 [3,4] [6,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t19{ py2[ 0 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23{ py0[ 0 ] };
                SimdVec<FP64,1> t24 = t23 - t13;
                SimdVec<FP64,2> t25{ t23[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t29{ di6[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t27;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t24;
                SimdVec<FP64,1> t33 = t13 + t32;
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t37{ di4[ 0 ] };
                SimdVec<FP64,1> t39{ di2[ 1 ] };
                SimdVec<FP64,1> t40 = t39 - t37;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t18;
                SimdVec<FP64,1> t43 = t17 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t46{ px4[ 0 ] };
                SimdVec<FP64,1> t48{ px2[ 1 ] };
                SimdVec<FP64,1> t49 = t46 - t48;
                SimdVec<FP64,1> t50 = t49 * t41;
                SimdVec<FP64,1> t51 = t48 + t50;
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,2> t53{ t52[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,1> t57 = t56 - t35;
                SimdVec<FP64,1> t58 = t57 * t31;
                SimdVec<FP64,1> t59 = t35 + t58;
                SimdVec<FP64,2> t60{ t51[ 0 ], t59[ 0 ] };
                SimdVec<FP64,2> t61{ t56[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t53;
                px4 = t60;
                py0 = t25;
                py2 = t20;
                py4 = t44;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_76: {
                // old_nb_nodes: 7 nodes: 0 1 2 [2,3] [3,4] 4 5 6
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,2> t30{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t32{ px6[ 0 ] };
                SimdVec<FP64,1> t34{ di4[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,2> t37{ t36[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,1> t40{ di2[ 1 ] };
                SimdVec<FP64,1> t41 = t40 - t34;
                SimdVec<FP64,1> t42 = t40 / t41;
                SimdVec<FP64,1> t43 = t42 * t24;
                SimdVec<FP64,1> t44 = t23 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t46{ di2[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t40;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t26;
                SimdVec<FP64,1> t50 = t25 + t49;
                SimdVec<FP64,2> t51{ t25[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,1> t54 = t38 - t53;
                SimdVec<FP64,1> t55 = t54 * t42;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t58{ px2[ 0 ] };
                SimdVec<FP64,1> t59 = t53 - t58;
                SimdVec<FP64,1> t60 = t59 * t48;
                SimdVec<FP64,1> t61 = t58 + t60;
                SimdVec<FP64,2> t62{ t58[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t64[ 0 ] };
                px0 = t66;
                px2 = t62;
                px4 = t57;
                px6 = t37;
                py0 = t30;
                py2 = t51;
                py4 = t45;
                py6 = t20;
                pi0 = t15;
                pi2 = t11;
                pi4 = t9;
                pi6 = t4;
                continue;
            }
            case_77: {
                // old_nb_nodes: 7 nodes: 0 1 2 [2,3] [4,5] 5 6
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,2> t35;
                t35[ 0 ] = t34[ 0 ];
                SimdVec<FP64,1> t37{ di4[ 1 ] };
                SimdVec<FP64,1> t38{ di4[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t23;
                SimdVec<FP64,1> t42 = t22 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t45{ px4[ 1 ] };
                SimdVec<FP64,1> t46{ px4[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t52{ di2[ 1 ] };
                SimdVec<FP64,1> t53{ di2[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t52;
                SimdVec<FP64,1> t55 = t53 / t54;
                SimdVec<FP64,1> t56 = t55 * t27;
                SimdVec<FP64,1> t57 = t26 + t56;
                SimdVec<FP64,2> t58{ t26[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,1> t62 = t60 - t61;
                SimdVec<FP64,1> t63 = t62 * t55;
                SimdVec<FP64,1> t64 = t61 + t63;
                SimdVec<FP64,2> t65{ t61[ 0 ], t64[ 0 ] };
                SimdVec<FP64,1> t67{ px0[ 1 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,2> t69{ t68[ 0 ], t67[ 0 ] };
                px0 = t69;
                px2 = t65;
                px4 = t50;
                px6 = t35;
                py0 = t31;
                py2 = t58;
                py4 = t43;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_78: {
                // old_nb_nodes: 7 nodes: 0 1 2 [2,3] [5,6] 6
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t7{ pi2[ 0 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,1> t11{ pi0[ 0 ] };
                SimdVec<U64,2> t12{ t11[ 0 ], t10[ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,1> t16{ py4[ 1 ] };
                SimdVec<FP64,1> t17 = t14 - t16;
                SimdVec<FP64,1> t19{ py2[ 1 ] };
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t21 = t19 - t20;
                SimdVec<FP64,1> t23{ py0[ 1 ] };
                SimdVec<FP64,1> t24{ py0[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t27{ di6[ 0 ] };
                SimdVec<FP64,1> t29{ di4[ 1 ] };
                SimdVec<FP64,1> t30 = t29 - t27;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t17;
                SimdVec<FP64,1> t33 = t16 + t32;
                SimdVec<FP64,2> t34{ t33[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 1 ] };
                SimdVec<FP64,1> t39 = t36 - t38;
                SimdVec<FP64,1> t40 = t39 * t31;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45{ di2[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t21;
                SimdVec<FP64,1> t49 = t20 + t48;
                SimdVec<FP64,2> t50{ t20[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t53[ 0 ], t56[ 0 ] };
                SimdVec<FP64,1> t59{ px0[ 1 ] };
                SimdVec<FP64,1> t60{ px0[ 0 ] };
                SimdVec<FP64,2> t61{ t60[ 0 ], t59[ 0 ] };
                px0 = t61;
                px2 = t57;
                px4 = t42;
                py0 = t25;
                py2 = t50;
                py4 = t34;
                pi0 = t12;
                pi2 = t8;
                pi4 = t4;
                continue;
            }
            case_79: {
                // old_nb_nodes: 7 nodes: 0 1 2 [2,3] [6,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t16 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t21 - t14;
                SimdVec<FP64,2> t23{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t14 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t37{ di2[ 1 ] };
                SimdVec<FP64,1> t38{ di2[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t18;
                SimdVec<FP64,1> t42 = t17 + t41;
                SimdVec<FP64,2> t43{ t17[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t46[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t35;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t35 + t55;
                SimdVec<FP64,2> t57;
                t57[ 0 ] = t56[ 0 ];
                SimdVec<FP64,2> t58{ t53[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t50;
                px4 = t57;
                py0 = t23;
                py2 = t43;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_80: {
                // old_nb_nodes: 7 nodes: 0 1 [1,2] [2,3] 3 4 5 6
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,1> t7{ pi2[ 1 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ snis[ num_cut ][ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29 = t25 - t28;
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 0 ] };
                SimdVec<FP64,1> t35{ px4[ 1 ] };
                SimdVec<FP64,2> t36{ t35[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 0 ] };
                SimdVec<FP64,1> t39{ di2[ 1 ] };
                SimdVec<FP64,1> t40{ di2[ 0 ] };
                SimdVec<FP64,1> t41 = t40 - t39;
                SimdVec<FP64,1> t42 = t40 / t41;
                SimdVec<FP64,1> t43 = t42 * t26;
                SimdVec<FP64,1> t44 = t25 + t43;
                SimdVec<FP64,1> t46{ di0[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t40;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t29;
                SimdVec<FP64,1> t50 = t28 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t55{ px2[ 0 ] };
                SimdVec<FP64,1> t56 = t53 - t55;
                SimdVec<FP64,1> t57 = t56 * t42;
                SimdVec<FP64,1> t58 = t55 + t57;
                SimdVec<FP64,1> t60{ px0[ 1 ] };
                SimdVec<FP64,1> t61 = t55 - t60;
                SimdVec<FP64,1> t62 = t61 * t48;
                SimdVec<FP64,1> t63 = t60 + t62;
                SimdVec<FP64,2> t64{ t63[ 0 ], t58[ 0 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t60[ 0 ] };
                px0 = t66;
                px2 = t64;
                px4 = t54;
                px6 = t36;
                py0 = t31;
                py2 = t51;
                py4 = t24;
                py6 = t20;
                pi0 = t15;
                pi2 = t11;
                pi4 = t8;
                pi6 = t4;
                continue;
            }
            case_81: {
                // old_nb_nodes: 7 nodes: 0 1 [1,2] [3,4] 4 5 6
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ snis[ num_cut ][ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26 = t22 - t25;
                SimdVec<FP64,1> t27{ py2[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t31{ py0[ 0 ] };
                SimdVec<FP64,2> t32{ t31[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,2> t36;
                t36[ 0 ] = t35[ 0 ];
                SimdVec<FP64,1> t38{ di4[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45 = t44 - t38;
                SimdVec<FP64,1> t46 = t44 / t45;
                SimdVec<FP64,1> t47 = t46 * t26;
                SimdVec<FP64,1> t48 = t25 + t47;
                SimdVec<FP64,1> t49{ di2[ 0 ] };
                SimdVec<FP64,1> t51{ di0[ 1 ] };
                SimdVec<FP64,1> t52 = t51 - t49;
                SimdVec<FP64,1> t53 = t51 / t52;
                SimdVec<FP64,1> t54 = t53 * t30;
                SimdVec<FP64,1> t55 = t29 + t54;
                SimdVec<FP64,2> t56{ t55[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t58{ px2[ 1 ] };
                SimdVec<FP64,1> t59 = t41 - t58;
                SimdVec<FP64,1> t60 = t59 * t46;
                SimdVec<FP64,1> t61 = t58 + t60;
                SimdVec<FP64,1> t62{ px2[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65 = t62 - t64;
                SimdVec<FP64,1> t66 = t65 * t53;
                SimdVec<FP64,1> t67 = t64 + t66;
                SimdVec<FP64,2> t68{ t67[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t69{ px0[ 0 ] };
                SimdVec<FP64,2> t70{ t69[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t68;
                px4 = t42;
                px6 = t36;
                py0 = t32;
                py2 = t56;
                py4 = t23;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_82: {
                // old_nb_nodes: 7 nodes: 0 1 [1,2] [4,5] 5 6
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,2> t16{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t24{ py0[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t27{ px6[ 0 ] };
                SimdVec<FP64,1> t29{ di4[ 1 ] };
                SimdVec<FP64,1> t30{ di4[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t29;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t18;
                SimdVec<FP64,1> t34 = t17 + t33;
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,2> t37{ t36[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,1> t39 = t36 - t38;
                SimdVec<FP64,1> t40 = t39 * t32;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,1> t43{ di2[ 0 ] };
                SimdVec<FP64,1> t45{ di0[ 1 ] };
                SimdVec<FP64,1> t46 = t45 - t43;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t34[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t52 - t54;
                SimdVec<FP64,1> t56 = t55 * t47;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t41[ 0 ] };
                SimdVec<FP64,1> t59{ px0[ 0 ] };
                SimdVec<FP64,2> t60{ t59[ 0 ], t54[ 0 ] };
                px0 = t60;
                px2 = t58;
                px4 = t37;
                py0 = t25;
                py2 = t50;
                py4 = t16;
                pi0 = t11;
                pi2 = t7;
                pi4 = t4;
                continue;
            }
            case_83: {
                // old_nb_nodes: 7 nodes: 0 1 [1,2] [5,6] 6
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18 = t14 - t17;
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t24{ py0[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 0 ] };
                SimdVec<FP64,1> t30{ di4[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t18;
                SimdVec<FP64,1> t34 = t17 + t33;
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,2> t37;
                t37[ 0 ] = t36[ 0 ];
                SimdVec<FP64,1> t39{ px4[ 1 ] };
                SimdVec<FP64,1> t40 = t36 - t39;
                SimdVec<FP64,1> t41 = t40 * t32;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t44{ di2[ 0 ] };
                SimdVec<FP64,1> t46{ di0[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t23;
                SimdVec<FP64,1> t50 = t22 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t34[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56 = t53 - t55;
                SimdVec<FP64,1> t57 = t56 * t48;
                SimdVec<FP64,1> t58 = t55 + t57;
                SimdVec<FP64,2> t59{ t58[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t60{ px0[ 0 ] };
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t59;
                px4 = t37;
                py0 = t25;
                py2 = t51;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_84: {
                // old_nb_nodes: 7 nodes: 0 1 [1,2] [6,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t15{ py0[ 0 ] };
                SimdVec<FP64,1> t16 = t15 - t9;
                SimdVec<FP64,2> t17{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t19{ di6[ 0 ] };
                SimdVec<FP64,1> t21{ px6[ 0 ] };
                SimdVec<FP64,1> t23{ di2[ 0 ] };
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t26 = t19 - t25;
                SimdVec<FP64,1> t27 = t19 / t26;
                SimdVec<FP64,1> t28 = t27 * t16;
                SimdVec<FP64,1> t29 = t9 + t28;
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t14;
                SimdVec<FP64,1> t34 = t13 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 0 ] };
                SimdVec<FP64,1> t39{ px0[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t32;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t43{ px0[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t21;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t21 + t45;
                SimdVec<FP64,2> t47{ t42[ 0 ], t46[ 0 ] };
                SimdVec<FP64,2> t48{ t43[ 0 ], t39[ 0 ] };
                px0 = t48;
                px2 = t47;
                py0 = t17;
                py2 = t35;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_85: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [1,2] 2 3 4 5 6
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,1> t7{ pi2[ 1 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,1> t27{ py0[ 1 ] };
                SimdVec<FP64,1> t28 = t25 - t27;
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t32{ px6[ 0 ] };
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 0 ] };
                SimdVec<FP64,1> t38{ di2[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,2> t41{ t40[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45 = t44 - t38;
                SimdVec<FP64,1> t46 = t44 / t45;
                SimdVec<FP64,1> t47 = t46 * t28;
                SimdVec<FP64,1> t48 = t27 + t47;
                SimdVec<FP64,2> t49{ t48[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t50{ di0[ 0 ] };
                SimdVec<FP64,1> t51 = t50 - t44;
                SimdVec<FP64,1> t52 = t50 / t51;
                SimdVec<FP64,1> t53 = t52 * t30;
                SimdVec<FP64,1> t54 = t29 + t53;
                SimdVec<FP64,2> t55{ t29[ 0 ], t54[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58 = t42 - t57;
                SimdVec<FP64,1> t59 = t58 * t46;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t62{ px0[ 0 ] };
                SimdVec<FP64,1> t63 = t57 - t62;
                SimdVec<FP64,1> t64 = t63 * t52;
                SimdVec<FP64,1> t65 = t62 + t64;
                SimdVec<FP64,2> t66{ t62[ 0 ], t65[ 0 ] };
                px0 = t66;
                px2 = t61;
                px4 = t41;
                px6 = t35;
                py0 = t55;
                py2 = t49;
                py4 = t24;
                py6 = t20;
                pi0 = t15;
                pi2 = t13;
                pi4 = t8;
                pi6 = t4;
                continue;
            }
            case_86: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [2,3] 3 4 5 6
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,1> t31 = t29 - t30;
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,2> t35;
                t35[ 0 ] = t34[ 0 ];
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t41{ di2[ 1 ] };
                SimdVec<FP64,1> t42{ di2[ 0 ] };
                SimdVec<FP64,1> t43 = t42 - t41;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t26 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t49{ px2[ 1 ] };
                SimdVec<FP64,1> t50{ px2[ 0 ] };
                SimdVec<FP64,1> t51 = t49 - t50;
                SimdVec<FP64,1> t52 = t51 * t44;
                SimdVec<FP64,1> t53 = t50 + t52;
                SimdVec<FP64,2> t54{ t53[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 1 ] };
                SimdVec<FP64,1> t57{ di0[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t31;
                SimdVec<FP64,1> t61 = t30 + t60;
                SimdVec<FP64,2> t62{ t30[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t65[ 0 ], t68[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t39;
                px6 = t35;
                py0 = t62;
                py2 = t47;
                py4 = t23;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_87: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [3,4] 4 5 6
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,1> t7{ pi2[ 1 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t11{ pi0[ 0 ] };
                SimdVec<U64,2> t12{ t11[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,1> t16{ py4[ 1 ] };
                SimdVec<FP64,2> t17{ t16[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 1 ] };
                SimdVec<FP64,1> t21 = t18 - t20;
                SimdVec<FP64,1> t23{ py0[ 1 ] };
                SimdVec<FP64,1> t24{ py0[ 0 ] };
                SimdVec<FP64,1> t25 = t23 - t24;
                SimdVec<FP64,1> t27{ px6[ 0 ] };
                SimdVec<FP64,1> t29{ di4[ 0 ] };
                SimdVec<FP64,1> t31{ di2[ 1 ] };
                SimdVec<FP64,1> t32 = t31 - t29;
                SimdVec<FP64,1> t33 = t31 / t32;
                SimdVec<FP64,1> t34 = t33 * t21;
                SimdVec<FP64,1> t35 = t20 + t34;
                SimdVec<FP64,2> t36{ t35[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 1 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 1 ] };
                SimdVec<FP64,1> t43 = t40 - t42;
                SimdVec<FP64,1> t44 = t43 * t33;
                SimdVec<FP64,1> t45 = t42 + t44;
                SimdVec<FP64,2> t46{ t45[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t48{ di0[ 1 ] };
                SimdVec<FP64,1> t49{ di0[ 0 ] };
                SimdVec<FP64,1> t50 = t49 - t48;
                SimdVec<FP64,1> t51 = t49 / t50;
                SimdVec<FP64,1> t52 = t51 * t25;
                SimdVec<FP64,1> t53 = t24 + t52;
                SimdVec<FP64,2> t54{ t24[ 0 ], t53[ 0 ] };
                SimdVec<FP64,1> t56{ px0[ 1 ] };
                SimdVec<FP64,1> t57{ px0[ 0 ] };
                SimdVec<FP64,1> t58 = t56 - t57;
                SimdVec<FP64,1> t59 = t58 * t51;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t57[ 0 ], t60[ 0 ] };
                px0 = t61;
                px2 = t46;
                px4 = t39;
                py0 = t54;
                py2 = t36;
                py4 = t17;
                pi0 = t12;
                pi2 = t8;
                pi4 = t4;
                continue;
            }
            case_88: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [4,5] 5 6
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t26{ px6[ 0 ] };
                SimdVec<FP64,2> t27;
                t27[ 0 ] = t26[ 0 ];
                SimdVec<FP64,1> t29{ di4[ 1 ] };
                SimdVec<FP64,1> t30{ di4[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t29;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t19;
                SimdVec<FP64,1> t34 = t18 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,1> t39 = t37 - t38;
                SimdVec<FP64,1> t40 = t39 * t32;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t22[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t53[ 0 ], t56[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t27;
                py0 = t50;
                py2 = t35;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_89: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [5,6] 6
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 0 ] };
                SimdVec<U64,1> t3{ pi4[ 1 ] };
                SimdVec<U64,2> t4{ t3[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t7{ pi0[ 0 ] };
                SimdVec<U64,2> t8{ t7[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py6[ 0 ] };
                SimdVec<FP64,1> t12{ py4[ 1 ] };
                SimdVec<FP64,1> t13 = t10 - t12;
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16{ py0[ 0 ] };
                SimdVec<FP64,1> t17 = t15 - t16;
                SimdVec<FP64,1> t19{ di6[ 0 ] };
                SimdVec<FP64,1> t21{ di4[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t19;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t13;
                SimdVec<FP64,1> t25 = t12 + t24;
                SimdVec<FP64,2> t26{ t25[ 0 ], t10[ 0 ] };
                SimdVec<FP64,1> t28{ px6[ 0 ] };
                SimdVec<FP64,1> t30{ px4[ 1 ] };
                SimdVec<FP64,1> t31 = t28 - t30;
                SimdVec<FP64,1> t32 = t31 * t23;
                SimdVec<FP64,1> t33 = t30 + t32;
                SimdVec<FP64,2> t34{ t33[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t36{ di0[ 1 ] };
                SimdVec<FP64,1> t37{ di0[ 0 ] };
                SimdVec<FP64,1> t38 = t37 - t36;
                SimdVec<FP64,1> t39 = t37 / t38;
                SimdVec<FP64,1> t40 = t39 * t17;
                SimdVec<FP64,1> t41 = t16 + t40;
                SimdVec<FP64,2> t42{ t16[ 0 ], t41[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45{ px0[ 0 ] };
                SimdVec<FP64,1> t46 = t44 - t45;
                SimdVec<FP64,1> t47 = t46 * t39;
                SimdVec<FP64,1> t48 = t45 + t47;
                SimdVec<FP64,2> t49{ t45[ 0 ], t48[ 0 ] };
                px0 = t49;
                px2 = t34;
                py0 = t42;
                py2 = t26;
                pi0 = t8;
                pi2 = t4;
                continue;
            }
            case_90: {
                // old_nb_nodes: 7 nodes: 0 [0,1] [6,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py6[ 0 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di6[ 0 ] };
                SimdVec<FP64,1> t20{ px6[ 0 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_91: {
                // old_nb_nodes: 7 nodes: [0,1] 1 2 3 4 5 6 [6,0]
                nodes_size = 8;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,1> t20{ py4[ 0 ] };
                SimdVec<FP64,2> t21{ t20[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,1> t24{ py2[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t27{ py0[ 1 ] };
                SimdVec<FP64,1> t28{ py0[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t17;
                SimdVec<FP64,1> t30 = t27 - t28;
                SimdVec<FP64,1> t32{ di6[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,1> t37{ px4[ 0 ] };
                SimdVec<FP64,2> t38{ t37[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t32 - t45;
                SimdVec<FP64,1> t47 = t32 / t46;
                SimdVec<FP64,1> t48 = t47 * t29;
                SimdVec<FP64,1> t49 = t17 + t48;
                SimdVec<FP64,2> t50{ t17[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t51 = t45 - t44;
                SimdVec<FP64,1> t52 = t45 / t51;
                SimdVec<FP64,1> t53 = t52 * t30;
                SimdVec<FP64,1> t54 = t28 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58{ px0[ 0 ] };
                SimdVec<FP64,1> t59 = t58 - t34;
                SimdVec<FP64,1> t60 = t59 * t47;
                SimdVec<FP64,1> t61 = t34 + t60;
                SimdVec<FP64,2> t62{ t34[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t63 = t57 - t58;
                SimdVec<FP64,1> t64 = t63 * t52;
                SimdVec<FP64,1> t65 = t58 + t64;
                SimdVec<FP64,2> t66{ t65[ 0 ], t57[ 0 ] };
                px0 = t66;
                px2 = t42;
                px4 = t38;
                px6 = t62;
                py0 = t55;
                py2 = t25;
                py4 = t21;
                py6 = t50;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_92: {
                // old_nb_nodes: 7 nodes: [0,1] 1 2 3 4 5 [5,6]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t28 - t29;
                SimdVec<FP64,1> t33{ di6[ 0 ] };
                SimdVec<FP64,1> t35{ di4[ 1 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t44{ px4[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t37;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48;
                t48[ 0 ] = t47[ 0 ];
                SimdVec<FP64,1> t49{ px4[ 0 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 1 ] };
                SimdVec<FP64,1> t57{ di0[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t30;
                SimdVec<FP64,1> t61 = t29 + t60;
                SimdVec<FP64,2> t62{ t61[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t68[ 0 ], t64[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t50;
                px6 = t48;
                py0 = t62;
                py2 = t26;
                py4 = t22;
                py6 = t40;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t2;
                continue;
            }
            case_93: {
                // old_nb_nodes: 7 nodes: [0,1] 1 2 3 4 [4,5]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ di4[ 1 ] };
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t14[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t34[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t38;
                py0 = t50;
                py2 = t19;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_94: {
                // old_nb_nodes: 7 nodes: [0,1] 1 2 3 [3,4]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di4[ 0 ] };
                SimdVec<FP64,1> t27{ di2[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t36{ px2[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_95: {
                // old_nb_nodes: 7 nodes: [0,1] 1 2 [2,3]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_96: {
                // old_nb_nodes: 7 nodes: [0,1] 1 [1,2]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_97: {
                // old_nb_nodes: 7 nodes: [1,2] 2 3 4 5 6 [6,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 1 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,2> t21{ t20[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t18;
                SimdVec<FP64,1> t30{ py0[ 1 ] };
                SimdVec<FP64,1> t31 = t26 - t30;
                SimdVec<FP64,1> t34{ di6[ 0 ] };
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 1 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 0 ] };
                SimdVec<FP64,1> t42{ di2[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 0 ] };
                SimdVec<FP64,1> t45 = t34 - t44;
                SimdVec<FP64,1> t46 = t34 / t45;
                SimdVec<FP64,1> t47 = t46 * t29;
                SimdVec<FP64,1> t48 = t18 + t47;
                SimdVec<FP64,2> t49;
                t49[ 0 ] = t48[ 0 ];
                SimdVec<FP64,1> t50{ di0[ 1 ] };
                SimdVec<FP64,1> t51 = t50 - t42;
                SimdVec<FP64,1> t52 = t50 / t51;
                SimdVec<FP64,1> t53 = t52 * t31;
                SimdVec<FP64,1> t54 = t30 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t57{ px2[ 1 ] };
                SimdVec<FP64,2> t58{ t57[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t59{ px2[ 0 ] };
                SimdVec<FP64,1> t61{ px0[ 0 ] };
                SimdVec<FP64,1> t62 = t61 - t36;
                SimdVec<FP64,1> t63 = t62 * t46;
                SimdVec<FP64,1> t64 = t36 + t63;
                SimdVec<FP64,2> t65;
                t65[ 0 ] = t64[ 0 ];
                SimdVec<FP64,1> t66{ px0[ 1 ] };
                SimdVec<FP64,1> t67 = t59 - t66;
                SimdVec<FP64,1> t68 = t67 * t52;
                SimdVec<FP64,1> t69 = t66 + t68;
                SimdVec<FP64,2> t70{ t69[ 0 ], t59[ 0 ] };
                px0 = t70;
                px2 = t58;
                px4 = t39;
                px6 = t65;
                py0 = t55;
                py2 = t25;
                py4 = t21;
                py6 = t49;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t2;
                continue;
            }
            case_98: {
                // old_nb_nodes: 7 nodes: [1,2] 2 3 4 5 [5,6]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,1> t19{ py2[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 0 ] };
                SimdVec<FP64,1> t23{ py0[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ di6[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t16;
                SimdVec<FP64,1> t32 = t15 + t31;
                SimdVec<FP64,2> t33{ t15[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38 = t35 - t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 0 ] };
                SimdVec<FP64,1> t46{ di0[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t24;
                SimdVec<FP64,1> t50 = t23 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t55{ px2[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58 = t55 - t57;
                SimdVec<FP64,1> t59 = t58 * t48;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t54;
                px4 = t41;
                py0 = t51;
                py2 = t20;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_99: {
                // old_nb_nodes: 7 nodes: [1,2] 2 3 4 [4,5]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ py2[ 1 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t26{ di4[ 1 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t36 = t34 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t41{ di2[ 0 ] };
                SimdVec<FP64,1> t43{ di0[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t41;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t23;
                SimdVec<FP64,1> t47 = t22 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t50{ px2[ 1 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t52 - t54;
                SimdVec<FP64,1> t56 = t55 * t45;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t51;
                px4 = t39;
                py0 = t48;
                py2 = t19;
                py4 = t32;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_100: {
                // old_nb_nodes: 7 nodes: [1,2] 2 3 [3,4]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t20{ px4[ 0 ] };
                SimdVec<FP64,1> t22{ di2[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 0 ] };
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_101: {
                // old_nb_nodes: 7 nodes: [1,2] 2 [2,3]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_102: {
                // old_nb_nodes: 7 nodes: [2,3] 3 4 5 6 [6,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t15{ py6[ 0 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ py4[ 1 ] };
                SimdVec<FP64,1> t19{ py4[ 0 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t22{ py2[ 1 ] };
                SimdVec<FP64,1> t23{ py2[ 0 ] };
                SimdVec<FP64,1> t24 = t22 - t23;
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t16;
                SimdVec<FP64,1> t32 = t15 + t31;
                SimdVec<FP64,2> t33{ t15[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 0 ] };
                SimdVec<FP64,1> t38 = t35 - t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t43{ px4[ 1 ] };
                SimdVec<FP64,1> t44{ px4[ 0 ] };
                SimdVec<FP64,2> t45{ t44[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t47{ di2[ 1 ] };
                SimdVec<FP64,1> t48{ di2[ 0 ] };
                SimdVec<FP64,1> t49 = t48 - t47;
                SimdVec<FP64,1> t50 = t48 / t49;
                SimdVec<FP64,1> t51 = t50 * t24;
                SimdVec<FP64,1> t52 = t23 + t51;
                SimdVec<FP64,2> t53{ t52[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t55{ px2[ 1 ] };
                SimdVec<FP64,1> t56{ px2[ 0 ] };
                SimdVec<FP64,1> t57 = t55 - t56;
                SimdVec<FP64,1> t58 = t57 * t50;
                SimdVec<FP64,1> t59 = t56 + t58;
                SimdVec<FP64,2> t60{ t59[ 0 ], t55[ 0 ] };
                px0 = t60;
                px2 = t45;
                px4 = t41;
                py0 = t53;
                py2 = t20;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_103: {
                // old_nb_nodes: 7 nodes: [2,3] 3 4 5 [5,6]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 1 ] };
                SimdVec<FP64,1> t21{ py2[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di6[ 0 ] };
                SimdVec<FP64,1> t27{ di4[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45{ di2[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_104: {
                // old_nb_nodes: 7 nodes: [2,3] 3 4 [4,5]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 1 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,1> t14{ py2[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di4[ 1 ] };
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px4[ 1 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di2[ 1 ] };
                SimdVec<FP64,1> t33{ di2[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_105: {
                // old_nb_nodes: 7 nodes: [2,3] 3 [3,4]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di4[ 0 ] };
                SimdVec<FP64,1> t19{ px4[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di2[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px2[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_106: {
                // old_nb_nodes: 7 nodes: [3,4] 4 5 6 [6,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t16{ py6[ 0 ] };
                SimdVec<FP64,1> t17 = t14 - t16;
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t16[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t29{ di6[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t27;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t17;
                SimdVec<FP64,1> t33 = t16 + t32;
                SimdVec<FP64,2> t34;
                t34[ 0 ] = t33[ 0 ];
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t38{ px6[ 0 ] };
                SimdVec<FP64,1> t39 = t36 - t38;
                SimdVec<FP64,1> t40 = t39 * t31;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42;
                t42[ 0 ] = t41[ 0 ];
                SimdVec<FP64,1> t44{ di4[ 0 ] };
                SimdVec<FP64,1> t46{ di2[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t24;
                SimdVec<FP64,1> t50 = t23 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t53{ px4[ 1 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t55{ px4[ 0 ] };
                SimdVec<FP64,1> t57{ px2[ 1 ] };
                SimdVec<FP64,1> t58 = t55 - t57;
                SimdVec<FP64,1> t59 = t58 * t48;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t54;
                px4 = t42;
                py0 = t51;
                py2 = t20;
                py4 = t34;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_107: {
                // old_nb_nodes: 7 nodes: [3,4] 4 5 [5,6]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di6[ 0 ] };
                SimdVec<FP64,1> t20{ px6[ 0 ] };
                SimdVec<FP64,1> t22{ di4[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 0 ] };
                SimdVec<FP64,1> t30{ di2[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ px2[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_108: {
                // old_nb_nodes: 7 nodes: [3,4] 4 [4,5]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 1 ] };
                SimdVec<FP64,1> t11{ py4[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py2[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di4[ 1 ] };
                SimdVec<FP64,1> t19{ di4[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di2[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_109: {
                // old_nb_nodes: 7 nodes: [4,5] 5 6 [6,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py6[ 0 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ di0[ 0 ] };
                SimdVec<FP64,1> t20{ di6[ 0 ] };
                SimdVec<FP64,1> t21 = t20 - t18;
                SimdVec<FP64,1> t22 = t20 / t21;
                SimdVec<FP64,1> t23 = t22 * t12;
                SimdVec<FP64,1> t24 = t11 + t23;
                SimdVec<FP64,2> t25{ t11[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t27{ px0[ 0 ] };
                SimdVec<FP64,1> t29{ px6[ 0 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t29 + t31;
                SimdVec<FP64,2> t33{ t29[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ di4[ 1 ] };
                SimdVec<FP64,1> t36{ di4[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t35;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t16;
                SimdVec<FP64,1> t40 = t15 + t39;
                SimdVec<FP64,2> t41{ t40[ 0 ], t14[ 0 ] };
                SimdVec<FP64,1> t43{ px4[ 1 ] };
                SimdVec<FP64,1> t44{ px4[ 0 ] };
                SimdVec<FP64,1> t45 = t43 - t44;
                SimdVec<FP64,1> t46 = t45 * t38;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t43[ 0 ] };
                px0 = t48;
                px2 = t33;
                py0 = t41;
                py2 = t25;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_110: {
                // old_nb_nodes: 7 nodes: [4,5] 5 [5,6]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di6[ 0 ] };
                SimdVec<FP64,1> t19{ px6[ 0 ] };
                SimdVec<FP64,1> t21{ di4[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px4[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_111: {
                // old_nb_nodes: 7 nodes: [5,6] 6 [6,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py0[ 0 ] };
                SimdVec<FP64,1> t12{ py6[ 0 ] };
                SimdVec<FP64,1> t13 = t10 - t12;
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t12 - t15;
                SimdVec<FP64,1> t19{ di0[ 0 ] };
                SimdVec<FP64,1> t21{ px0[ 0 ] };
                SimdVec<FP64,1> t23{ di6[ 0 ] };
                SimdVec<FP64,1> t24 = t23 - t19;
                SimdVec<FP64,1> t25 = t23 / t24;
                SimdVec<FP64,1> t26 = t25 * t13;
                SimdVec<FP64,1> t27 = t12 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t30{ di4[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 0 ] };
                SimdVec<FP64,1> t38 = t21 - t37;
                SimdVec<FP64,1> t39 = t38 * t25;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41;
                t41[ 0 ] = t40[ 0 ];
                SimdVec<FP64,1> t43{ px4[ 1 ] };
                SimdVec<FP64,1> t44 = t37 - t43;
                SimdVec<FP64,1> t45 = t44 * t32;
                SimdVec<FP64,1> t46 = t43 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t37[ 0 ] };
                px0 = t47;
                px2 = t41;
                py0 = t35;
                py2 = t28;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_112: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 5 6 [6,7] [7,0]
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,1> t3{ t2[ 0 ] };
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,2> t5{ t4[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 1 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 1 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ py6[ 0 ] };
                SimdVec<FP64,1> t21 = t19 - t20;
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,1> t24{ py4[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t27{ py2[ 1 ] };
                SimdVec<FP64,1> t28{ py2[ 0 ] };
                SimdVec<FP64,2> t29{ t28[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t31{ py0[ 1 ] };
                SimdVec<FP64,1> t32{ py0[ 0 ] };
                SimdVec<FP64,1> t33 = t32 - t19;
                SimdVec<FP64,2> t34{ t32[ 0 ], t31[ 0 ] };
                SimdVec<FP64,1> t36{ di0[ 0 ] };
                SimdVec<FP64,1> t38{ di6[ 1 ] };
                SimdVec<FP64,1> t39 = t38 - t36;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t33;
                SimdVec<FP64,1> t42 = t19 + t41;
                SimdVec<FP64,1> t43{ t42[ 0 ] };
                SimdVec<FP64,1> t44{ di6[ 0 ] };
                SimdVec<FP64,1> t45 = t44 - t38;
                SimdVec<FP64,1> t46 = t44 / t45;
                SimdVec<FP64,1> t47 = t46 * t21;
                SimdVec<FP64,1> t48 = t20 + t47;
                SimdVec<FP64,2> t49{ t20[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t51{ px6[ 1 ] };
                SimdVec<FP64,1> t52{ px6[ 0 ] };
                SimdVec<FP64,1> t53 = t51 - t52;
                SimdVec<FP64,1> t54 = t53 * t46;
                SimdVec<FP64,1> t55 = t52 + t54;
                SimdVec<FP64,2> t56{ t52[ 0 ], t55[ 0 ] };
                SimdVec<FP64,1> t58{ px4[ 1 ] };
                SimdVec<FP64,1> t59{ px4[ 0 ] };
                SimdVec<FP64,2> t60{ t59[ 0 ], t58[ 0 ] };
                SimdVec<FP64,1> t62{ px2[ 1 ] };
                SimdVec<FP64,1> t63{ px2[ 0 ] };
                SimdVec<FP64,2> t64{ t63[ 0 ], t62[ 0 ] };
                SimdVec<FP64,1> t66{ px0[ 1 ] };
                SimdVec<FP64,1> t67{ px0[ 0 ] };
                SimdVec<FP64,1> t68 = t67 - t51;
                SimdVec<FP64,1> t69 = t68 * t40;
                SimdVec<FP64,1> t70 = t51 + t69;
                SimdVec<FP64,1> t71{ t70[ 0 ] };
                SimdVec<FP64,2> t72{ t67[ 0 ], t66[ 0 ] };
                px0 = t72;
                px2 = t64;
                px4 = t60;
                px6 = t56;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t71;
                py0 = t34;
                py2 = t29;
                py4 = t25;
                py6 = t49;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t43;
                pi0 = t17;
                pi2 = t13;
                pi4 = t9;
                pi6 = t5;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t3;
                ++num_cut;
                goto store_and_break;
            }
            case_113: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 5 [5,6] [6,7] 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,2> t5{ snis[ num_cut ][ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 1 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 1 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t22 = t19 - t21;
                SimdVec<FP64,1> t24{ py4[ 1 ] };
                SimdVec<FP64,1> t25 = t21 - t24;
                SimdVec<FP64,1> t26{ py4[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t29{ py2[ 1 ] };
                SimdVec<FP64,1> t30{ py2[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t33{ py0[ 1 ] };
                SimdVec<FP64,1> t34{ py0[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ di6[ 1 ] };
                SimdVec<FP64,1> t38{ di6[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t22;
                SimdVec<FP64,1> t42 = t21 + t41;
                SimdVec<FP64,1> t44{ di4[ 1 ] };
                SimdVec<FP64,1> t45 = t44 - t38;
                SimdVec<FP64,1> t46 = t44 / t45;
                SimdVec<FP64,1> t47 = t46 * t25;
                SimdVec<FP64,1> t48 = t24 + t47;
                SimdVec<FP64,2> t49{ t48[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t51{ px6[ 1 ] };
                SimdVec<FP64,1> t52{ t51[ 0 ] };
                SimdVec<FP64,1> t53{ px6[ 0 ] };
                SimdVec<FP64,1> t54 = t51 - t53;
                SimdVec<FP64,1> t55 = t54 * t40;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,1> t58{ px4[ 1 ] };
                SimdVec<FP64,1> t59 = t53 - t58;
                SimdVec<FP64,1> t60 = t59 * t46;
                SimdVec<FP64,1> t61 = t58 + t60;
                SimdVec<FP64,2> t62{ t61[ 0 ], t56[ 0 ] };
                SimdVec<FP64,1> t63{ px4[ 0 ] };
                SimdVec<FP64,2> t64{ t63[ 0 ], t58[ 0 ] };
                SimdVec<FP64,1> t66{ px2[ 1 ] };
                SimdVec<FP64,1> t67{ px2[ 0 ] };
                SimdVec<FP64,2> t68{ t67[ 0 ], t66[ 0 ] };
                SimdVec<FP64,1> t70{ px0[ 1 ] };
                SimdVec<FP64,1> t71{ px0[ 0 ] };
                SimdVec<FP64,2> t72{ t71[ 0 ], t70[ 0 ] };
                px0 = t72;
                px2 = t68;
                px4 = t64;
                px6 = t62;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t52;
                py0 = t35;
                py2 = t31;
                py4 = t27;
                py6 = t49;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t13;
                pi4 = t9;
                pi6 = t5;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_114: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 5 [5,6] [7,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,1> t21 = t18 - t20;
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t17;
                SimdVec<FP64,2> t32{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t34{ di0[ 0 ] };
                SimdVec<FP64,1> t36{ di6[ 1 ] };
                SimdVec<FP64,1> t37 = t36 - t34;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t31;
                SimdVec<FP64,1> t40 = t17 + t39;
                SimdVec<FP64,1> t41{ di6[ 0 ] };
                SimdVec<FP64,1> t43{ di4[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t41;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t21;
                SimdVec<FP64,1> t47 = t20 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t50{ px6[ 1 ] };
                SimdVec<FP64,1> t51{ px6[ 0 ] };
                SimdVec<FP64,1> t53{ px4[ 1 ] };
                SimdVec<FP64,1> t54 = t51 - t53;
                SimdVec<FP64,1> t55 = t54 * t45;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,1> t57{ px4[ 0 ] };
                SimdVec<FP64,2> t58{ t57[ 0 ], t53[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,2> t62{ t61[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t65 - t50;
                SimdVec<FP64,1> t67 = t66 * t38;
                SimdVec<FP64,1> t68 = t50 + t67;
                SimdVec<FP64,2> t69{ t56[ 0 ], t68[ 0 ] };
                SimdVec<FP64,2> t70{ t65[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t62;
                px4 = t58;
                px6 = t69;
                py0 = t32;
                py2 = t27;
                py4 = t23;
                py6 = t48;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_115: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 [4,5] [5,6] 6 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 1 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t28{ py2[ 1 ] };
                SimdVec<FP64,1> t29{ py2[ 0 ] };
                SimdVec<FP64,2> t30{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t32{ py0[ 1 ] };
                SimdVec<FP64,1> t33{ py0[ 0 ] };
                SimdVec<FP64,2> t34{ t33[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t36{ di6[ 0 ] };
                SimdVec<FP64,1> t38{ px6[ 1 ] };
                SimdVec<FP64,1> t39{ t38[ 0 ] };
                SimdVec<FP64,1> t40{ px6[ 0 ] };
                SimdVec<FP64,1> t42{ di4[ 1 ] };
                SimdVec<FP64,1> t43 = t42 - t36;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t24;
                SimdVec<FP64,1> t46 = t23 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t48{ di4[ 0 ] };
                SimdVec<FP64,1> t49 = t48 - t42;
                SimdVec<FP64,1> t50 = t48 / t49;
                SimdVec<FP64,1> t51 = t50 * t26;
                SimdVec<FP64,1> t52 = t25 + t51;
                SimdVec<FP64,2> t53{ t25[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t55{ px4[ 1 ] };
                SimdVec<FP64,1> t56 = t40 - t55;
                SimdVec<FP64,1> t57 = t56 * t44;
                SimdVec<FP64,1> t58 = t55 + t57;
                SimdVec<FP64,2> t59{ t58[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t60{ px4[ 0 ] };
                SimdVec<FP64,1> t61 = t55 - t60;
                SimdVec<FP64,1> t62 = t61 * t50;
                SimdVec<FP64,1> t63 = t60 + t62;
                SimdVec<FP64,2> t64{ t60[ 0 ], t63[ 0 ] };
                SimdVec<FP64,1> t66{ px2[ 1 ] };
                SimdVec<FP64,1> t67{ px2[ 0 ] };
                SimdVec<FP64,2> t68{ t67[ 0 ], t66[ 0 ] };
                SimdVec<FP64,1> t70{ px0[ 1 ] };
                SimdVec<FP64,1> t71{ px0[ 0 ] };
                SimdVec<FP64,2> t72{ t71[ 0 ], t70[ 0 ] };
                px0 = t72;
                px2 = t68;
                px4 = t64;
                px6 = t59;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t39;
                py0 = t34;
                py2 = t30;
                py4 = t53;
                py6 = t47;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t13;
                pi4 = t9;
                pi6 = t7;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_116: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 [4,5] [6,7] 7
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t33{ di6[ 1 ] };
                SimdVec<FP64,1> t34{ di6[ 0 ] };
                SimdVec<FP64,1> t35 = t34 - t33;
                SimdVec<FP64,1> t36 = t34 / t35;
                SimdVec<FP64,1> t37 = t36 * t19;
                SimdVec<FP64,1> t38 = t18 + t37;
                SimdVec<FP64,2> t39{ t38[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t41{ px6[ 1 ] };
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t43 = t41 - t42;
                SimdVec<FP64,1> t44 = t43 * t36;
                SimdVec<FP64,1> t45 = t42 + t44;
                SimdVec<FP64,2> t46{ t45[ 0 ], t41[ 0 ] };
                SimdVec<FP64,1> t48{ di4[ 1 ] };
                SimdVec<FP64,1> t49{ di4[ 0 ] };
                SimdVec<FP64,1> t50 = t49 - t48;
                SimdVec<FP64,1> t51 = t49 / t50;
                SimdVec<FP64,1> t52 = t51 * t23;
                SimdVec<FP64,1> t53 = t22 + t52;
                SimdVec<FP64,2> t54{ t22[ 0 ], t53[ 0 ] };
                SimdVec<FP64,1> t56{ px4[ 1 ] };
                SimdVec<FP64,1> t57{ px4[ 0 ] };
                SimdVec<FP64,1> t58 = t56 - t57;
                SimdVec<FP64,1> t59 = t58 * t51;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t57[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t63{ px2[ 1 ] };
                SimdVec<FP64,1> t64{ px2[ 0 ] };
                SimdVec<FP64,2> t65{ t64[ 0 ], t63[ 0 ] };
                SimdVec<FP64,1> t67{ px0[ 1 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,2> t69{ t68[ 0 ], t67[ 0 ] };
                px0 = t69;
                px2 = t65;
                px4 = t61;
                px6 = t46;
                py0 = t31;
                py2 = t27;
                py4 = t54;
                py6 = t39;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_117: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 4 [4,5] [7,0]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t29 - t18;
                SimdVec<FP64,2> t31{ t29[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t34{ di0[ 0 ] };
                SimdVec<FP64,1> t36{ di6[ 1 ] };
                SimdVec<FP64,1> t37 = t36 - t34;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t18 + t39;
                SimdVec<FP64,2> t41;
                t41[ 0 ] = t40[ 0 ];
                SimdVec<FP64,1> t43{ px6[ 1 ] };
                SimdVec<FP64,1> t45{ di4[ 1 ] };
                SimdVec<FP64,1> t46{ di4[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t45;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t22;
                SimdVec<FP64,1> t50 = t21 + t49;
                SimdVec<FP64,2> t51{ t21[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px4[ 1 ] };
                SimdVec<FP64,1> t54{ px4[ 0 ] };
                SimdVec<FP64,1> t55 = t53 - t54;
                SimdVec<FP64,1> t56 = t55 * t48;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t54[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,2> t62{ t61[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t65 - t43;
                SimdVec<FP64,1> t67 = t66 * t38;
                SimdVec<FP64,1> t68 = t43 + t67;
                SimdVec<FP64,2> t69;
                t69[ 0 ] = t68[ 0 ];
                SimdVec<FP64,2> t70{ t65[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t62;
                px4 = t58;
                px6 = t69;
                py0 = t31;
                py2 = t26;
                py4 = t51;
                py6 = t41;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_118: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 [3,4] [4,5] 5 6 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 0 ] };
                SimdVec<U64,2> t9{ snis[ num_cut ][ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 1 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t28{ py2[ 1 ] };
                SimdVec<FP64,1> t29 = t25 - t28;
                SimdVec<FP64,1> t30{ py2[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t33{ py0[ 1 ] };
                SimdVec<FP64,1> t34{ py0[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 1 ] };
                SimdVec<FP64,1> t38{ t37[ 0 ] };
                SimdVec<FP64,1> t39{ px6[ 0 ] };
                SimdVec<FP64,1> t41{ di4[ 1 ] };
                SimdVec<FP64,1> t42{ di4[ 0 ] };
                SimdVec<FP64,1> t43 = t42 - t41;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t26;
                SimdVec<FP64,1> t46 = t25 + t45;
                SimdVec<FP64,1> t48{ di2[ 1 ] };
                SimdVec<FP64,1> t49 = t48 - t42;
                SimdVec<FP64,1> t50 = t48 / t49;
                SimdVec<FP64,1> t51 = t50 * t29;
                SimdVec<FP64,1> t52 = t28 + t51;
                SimdVec<FP64,2> t53{ t52[ 0 ], t46[ 0 ] };
                SimdVec<FP64,1> t55{ px4[ 1 ] };
                SimdVec<FP64,2> t56{ t55[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t57{ px4[ 0 ] };
                SimdVec<FP64,1> t58 = t55 - t57;
                SimdVec<FP64,1> t59 = t58 * t44;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,1> t62{ px2[ 1 ] };
                SimdVec<FP64,1> t63 = t57 - t62;
                SimdVec<FP64,1> t64 = t63 * t50;
                SimdVec<FP64,1> t65 = t62 + t64;
                SimdVec<FP64,2> t66{ t65[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t67{ px2[ 0 ] };
                SimdVec<FP64,2> t68{ t67[ 0 ], t62[ 0 ] };
                SimdVec<FP64,1> t70{ px0[ 1 ] };
                SimdVec<FP64,1> t71{ px0[ 0 ] };
                SimdVec<FP64,2> t72{ t71[ 0 ], t70[ 0 ] };
                px0 = t72;
                px2 = t68;
                px4 = t66;
                px6 = t56;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t38;
                py0 = t35;
                py2 = t31;
                py4 = t53;
                py6 = t24;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t13;
                pi4 = t9;
                pi6 = t6;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_119: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 [3,4] [5,6] 6 7
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22 = t18 - t21;
                SimdVec<FP64,1> t23{ py4[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26 = t23 - t25;
                SimdVec<FP64,1> t27{ py2[ 0 ] };
                SimdVec<FP64,2> t28{ t27[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t30{ py0[ 1 ] };
                SimdVec<FP64,1> t31{ py0[ 0 ] };
                SimdVec<FP64,2> t32{ t31[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t34{ di6[ 0 ] };
                SimdVec<FP64,1> t36{ px6[ 1 ] };
                SimdVec<FP64,1> t37{ px6[ 0 ] };
                SimdVec<FP64,2> t38{ t37[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t40{ di4[ 1 ] };
                SimdVec<FP64,1> t41 = t40 - t34;
                SimdVec<FP64,1> t42 = t40 / t41;
                SimdVec<FP64,1> t43 = t42 * t22;
                SimdVec<FP64,1> t44 = t21 + t43;
                SimdVec<FP64,1> t45{ di4[ 0 ] };
                SimdVec<FP64,1> t47{ di2[ 1 ] };
                SimdVec<FP64,1> t48 = t47 - t45;
                SimdVec<FP64,1> t49 = t47 / t48;
                SimdVec<FP64,1> t50 = t49 * t26;
                SimdVec<FP64,1> t51 = t25 + t50;
                SimdVec<FP64,2> t52{ t51[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t54{ px4[ 1 ] };
                SimdVec<FP64,1> t55 = t37 - t54;
                SimdVec<FP64,1> t56 = t55 * t42;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,1> t58{ px4[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61 = t58 - t60;
                SimdVec<FP64,1> t62 = t61 * t49;
                SimdVec<FP64,1> t63 = t60 + t62;
                SimdVec<FP64,2> t64{ t63[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t65{ px2[ 0 ] };
                SimdVec<FP64,2> t66{ t65[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t68{ px0[ 1 ] };
                SimdVec<FP64,1> t69{ px0[ 0 ] };
                SimdVec<FP64,2> t70{ t69[ 0 ], t68[ 0 ] };
                px0 = t70;
                px2 = t66;
                px4 = t64;
                px6 = t38;
                py0 = t32;
                py2 = t28;
                py4 = t52;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_120: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 [3,4] [6,7] 7
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,2> t6{ snis[ num_cut ][ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py6[ 0 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25 = t22 - t24;
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t34{ di6[ 1 ] };
                SimdVec<FP64,1> t35{ di6[ 0 ] };
                SimdVec<FP64,1> t36 = t35 - t34;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,1> t41{ px6[ 1 ] };
                SimdVec<FP64,2> t42;
                t42[ 0 ] = t41[ 0 ];
                SimdVec<FP64,1> t43{ px6[ 0 ] };
                SimdVec<FP64,1> t44 = t41 - t43;
                SimdVec<FP64,1> t45 = t44 * t37;
                SimdVec<FP64,1> t46 = t43 + t45;
                SimdVec<FP64,1> t48{ di4[ 0 ] };
                SimdVec<FP64,1> t50{ di2[ 1 ] };
                SimdVec<FP64,1> t51 = t50 - t48;
                SimdVec<FP64,1> t52 = t50 / t51;
                SimdVec<FP64,1> t53 = t52 * t25;
                SimdVec<FP64,1> t54 = t24 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t57{ px4[ 0 ] };
                SimdVec<FP64,1> t59{ px2[ 1 ] };
                SimdVec<FP64,1> t60 = t57 - t59;
                SimdVec<FP64,1> t61 = t60 * t52;
                SimdVec<FP64,1> t62 = t59 + t61;
                SimdVec<FP64,2> t63{ t62[ 0 ], t46[ 0 ] };
                SimdVec<FP64,1> t64{ px2[ 0 ] };
                SimdVec<FP64,2> t65{ t64[ 0 ], t59[ 0 ] };
                SimdVec<FP64,1> t67{ px0[ 1 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,2> t69{ t68[ 0 ], t67[ 0 ] };
                px0 = t69;
                px2 = t65;
                px4 = t63;
                px6 = t42;
                py0 = t31;
                py2 = t27;
                py4 = t55;
                py6 = t18;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t3;
                continue;
            }
            case_121: {
                // old_nb_nodes: 8 nodes: 0 1 2 3 [3,4] [7,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18 = t15 - t17;
                SimdVec<FP64,1> t19{ py2[ 0 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23{ py0[ 0 ] };
                SimdVec<FP64,1> t24 = t23 - t13;
                SimdVec<FP64,2> t25{ t23[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t29{ di6[ 1 ] };
                SimdVec<FP64,1> t30 = t29 - t27;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t24;
                SimdVec<FP64,1> t33 = t13 + t32;
                SimdVec<FP64,1> t35{ px6[ 1 ] };
                SimdVec<FP64,1> t37{ di4[ 0 ] };
                SimdVec<FP64,1> t39{ di2[ 1 ] };
                SimdVec<FP64,1> t40 = t39 - t37;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t18;
                SimdVec<FP64,1> t43 = t17 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t46{ px4[ 0 ] };
                SimdVec<FP64,1> t48{ px2[ 1 ] };
                SimdVec<FP64,1> t49 = t46 - t48;
                SimdVec<FP64,1> t50 = t49 * t41;
                SimdVec<FP64,1> t51 = t48 + t50;
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,2> t53{ t52[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,1> t57 = t56 - t35;
                SimdVec<FP64,1> t58 = t57 * t31;
                SimdVec<FP64,1> t59 = t35 + t58;
                SimdVec<FP64,2> t60{ t51[ 0 ], t59[ 0 ] };
                SimdVec<FP64,2> t61{ t56[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t53;
                px4 = t60;
                py0 = t25;
                py2 = t20;
                py4 = t44;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_122: {
                // old_nb_nodes: 8 nodes: 0 1 2 [2,3] [3,4] 4 5 6 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,1> t27{ py2[ 1 ] };
                SimdVec<FP64,1> t28 = t25 - t27;
                SimdVec<FP64,1> t29{ py2[ 0 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t32{ py0[ 1 ] };
                SimdVec<FP64,1> t33{ py0[ 0 ] };
                SimdVec<FP64,2> t34{ t33[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t36{ px6[ 1 ] };
                SimdVec<FP64,1> t37{ t36[ 0 ] };
                SimdVec<FP64,1> t38{ px6[ 0 ] };
                SimdVec<FP64,1> t40{ di4[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 1 ] };
                SimdVec<FP64,2> t43{ t42[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t44{ px4[ 0 ] };
                SimdVec<FP64,1> t46{ di2[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t40;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t28;
                SimdVec<FP64,1> t50 = t27 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t52{ di2[ 0 ] };
                SimdVec<FP64,1> t53 = t52 - t46;
                SimdVec<FP64,1> t54 = t52 / t53;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t29 + t55;
                SimdVec<FP64,2> t57{ t29[ 0 ], t56[ 0 ] };
                SimdVec<FP64,1> t59{ px2[ 1 ] };
                SimdVec<FP64,1> t60 = t44 - t59;
                SimdVec<FP64,1> t61 = t60 * t48;
                SimdVec<FP64,1> t62 = t59 + t61;
                SimdVec<FP64,2> t63{ t62[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t64{ px2[ 0 ] };
                SimdVec<FP64,1> t65 = t59 - t64;
                SimdVec<FP64,1> t66 = t65 * t54;
                SimdVec<FP64,1> t67 = t64 + t66;
                SimdVec<FP64,2> t68{ t64[ 0 ], t67[ 0 ] };
                SimdVec<FP64,1> t70{ px0[ 1 ] };
                SimdVec<FP64,1> t71{ px0[ 0 ] };
                SimdVec<FP64,2> t72{ t71[ 0 ], t70[ 0 ] };
                px0 = t72;
                px2 = t68;
                px4 = t63;
                px6 = t43;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t37;
                py0 = t34;
                py2 = t57;
                py4 = t51;
                py6 = t24;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t13;
                pi4 = t11;
                pi6 = t6;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_123: {
                // old_nb_nodes: 8 nodes: 0 1 2 [2,3] [4,5] 5 6 7
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ di4[ 1 ] };
                SimdVec<FP64,1> t38{ di4[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t23;
                SimdVec<FP64,1> t42 = t22 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t45{ px4[ 1 ] };
                SimdVec<FP64,1> t46{ px4[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t52{ di2[ 1 ] };
                SimdVec<FP64,1> t53{ di2[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t52;
                SimdVec<FP64,1> t55 = t53 / t54;
                SimdVec<FP64,1> t56 = t55 * t27;
                SimdVec<FP64,1> t57 = t26 + t56;
                SimdVec<FP64,2> t58{ t26[ 0 ], t57[ 0 ] };
                SimdVec<FP64,1> t60{ px2[ 1 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,1> t62 = t60 - t61;
                SimdVec<FP64,1> t63 = t62 * t55;
                SimdVec<FP64,1> t64 = t61 + t63;
                SimdVec<FP64,2> t65{ t61[ 0 ], t64[ 0 ] };
                SimdVec<FP64,1> t67{ px0[ 1 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,2> t69{ t68[ 0 ], t67[ 0 ] };
                px0 = t69;
                px2 = t65;
                px4 = t50;
                px6 = t35;
                py0 = t31;
                py2 = t58;
                py4 = t43;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_124: {
                // old_nb_nodes: 8 nodes: 0 1 2 [2,3] [5,6] 6 7
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 1 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t20{ py6[ 0 ] };
                SimdVec<FP64,1> t22{ py4[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t34{ di6[ 0 ] };
                SimdVec<FP64,1> t36{ di4[ 1 ] };
                SimdVec<FP64,1> t37 = t36 - t34;
                SimdVec<FP64,1> t38 = t36 / t37;
                SimdVec<FP64,1> t39 = t38 * t23;
                SimdVec<FP64,1> t40 = t22 + t39;
                SimdVec<FP64,2> t41{ t40[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t43{ px6[ 1 ] };
                SimdVec<FP64,2> t44;
                t44[ 0 ] = t43[ 0 ];
                SimdVec<FP64,1> t45{ px6[ 0 ] };
                SimdVec<FP64,1> t47{ px4[ 1 ] };
                SimdVec<FP64,1> t48 = t45 - t47;
                SimdVec<FP64,1> t49 = t48 * t38;
                SimdVec<FP64,1> t50 = t47 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t53{ di2[ 1 ] };
                SimdVec<FP64,1> t54{ di2[ 0 ] };
                SimdVec<FP64,1> t55 = t54 - t53;
                SimdVec<FP64,1> t56 = t54 / t55;
                SimdVec<FP64,1> t57 = t56 * t27;
                SimdVec<FP64,1> t58 = t26 + t57;
                SimdVec<FP64,2> t59{ t26[ 0 ], t58[ 0 ] };
                SimdVec<FP64,1> t61{ px2[ 1 ] };
                SimdVec<FP64,1> t62{ px2[ 0 ] };
                SimdVec<FP64,1> t63 = t61 - t62;
                SimdVec<FP64,1> t64 = t63 * t56;
                SimdVec<FP64,1> t65 = t62 + t64;
                SimdVec<FP64,2> t66{ t62[ 0 ], t65[ 0 ] };
                SimdVec<FP64,1> t68{ px0[ 1 ] };
                SimdVec<FP64,1> t69{ px0[ 0 ] };
                SimdVec<FP64,2> t70{ t69[ 0 ], t68[ 0 ] };
                px0 = t70;
                px2 = t66;
                px4 = t51;
                px6 = t44;
                py0 = t31;
                py2 = t59;
                py4 = t41;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_125: {
                // old_nb_nodes: 8 nodes: 0 1 2 [2,3] [6,7] 7
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ di6[ 1 ] };
                SimdVec<FP64,1> t26{ di6[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t40{ di2[ 1 ] };
                SimdVec<FP64,1> t41{ di2[ 0 ] };
                SimdVec<FP64,1> t42 = t41 - t40;
                SimdVec<FP64,1> t43 = t41 / t42;
                SimdVec<FP64,1> t44 = t43 * t19;
                SimdVec<FP64,1> t45 = t18 + t44;
                SimdVec<FP64,2> t46{ t18[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t48{ px2[ 1 ] };
                SimdVec<FP64,1> t49{ px2[ 0 ] };
                SimdVec<FP64,1> t50 = t48 - t49;
                SimdVec<FP64,1> t51 = t50 * t43;
                SimdVec<FP64,1> t52 = t49 + t51;
                SimdVec<FP64,2> t53{ t49[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,2> t57{ t56[ 0 ], t55[ 0 ] };
                px0 = t57;
                px2 = t53;
                px4 = t38;
                py0 = t23;
                py2 = t46;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_126: {
                // old_nb_nodes: 8 nodes: 0 1 2 [2,3] [7,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 1 ] };
                SimdVec<FP64,1> t16{ py2[ 1 ] };
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,1> t18 = t16 - t17;
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t21 - t14;
                SimdVec<FP64,2> t23{ t21[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t22;
                SimdVec<FP64,1> t32 = t14 + t31;
                SimdVec<FP64,2> t33;
                t33[ 0 ] = t32[ 0 ];
                SimdVec<FP64,1> t35{ px6[ 1 ] };
                SimdVec<FP64,1> t37{ di2[ 1 ] };
                SimdVec<FP64,1> t38{ di2[ 0 ] };
                SimdVec<FP64,1> t39 = t38 - t37;
                SimdVec<FP64,1> t40 = t38 / t39;
                SimdVec<FP64,1> t41 = t40 * t18;
                SimdVec<FP64,1> t42 = t17 + t41;
                SimdVec<FP64,2> t43{ t17[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t45{ px2[ 1 ] };
                SimdVec<FP64,1> t46{ px2[ 0 ] };
                SimdVec<FP64,1> t47 = t45 - t46;
                SimdVec<FP64,1> t48 = t47 * t40;
                SimdVec<FP64,1> t49 = t46 + t48;
                SimdVec<FP64,2> t50{ t46[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t53 - t35;
                SimdVec<FP64,1> t55 = t54 * t30;
                SimdVec<FP64,1> t56 = t35 + t55;
                SimdVec<FP64,2> t57;
                t57[ 0 ] = t56[ 0 ];
                SimdVec<FP64,2> t58{ t53[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t50;
                px4 = t57;
                py0 = t23;
                py2 = t43;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_127: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [2,3] 3 4 5 6 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ snis[ num_cut ][ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,1> t27{ py2[ 1 ] };
                SimdVec<FP64,2> t28{ t27[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ py2[ 0 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t32{ py0[ 1 ] };
                SimdVec<FP64,1> t33 = t29 - t32;
                SimdVec<FP64,1> t34{ py0[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 1 ] };
                SimdVec<FP64,1> t38{ t37[ 0 ] };
                SimdVec<FP64,1> t39{ px6[ 0 ] };
                SimdVec<FP64,1> t41{ px4[ 1 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t39[ 0 ] };
                SimdVec<FP64,1> t43{ px4[ 0 ] };
                SimdVec<FP64,1> t45{ di2[ 1 ] };
                SimdVec<FP64,1> t46{ di2[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t45;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t30;
                SimdVec<FP64,1> t50 = t29 + t49;
                SimdVec<FP64,1> t52{ di0[ 1 ] };
                SimdVec<FP64,1> t53 = t52 - t46;
                SimdVec<FP64,1> t54 = t52 / t53;
                SimdVec<FP64,1> t55 = t54 * t33;
                SimdVec<FP64,1> t56 = t32 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t59{ px2[ 1 ] };
                SimdVec<FP64,2> t60{ t59[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,1> t62 = t59 - t61;
                SimdVec<FP64,1> t63 = t62 * t48;
                SimdVec<FP64,1> t64 = t61 + t63;
                SimdVec<FP64,1> t66{ px0[ 1 ] };
                SimdVec<FP64,1> t67 = t61 - t66;
                SimdVec<FP64,1> t68 = t67 * t54;
                SimdVec<FP64,1> t69 = t66 + t68;
                SimdVec<FP64,2> t70{ t69[ 0 ], t64[ 0 ] };
                SimdVec<FP64,1> t71{ px0[ 0 ] };
                SimdVec<FP64,2> t72{ t71[ 0 ], t66[ 0 ] };
                px0 = t72;
                px2 = t70;
                px4 = t60;
                px6 = t42;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t38;
                py0 = t35;
                py2 = t57;
                py4 = t28;
                py6 = t24;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t13;
                pi4 = t10;
                pi6 = t6;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_128: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [3,4] 4 5 6 7
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ snis[ num_cut ][ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26 = t22 - t25;
                SimdVec<FP64,1> t27{ py2[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30 = t27 - t29;
                SimdVec<FP64,1> t31{ py0[ 0 ] };
                SimdVec<FP64,2> t32{ t31[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 1 ] };
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,2> t36{ t35[ 0 ], t34[ 0 ] };
                SimdVec<FP64,1> t38{ di4[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45 = t44 - t38;
                SimdVec<FP64,1> t46 = t44 / t45;
                SimdVec<FP64,1> t47 = t46 * t26;
                SimdVec<FP64,1> t48 = t25 + t47;
                SimdVec<FP64,1> t49{ di2[ 0 ] };
                SimdVec<FP64,1> t51{ di0[ 1 ] };
                SimdVec<FP64,1> t52 = t51 - t49;
                SimdVec<FP64,1> t53 = t51 / t52;
                SimdVec<FP64,1> t54 = t53 * t30;
                SimdVec<FP64,1> t55 = t29 + t54;
                SimdVec<FP64,2> t56{ t55[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t58{ px2[ 1 ] };
                SimdVec<FP64,1> t59 = t41 - t58;
                SimdVec<FP64,1> t60 = t59 * t46;
                SimdVec<FP64,1> t61 = t58 + t60;
                SimdVec<FP64,1> t62{ px2[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65 = t62 - t64;
                SimdVec<FP64,1> t66 = t65 * t53;
                SimdVec<FP64,1> t67 = t64 + t66;
                SimdVec<FP64,2> t68{ t67[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t69{ px0[ 0 ] };
                SimdVec<FP64,2> t70{ t69[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t68;
                px4 = t42;
                px6 = t36;
                py0 = t32;
                py2 = t56;
                py4 = t23;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_129: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [4,5] 5 6 7
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,2> t10{ snis[ num_cut ][ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,2> t18;
                t18[ 0 ] = t17[ 0 ];
                SimdVec<FP64,1> t19{ py6[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 0 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29 = t26 - t28;
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,2> t31{ t30[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 1 ] };
                SimdVec<FP64,2> t35;
                t35[ 0 ] = t34[ 0 ];
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,1> t38{ di4[ 1 ] };
                SimdVec<FP64,1> t39{ di4[ 0 ] };
                SimdVec<FP64,1> t40 = t39 - t38;
                SimdVec<FP64,1> t41 = t39 / t40;
                SimdVec<FP64,1> t42 = t41 * t24;
                SimdVec<FP64,1> t43 = t23 + t42;
                SimdVec<FP64,1> t45{ px4[ 1 ] };
                SimdVec<FP64,2> t46{ t45[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t47{ px4[ 0 ] };
                SimdVec<FP64,1> t48 = t45 - t47;
                SimdVec<FP64,1> t49 = t48 * t41;
                SimdVec<FP64,1> t50 = t47 + t49;
                SimdVec<FP64,1> t52{ di2[ 0 ] };
                SimdVec<FP64,1> t54{ di0[ 1 ] };
                SimdVec<FP64,1> t55 = t54 - t52;
                SimdVec<FP64,1> t56 = t54 / t55;
                SimdVec<FP64,1> t57 = t56 * t29;
                SimdVec<FP64,1> t58 = t28 + t57;
                SimdVec<FP64,2> t59{ t58[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t61{ px2[ 0 ] };
                SimdVec<FP64,1> t63{ px0[ 1 ] };
                SimdVec<FP64,1> t64 = t61 - t63;
                SimdVec<FP64,1> t65 = t64 * t56;
                SimdVec<FP64,1> t66 = t63 + t65;
                SimdVec<FP64,2> t67{ t66[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,2> t69{ t68[ 0 ], t63[ 0 ] };
                px0 = t69;
                px2 = t67;
                px4 = t46;
                px6 = t35;
                py0 = t31;
                py2 = t59;
                py4 = t22;
                py6 = t18;
                pi0 = t14;
                pi2 = t10;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_130: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [5,6] 6 7
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ snis[ num_cut ][ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18 = t14 - t17;
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t24{ py0[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t27{ di6[ 0 ] };
                SimdVec<FP64,1> t29{ di4[ 1 ] };
                SimdVec<FP64,1> t30 = t29 - t27;
                SimdVec<FP64,1> t31 = t29 / t30;
                SimdVec<FP64,1> t32 = t31 * t18;
                SimdVec<FP64,1> t33 = t17 + t32;
                SimdVec<FP64,1> t35{ px6[ 1 ] };
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,2> t37{ t36[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t39{ px4[ 1 ] };
                SimdVec<FP64,1> t40 = t36 - t39;
                SimdVec<FP64,1> t41 = t40 * t31;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t44{ di2[ 0 ] };
                SimdVec<FP64,1> t46{ di0[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t23;
                SimdVec<FP64,1> t50 = t22 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t55{ px0[ 1 ] };
                SimdVec<FP64,1> t56 = t53 - t55;
                SimdVec<FP64,1> t57 = t56 * t48;
                SimdVec<FP64,1> t58 = t55 + t57;
                SimdVec<FP64,2> t59{ t58[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t60{ px0[ 0 ] };
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t59;
                px4 = t37;
                py0 = t25;
                py2 = t51;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_131: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [6,7] 7
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,2> t6{ snis[ num_cut ][ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,2> t14;
                t14[ 0 ] = t13[ 0 ];
                SimdVec<FP64,1> t15{ py6[ 0 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21 = t18 - t20;
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t26{ di6[ 1 ] };
                SimdVec<FP64,1> t27{ di6[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,2> t34;
                t34[ 0 ] = t33[ 0 ];
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t36 = t33 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,1> t40{ di2[ 0 ] };
                SimdVec<FP64,1> t42{ di0[ 1 ] };
                SimdVec<FP64,1> t43 = t42 - t40;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t21;
                SimdVec<FP64,1> t46 = t20 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t31[ 0 ] };
                SimdVec<FP64,1> t49{ px2[ 0 ] };
                SimdVec<FP64,1> t51{ px0[ 1 ] };
                SimdVec<FP64,1> t52 = t49 - t51;
                SimdVec<FP64,1> t53 = t52 * t44;
                SimdVec<FP64,1> t54 = t51 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t56{ px0[ 0 ] };
                SimdVec<FP64,2> t57{ t56[ 0 ], t51[ 0 ] };
                px0 = t57;
                px2 = t55;
                px4 = t34;
                py0 = t23;
                py2 = t47;
                py4 = t14;
                pi0 = t10;
                pi2 = t6;
                pi4 = t3;
                continue;
            }
            case_132: {
                // old_nb_nodes: 8 nodes: 0 1 [1,2] [7,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ snis[ num_cut ][ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t15{ py0[ 0 ] };
                SimdVec<FP64,1> t16 = t15 - t9;
                SimdVec<FP64,2> t17{ t15[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t19{ di6[ 1 ] };
                SimdVec<FP64,1> t21{ px6[ 1 ] };
                SimdVec<FP64,1> t23{ di2[ 0 ] };
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t26 = t19 - t25;
                SimdVec<FP64,1> t27 = t19 / t26;
                SimdVec<FP64,1> t28 = t27 * t16;
                SimdVec<FP64,1> t29 = t9 + t28;
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t23;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t14;
                SimdVec<FP64,1> t34 = t13 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 0 ] };
                SimdVec<FP64,1> t39{ px0[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t32;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,1> t43{ px0[ 0 ] };
                SimdVec<FP64,1> t44 = t43 - t21;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t21 + t45;
                SimdVec<FP64,2> t47{ t42[ 0 ], t46[ 0 ] };
                SimdVec<FP64,2> t48{ t43[ 0 ], t39[ 0 ] };
                px0 = t48;
                px2 = t47;
                py0 = t17;
                py2 = t35;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_133: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [1,2] 2 3 4 5 6 7
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ t1[ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 1 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ t19[ 0 ] };
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,2> t24{ t23[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,1> t27{ py2[ 1 ] };
                SimdVec<FP64,2> t28{ t27[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ py2[ 0 ] };
                SimdVec<FP64,1> t31{ py0[ 1 ] };
                SimdVec<FP64,1> t32 = t29 - t31;
                SimdVec<FP64,1> t33{ py0[ 0 ] };
                SimdVec<FP64,1> t34 = t31 - t33;
                SimdVec<FP64,1> t36{ px6[ 1 ] };
                SimdVec<FP64,1> t37{ t36[ 0 ] };
                SimdVec<FP64,1> t38{ px6[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,2> t41{ t40[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 0 ] };
                SimdVec<FP64,1> t46{ px2[ 1 ] };
                SimdVec<FP64,2> t47{ t46[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t48{ px2[ 0 ] };
                SimdVec<FP64,1> t50{ di0[ 1 ] };
                SimdVec<FP64,1> t51 = t50 - t44;
                SimdVec<FP64,1> t52 = t50 / t51;
                SimdVec<FP64,1> t53 = t52 * t32;
                SimdVec<FP64,1> t54 = t31 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 0 ] };
                SimdVec<FP64,1> t57 = t56 - t50;
                SimdVec<FP64,1> t58 = t56 / t57;
                SimdVec<FP64,1> t59 = t58 * t34;
                SimdVec<FP64,1> t60 = t33 + t59;
                SimdVec<FP64,2> t61{ t33[ 0 ], t60[ 0 ] };
                SimdVec<FP64,1> t63{ px0[ 1 ] };
                SimdVec<FP64,1> t64 = t48 - t63;
                SimdVec<FP64,1> t65 = t64 * t52;
                SimdVec<FP64,1> t66 = t63 + t65;
                SimdVec<FP64,2> t67{ t66[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t68{ px0[ 0 ] };
                SimdVec<FP64,1> t69 = t63 - t68;
                SimdVec<FP64,1> t70 = t69 * t58;
                SimdVec<FP64,1> t71 = t68 + t70;
                SimdVec<FP64,2> t72{ t68[ 0 ], t71[ 0 ] };
                px0 = t72;
                px2 = t67;
                px4 = t47;
                px6 = t41;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t37;
                py0 = t61;
                py2 = t55;
                py4 = t28;
                py6 = t24;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t20;
                pi0 = t17;
                pi2 = t15;
                pi4 = t10;
                pi6 = t6;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t2;
                ++num_cut;
                goto store_and_break;
            }
            case_134: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [2,3] 3 4 5 6 7
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,1> t31 = t29 - t30;
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,2> t35{ t34[ 0 ], t33[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t41{ di2[ 1 ] };
                SimdVec<FP64,1> t42{ di2[ 0 ] };
                SimdVec<FP64,1> t43 = t42 - t41;
                SimdVec<FP64,1> t44 = t42 / t43;
                SimdVec<FP64,1> t45 = t44 * t27;
                SimdVec<FP64,1> t46 = t26 + t45;
                SimdVec<FP64,2> t47{ t46[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t49{ px2[ 1 ] };
                SimdVec<FP64,1> t50{ px2[ 0 ] };
                SimdVec<FP64,1> t51 = t49 - t50;
                SimdVec<FP64,1> t52 = t51 * t44;
                SimdVec<FP64,1> t53 = t50 + t52;
                SimdVec<FP64,2> t54{ t53[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 1 ] };
                SimdVec<FP64,1> t57{ di0[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t31;
                SimdVec<FP64,1> t61 = t30 + t60;
                SimdVec<FP64,2> t62{ t30[ 0 ], t61[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t65[ 0 ], t68[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t39;
                px6 = t35;
                py0 = t62;
                py2 = t47;
                py4 = t23;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_135: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [3,4] 4 5 6 7
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 1 ] };
                SimdVec<FP64,2> t19;
                t19[ 0 ] = t18[ 0 ];
                SimdVec<FP64,1> t20{ py6[ 0 ] };
                SimdVec<FP64,1> t22{ py4[ 1 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t24{ py4[ 0 ] };
                SimdVec<FP64,1> t26{ py2[ 1 ] };
                SimdVec<FP64,1> t27 = t24 - t26;
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,1> t31 = t29 - t30;
                SimdVec<FP64,1> t34{ px6[ 1 ] };
                SimdVec<FP64,2> t35;
                t35[ 0 ] = t34[ 0 ];
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,1> t38{ di4[ 0 ] };
                SimdVec<FP64,1> t40{ di2[ 1 ] };
                SimdVec<FP64,1> t41 = t40 - t38;
                SimdVec<FP64,1> t42 = t40 / t41;
                SimdVec<FP64,1> t43 = t42 * t27;
                SimdVec<FP64,1> t44 = t26 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t47{ px4[ 1 ] };
                SimdVec<FP64,2> t48{ t47[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t49{ px4[ 0 ] };
                SimdVec<FP64,1> t51{ px2[ 1 ] };
                SimdVec<FP64,1> t52 = t49 - t51;
                SimdVec<FP64,1> t53 = t52 * t42;
                SimdVec<FP64,1> t54 = t51 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t57{ di0[ 1 ] };
                SimdVec<FP64,1> t58{ di0[ 0 ] };
                SimdVec<FP64,1> t59 = t58 - t57;
                SimdVec<FP64,1> t60 = t58 / t59;
                SimdVec<FP64,1> t61 = t60 * t31;
                SimdVec<FP64,1> t62 = t30 + t61;
                SimdVec<FP64,2> t63{ t30[ 0 ], t62[ 0 ] };
                SimdVec<FP64,1> t65{ px0[ 1 ] };
                SimdVec<FP64,1> t66{ px0[ 0 ] };
                SimdVec<FP64,1> t67 = t65 - t66;
                SimdVec<FP64,1> t68 = t67 * t60;
                SimdVec<FP64,1> t69 = t66 + t68;
                SimdVec<FP64,2> t70{ t66[ 0 ], t69[ 0 ] };
                px0 = t70;
                px2 = t55;
                px4 = t48;
                px6 = t35;
                py0 = t63;
                py2 = t45;
                py4 = t23;
                py6 = t19;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_136: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [4,5] 5 6 7
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ px6[ 1 ] };
                SimdVec<FP64,1> t26{ px6[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ di4[ 1 ] };
                SimdVec<FP64,1> t30{ di4[ 0 ] };
                SimdVec<FP64,1> t31 = t30 - t29;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t19;
                SimdVec<FP64,1> t34 = t18 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38{ px4[ 0 ] };
                SimdVec<FP64,1> t39 = t37 - t38;
                SimdVec<FP64,1> t40 = t39 * t32;
                SimdVec<FP64,1> t41 = t38 + t40;
                SimdVec<FP64,2> t42{ t41[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t22[ 0 ], t49[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t53[ 0 ], t56[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t27;
                py0 = t50;
                py2 = t35;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_137: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [5,6] 6 7
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 1 ] };
                SimdVec<FP64,2> t15;
                t15[ 0 ] = t14[ 0 ];
                SimdVec<FP64,1> t16{ py6[ 0 ] };
                SimdVec<FP64,1> t18{ py4[ 1 ] };
                SimdVec<FP64,1> t19 = t16 - t18;
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t26{ di6[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t19;
                SimdVec<FP64,1> t32 = t18 + t31;
                SimdVec<FP64,2> t33{ t32[ 0 ], t16[ 0 ] };
                SimdVec<FP64,1> t35{ px6[ 1 ] };
                SimdVec<FP64,2> t36;
                t36[ 0 ] = t35[ 0 ];
                SimdVec<FP64,1> t37{ px6[ 0 ] };
                SimdVec<FP64,1> t39{ px4[ 1 ] };
                SimdVec<FP64,1> t40 = t37 - t39;
                SimdVec<FP64,1> t41 = t40 * t30;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t45{ di0[ 1 ] };
                SimdVec<FP64,1> t46{ di0[ 0 ] };
                SimdVec<FP64,1> t47 = t46 - t45;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t23;
                SimdVec<FP64,1> t50 = t22 + t49;
                SimdVec<FP64,2> t51{ t22[ 0 ], t50[ 0 ] };
                SimdVec<FP64,1> t53{ px0[ 1 ] };
                SimdVec<FP64,1> t54{ px0[ 0 ] };
                SimdVec<FP64,1> t55 = t53 - t54;
                SimdVec<FP64,1> t56 = t55 * t48;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t54[ 0 ], t57[ 0 ] };
                px0 = t58;
                px2 = t43;
                px4 = t36;
                py0 = t51;
                py2 = t33;
                py4 = t15;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_138: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [6,7] 7
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ pi6[ 1 ] };
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], t1[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 1 ] };
                SimdVec<FP64,1> t10{ py6[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di6[ 1 ] };
                SimdVec<FP64,1> t18{ di6[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t22[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t25{ px6[ 1 ] };
                SimdVec<FP64,1> t26{ px6[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t29[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t14[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t41[ 0 ], t44[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_139: {
                // old_nb_nodes: 8 nodes: 0 [0,1] [7,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3;
                t3[ 0 ] = t2[ 0 ];
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<FP64,1> t10{ py6[ 1 ] };
                SimdVec<FP64,1> t12{ py0[ 1 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t13 - t10;
                SimdVec<FP64,1> t15 = t12 - t13;
                SimdVec<FP64,1> t18{ di6[ 1 ] };
                SimdVec<FP64,1> t20{ px6[ 1 ] };
                SimdVec<FP64,1> t22{ di0[ 1 ] };
                SimdVec<FP64,1> t23{ di0[ 0 ] };
                SimdVec<FP64,1> t24 = t18 - t23;
                SimdVec<FP64,1> t25 = t18 / t24;
                SimdVec<FP64,1> t26 = t25 * t14;
                SimdVec<FP64,1> t27 = t10 + t26;
                SimdVec<FP64,2> t28;
                t28[ 0 ] = t27[ 0 ];
                SimdVec<FP64,1> t29 = t23 - t22;
                SimdVec<FP64,1> t30 = t23 / t29;
                SimdVec<FP64,1> t31 = t30 * t15;
                SimdVec<FP64,1> t32 = t13 + t31;
                SimdVec<FP64,2> t33{ t13[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 1 ] };
                SimdVec<FP64,1> t36{ px0[ 0 ] };
                SimdVec<FP64,1> t37 = t36 - t20;
                SimdVec<FP64,1> t38 = t37 * t25;
                SimdVec<FP64,1> t39 = t20 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41 = t35 - t36;
                SimdVec<FP64,1> t42 = t41 * t30;
                SimdVec<FP64,1> t43 = t36 + t42;
                SimdVec<FP64,2> t44{ t36[ 0 ], t43[ 0 ] };
                px0 = t44;
                px2 = t40;
                py0 = t33;
                py2 = t28;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_140: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 3 4 5 6 7 [7,0]
                nodes_size = 9;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t1{ snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t3{ pi6[ 1 ] };
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,2> t5{ t4[ 0 ], t3[ 0 ] };
                SimdVec<U64,1> t7{ pi4[ 1 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,2> t9{ t8[ 0 ], t7[ 0 ] };
                SimdVec<U64,1> t11{ pi2[ 1 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,2> t13{ t12[ 0 ], t11[ 0 ] };
                SimdVec<U64,1> t15{ pi0[ 1 ] };
                SimdVec<U64,1> t16{ pi0[ 0 ] };
                SimdVec<U64,2> t17{ t16[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20{ py6[ 0 ] };
                SimdVec<FP64,2> t21{ t20[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t23{ py4[ 1 ] };
                SimdVec<FP64,1> t24{ py4[ 0 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t23[ 0 ] };
                SimdVec<FP64,1> t27{ py2[ 1 ] };
                SimdVec<FP64,1> t28{ py2[ 0 ] };
                SimdVec<FP64,2> t29{ t28[ 0 ], t27[ 0 ] };
                SimdVec<FP64,1> t31{ py0[ 1 ] };
                SimdVec<FP64,1> t32{ py0[ 0 ] };
                SimdVec<FP64,1> t33 = t32 - t19;
                SimdVec<FP64,1> t34 = t31 - t32;
                SimdVec<FP64,1> t36{ di6[ 1 ] };
                SimdVec<FP64,1> t38{ px6[ 1 ] };
                SimdVec<FP64,1> t39{ px6[ 0 ] };
                SimdVec<FP64,2> t40{ t39[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 1 ] };
                SimdVec<FP64,1> t43{ px4[ 0 ] };
                SimdVec<FP64,2> t44{ t43[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t46{ px2[ 1 ] };
                SimdVec<FP64,1> t47{ px2[ 0 ] };
                SimdVec<FP64,2> t48{ t47[ 0 ], t46[ 0 ] };
                SimdVec<FP64,1> t50{ di0[ 1 ] };
                SimdVec<FP64,1> t51{ di0[ 0 ] };
                SimdVec<FP64,1> t52 = t36 - t51;
                SimdVec<FP64,1> t53 = t36 / t52;
                SimdVec<FP64,1> t54 = t53 * t33;
                SimdVec<FP64,1> t55 = t19 + t54;
                SimdVec<FP64,1> t56{ t55[ 0 ] };
                SimdVec<FP64,1> t57 = t51 - t50;
                SimdVec<FP64,1> t58 = t51 / t57;
                SimdVec<FP64,1> t59 = t58 * t34;
                SimdVec<FP64,1> t60 = t32 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t31[ 0 ] };
                SimdVec<FP64,1> t63{ px0[ 1 ] };
                SimdVec<FP64,1> t64{ px0[ 0 ] };
                SimdVec<FP64,1> t65 = t64 - t38;
                SimdVec<FP64,1> t66 = t65 * t53;
                SimdVec<FP64,1> t67 = t38 + t66;
                SimdVec<FP64,1> t68{ t67[ 0 ] };
                SimdVec<FP64,1> t69 = t63 - t64;
                SimdVec<FP64,1> t70 = t69 * t58;
                SimdVec<FP64,1> t71 = t64 + t70;
                SimdVec<FP64,2> t72{ t71[ 0 ], t63[ 0 ] };
                px0 = t72;
                px2 = t48;
                px4 = t44;
                px6 = t40;
                reinterpret_cast<SimdVec<FP64,1> *>( position_xs )[ 8 ] = t68;
                py0 = t61;
                py2 = t29;
                py4 = t25;
                py6 = t21;
                reinterpret_cast<SimdVec<FP64,1> *>( position_ys )[ 8 ] = t56;
                pi0 = t17;
                pi2 = t13;
                pi4 = t9;
                pi6 = t5;
                reinterpret_cast<SimdVec<U64,1> *>( cut_ids )[ 8 ] = t1;
                ++num_cut;
                goto store_and_break;
            }
            case_141: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 3 4 5 6 [6,7]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<U64,1> t13{ pi0[ 1 ] };
                SimdVec<U64,1> t14{ pi0[ 0 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t19 = t17 - t18;
                SimdVec<FP64,1> t21{ py4[ 1 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t25{ py2[ 1 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t25[ 0 ] };
                SimdVec<FP64,1> t29{ py0[ 1 ] };
                SimdVec<FP64,1> t30{ py0[ 0 ] };
                SimdVec<FP64,1> t31 = t29 - t30;
                SimdVec<FP64,1> t33{ di6[ 1 ] };
                SimdVec<FP64,1> t34{ di6[ 0 ] };
                SimdVec<FP64,1> t35 = t34 - t33;
                SimdVec<FP64,1> t36 = t34 / t35;
                SimdVec<FP64,1> t37 = t36 * t19;
                SimdVec<FP64,1> t38 = t18 + t37;
                SimdVec<FP64,2> t39{ t18[ 0 ], t38[ 0 ] };
                SimdVec<FP64,1> t41{ px6[ 1 ] };
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t43 = t41 - t42;
                SimdVec<FP64,1> t44 = t43 * t36;
                SimdVec<FP64,1> t45 = t42 + t44;
                SimdVec<FP64,2> t46{ t42[ 0 ], t45[ 0 ] };
                SimdVec<FP64,1> t48{ px4[ 1 ] };
                SimdVec<FP64,1> t49{ px4[ 0 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 1 ] };
                SimdVec<FP64,1> t57{ di0[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t31;
                SimdVec<FP64,1> t61 = t30 + t60;
                SimdVec<FP64,2> t62{ t61[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t68[ 0 ], t64[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t50;
                px6 = t46;
                py0 = t62;
                py2 = t27;
                py4 = t23;
                py6 = t39;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_142: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 3 4 5 [5,6]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi0[ 1 ] };
                SimdVec<U64,1> t13{ pi0[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,1> t25{ py2[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 1 ] };
                SimdVec<FP64,1> t29{ py0[ 0 ] };
                SimdVec<FP64,1> t30 = t28 - t29;
                SimdVec<FP64,1> t33{ di6[ 0 ] };
                SimdVec<FP64,1> t35{ di4[ 1 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t44{ px4[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t37;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48;
                t48[ 0 ] = t47[ 0 ];
                SimdVec<FP64,1> t49{ px4[ 0 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t56{ di0[ 1 ] };
                SimdVec<FP64,1> t57{ di0[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t30;
                SimdVec<FP64,1> t61 = t29 + t60;
                SimdVec<FP64,2> t62{ t61[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t64{ px0[ 1 ] };
                SimdVec<FP64,1> t65{ px0[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t68[ 0 ], t64[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t50;
                px6 = t48;
                py0 = t62;
                py2 = t26;
                py4 = t22;
                py6 = t40;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t2;
                continue;
            }
            case_143: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 3 4 [4,5]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi0[ 1 ] };
                SimdVec<U64,1> t10{ pi0[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py2[ 1 ] };
                SimdVec<FP64,1> t18{ py2[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py0[ 1 ] };
                SimdVec<FP64,1> t22{ py0[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ di4[ 1 ] };
                SimdVec<FP64,1> t26{ di4[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t14[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t34[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t38;
                py0 = t50;
                py2 = t19;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_144: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 3 [3,4]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi0[ 1 ] };
                SimdVec<U64,1> t9{ pi0[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py2[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py0[ 1 ] };
                SimdVec<FP64,1> t21{ py0[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di4[ 0 ] };
                SimdVec<FP64,1> t27{ di2[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t36{ px2[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 1 ] };
                SimdVec<FP64,1> t45{ di0[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px0[ 1 ] };
                SimdVec<FP64,1> t53{ px0[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_145: {
                // old_nb_nodes: 8 nodes: [0,1] 1 2 [2,3]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi0[ 1 ] };
                SimdVec<U64,1> t6{ pi0[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 1 ] };
                SimdVec<FP64,1> t10{ py2[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py0[ 1 ] };
                SimdVec<FP64,1> t14{ py0[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di2[ 1 ] };
                SimdVec<FP64,1> t18{ di2[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px2[ 1 ] };
                SimdVec<FP64,1> t26{ px2[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di0[ 1 ] };
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41{ px0[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_146: {
                // old_nb_nodes: 8 nodes: [0,1] 1 [1,2]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi0[ 1 ] };
                SimdVec<U64,1> t5{ pi0[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py2[ 0 ] };
                SimdVec<FP64,1> t11{ py0[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di2[ 0 ] };
                SimdVec<FP64,1> t19{ px2[ 0 ] };
                SimdVec<FP64,1> t21{ di0[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di0[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px0[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px0[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_147: {
                // old_nb_nodes: 8 nodes: [1,2] 2 3 4 5 6 7 [7,0]
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 1 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py6[ 1 ] };
                SimdVec<FP64,1> t18{ py6[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,2> t21{ t20[ 0 ], t18[ 0 ] };
                SimdVec<FP64,1> t22{ py4[ 0 ] };
                SimdVec<FP64,1> t24{ py2[ 1 ] };
                SimdVec<FP64,2> t25{ t24[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t26{ py2[ 0 ] };
                SimdVec<FP64,1> t28{ py0[ 0 ] };
                SimdVec<FP64,1> t29 = t28 - t17;
                SimdVec<FP64,1> t30{ py0[ 1 ] };
                SimdVec<FP64,1> t31 = t26 - t30;
                SimdVec<FP64,1> t33{ di6[ 1 ] };
                SimdVec<FP64,1> t35{ px6[ 1 ] };
                SimdVec<FP64,1> t36{ px6[ 0 ] };
                SimdVec<FP64,1> t38{ px4[ 1 ] };
                SimdVec<FP64,2> t39{ t38[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 0 ] };
                SimdVec<FP64,1> t42{ di2[ 0 ] };
                SimdVec<FP64,1> t44{ di0[ 0 ] };
                SimdVec<FP64,1> t45 = t33 - t44;
                SimdVec<FP64,1> t46 = t33 / t45;
                SimdVec<FP64,1> t47 = t46 * t29;
                SimdVec<FP64,1> t48 = t17 + t47;
                SimdVec<FP64,2> t49{ t17[ 0 ], t48[ 0 ] };
                SimdVec<FP64,1> t50{ di0[ 1 ] };
                SimdVec<FP64,1> t51 = t50 - t42;
                SimdVec<FP64,1> t52 = t50 / t51;
                SimdVec<FP64,1> t53 = t52 * t31;
                SimdVec<FP64,1> t54 = t30 + t53;
                SimdVec<FP64,2> t55{ t54[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t57{ px2[ 1 ] };
                SimdVec<FP64,2> t58{ t57[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t59{ px2[ 0 ] };
                SimdVec<FP64,1> t61{ px0[ 0 ] };
                SimdVec<FP64,1> t62 = t61 - t35;
                SimdVec<FP64,1> t63 = t62 * t46;
                SimdVec<FP64,1> t64 = t35 + t63;
                SimdVec<FP64,2> t65{ t35[ 0 ], t64[ 0 ] };
                SimdVec<FP64,1> t66{ px0[ 1 ] };
                SimdVec<FP64,1> t67 = t59 - t66;
                SimdVec<FP64,1> t68 = t67 * t52;
                SimdVec<FP64,1> t69 = t66 + t68;
                SimdVec<FP64,2> t70{ t69[ 0 ], t59[ 0 ] };
                px0 = t70;
                px2 = t58;
                px4 = t39;
                px6 = t65;
                py0 = t55;
                py2 = t25;
                py4 = t21;
                py6 = t49;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t3;
                continue;
            }
            case_148: {
                // old_nb_nodes: 8 nodes: [1,2] 2 3 4 5 6 [6,7]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi2[ 0 ] };
                SimdVec<U64,1> t14{ pi0[ 1 ] };
                SimdVec<U64,2> t15{ t14[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t18{ py6[ 1 ] };
                SimdVec<FP64,1> t19{ py6[ 0 ] };
                SimdVec<FP64,1> t20 = t18 - t19;
                SimdVec<FP64,1> t22{ py4[ 1 ] };
                SimdVec<FP64,2> t23{ t22[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t24{ py4[ 0 ] };
                SimdVec<FP64,1> t26{ py2[ 1 ] };
                SimdVec<FP64,2> t27{ t26[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py2[ 0 ] };
                SimdVec<FP64,1> t30{ py0[ 1 ] };
                SimdVec<FP64,1> t31 = t28 - t30;
                SimdVec<FP64,1> t34{ di6[ 1 ] };
                SimdVec<FP64,1> t35{ di6[ 0 ] };
                SimdVec<FP64,1> t36 = t35 - t34;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t42{ px6[ 1 ] };
                SimdVec<FP64,1> t43{ px6[ 0 ] };
                SimdVec<FP64,1> t44 = t42 - t43;
                SimdVec<FP64,1> t45 = t44 * t37;
                SimdVec<FP64,1> t46 = t43 + t45;
                SimdVec<FP64,2> t47;
                t47[ 0 ] = t46[ 0 ];
                SimdVec<FP64,1> t49{ px4[ 1 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t43[ 0 ] };
                SimdVec<FP64,1> t51{ px4[ 0 ] };
                SimdVec<FP64,1> t53{ di2[ 0 ] };
                SimdVec<FP64,1> t55{ di0[ 1 ] };
                SimdVec<FP64,1> t56 = t55 - t53;
                SimdVec<FP64,1> t57 = t55 / t56;
                SimdVec<FP64,1> t58 = t57 * t31;
                SimdVec<FP64,1> t59 = t30 + t58;
                SimdVec<FP64,2> t60{ t59[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t62{ px2[ 1 ] };
                SimdVec<FP64,2> t63{ t62[ 0 ], t51[ 0 ] };
                SimdVec<FP64,1> t64{ px2[ 0 ] };
                SimdVec<FP64,1> t66{ px0[ 1 ] };
                SimdVec<FP64,1> t67 = t64 - t66;
                SimdVec<FP64,1> t68 = t67 * t57;
                SimdVec<FP64,1> t69 = t66 + t68;
                SimdVec<FP64,2> t70{ t69[ 0 ], t64[ 0 ] };
                px0 = t70;
                px2 = t63;
                px4 = t50;
                px6 = t47;
                py0 = t60;
                py2 = t27;
                py4 = t23;
                py6 = t40;
                pi0 = t15;
                pi2 = t11;
                pi4 = t7;
                pi6 = t2;
                continue;
            }
            case_149: {
                // old_nb_nodes: 8 nodes: [1,2] 2 3 4 5 [5,6]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,1> t19{ py2[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 0 ] };
                SimdVec<FP64,1> t23{ py0[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ di6[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t16;
                SimdVec<FP64,1> t32 = t15 + t31;
                SimdVec<FP64,2> t33{ t15[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38 = t35 - t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 0 ] };
                SimdVec<FP64,1> t46{ di0[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t24;
                SimdVec<FP64,1> t50 = t23 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t53{ px2[ 1 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t55{ px2[ 0 ] };
                SimdVec<FP64,1> t57{ px0[ 1 ] };
                SimdVec<FP64,1> t58 = t55 - t57;
                SimdVec<FP64,1> t59 = t58 * t48;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t54;
                px4 = t41;
                py0 = t51;
                py2 = t20;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_150: {
                // old_nb_nodes: 8 nodes: [1,2] 2 3 4 [4,5]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 0 ] };
                SimdVec<U64,1> t10{ pi0[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t15{ py4[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ py2[ 1 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 0 ] };
                SimdVec<FP64,1> t22{ py0[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t26{ di4[ 1 ] };
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35{ px4[ 0 ] };
                SimdVec<FP64,1> t36 = t34 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t41{ di2[ 0 ] };
                SimdVec<FP64,1> t43{ di0[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t41;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t23;
                SimdVec<FP64,1> t47 = t22 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t50{ px2[ 1 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 0 ] };
                SimdVec<FP64,1> t54{ px0[ 1 ] };
                SimdVec<FP64,1> t55 = t52 - t54;
                SimdVec<FP64,1> t56 = t55 * t45;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t51;
                px4 = t39;
                py0 = t48;
                py2 = t19;
                py4 = t32;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_151: {
                // old_nb_nodes: 8 nodes: [1,2] 2 3 [3,4]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi2[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t15{ py0[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t20{ px4[ 0 ] };
                SimdVec<FP64,1> t22{ di2[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di2[ 0 ] };
                SimdVec<FP64,1> t30{ di0[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px2[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px2[ 0 ] };
                SimdVec<FP64,1> t44{ px0[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_152: {
                // old_nb_nodes: 8 nodes: [1,2] 2 [2,3]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 0 ] };
                SimdVec<U64,1> t6{ pi0[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py2[ 1 ] };
                SimdVec<FP64,1> t11{ py2[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py0[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di2[ 1 ] };
                SimdVec<FP64,1> t19{ di2[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di0[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px2[ 1 ] };
                SimdVec<FP64,1> t34{ px2[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px0[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_153: {
                // old_nb_nodes: 8 nodes: [2,3] 3 4 5 6 7 [7,0]
                nodes_size = 7;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 1 ] };
                SimdVec<U64,1> t5{ pi6[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 1 ] };
                SimdVec<U64,1> t9{ pi4[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<U64,1> t12{ pi2[ 1 ] };
                SimdVec<U64,1> t13{ pi2[ 0 ] };
                SimdVec<U64,2> t14{ t13[ 0 ], t12[ 0 ] };
                SimdVec<FP64,1> t17{ py0[ 0 ] };
                SimdVec<FP64,1> t19{ py6[ 1 ] };
                SimdVec<FP64,1> t20 = t17 - t19;
                SimdVec<FP64,1> t21{ py6[ 0 ] };
                SimdVec<FP64,2> t22{ t21[ 0 ], t19[ 0 ] };
                SimdVec<FP64,1> t24{ py4[ 1 ] };
                SimdVec<FP64,1> t25{ py4[ 0 ] };
                SimdVec<FP64,2> t26{ t25[ 0 ], t24[ 0 ] };
                SimdVec<FP64,1> t28{ py2[ 1 ] };
                SimdVec<FP64,1> t29{ py2[ 0 ] };
                SimdVec<FP64,1> t30 = t28 - t29;
                SimdVec<FP64,1> t33{ di0[ 0 ] };
                SimdVec<FP64,1> t35{ di6[ 1 ] };
                SimdVec<FP64,1> t36 = t35 - t33;
                SimdVec<FP64,1> t37 = t35 / t36;
                SimdVec<FP64,1> t38 = t37 * t20;
                SimdVec<FP64,1> t39 = t19 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t42{ px0[ 0 ] };
                SimdVec<FP64,1> t44{ px6[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t37;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48;
                t48[ 0 ] = t47[ 0 ];
                SimdVec<FP64,1> t49{ px6[ 0 ] };
                SimdVec<FP64,2> t50{ t49[ 0 ], t44[ 0 ] };
                SimdVec<FP64,1> t52{ px4[ 1 ] };
                SimdVec<FP64,1> t53{ px4[ 0 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t52[ 0 ] };
                SimdVec<FP64,1> t56{ di2[ 1 ] };
                SimdVec<FP64,1> t57{ di2[ 0 ] };
                SimdVec<FP64,1> t58 = t57 - t56;
                SimdVec<FP64,1> t59 = t57 / t58;
                SimdVec<FP64,1> t60 = t59 * t30;
                SimdVec<FP64,1> t61 = t29 + t60;
                SimdVec<FP64,2> t62{ t61[ 0 ], t28[ 0 ] };
                SimdVec<FP64,1> t64{ px2[ 1 ] };
                SimdVec<FP64,1> t65{ px2[ 0 ] };
                SimdVec<FP64,1> t66 = t64 - t65;
                SimdVec<FP64,1> t67 = t66 * t59;
                SimdVec<FP64,1> t68 = t65 + t67;
                SimdVec<FP64,2> t69{ t68[ 0 ], t64[ 0 ] };
                px0 = t69;
                px2 = t54;
                px4 = t50;
                px6 = t48;
                py0 = t62;
                py2 = t26;
                py4 = t22;
                py6 = t40;
                pi0 = t14;
                pi2 = t10;
                pi4 = t6;
                pi6 = t2;
                continue;
            }
            case_154: {
                // old_nb_nodes: 8 nodes: [2,3] 3 4 5 6 [6,7]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<U64,1> t9{ pi2[ 1 ] };
                SimdVec<U64,1> t10{ pi2[ 0 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t9[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 1 ] };
                SimdVec<FP64,1> t14{ py6[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ py4[ 1 ] };
                SimdVec<FP64,1> t18{ py4[ 0 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py2[ 1 ] };
                SimdVec<FP64,1> t22{ py2[ 0 ] };
                SimdVec<FP64,1> t23 = t21 - t22;
                SimdVec<FP64,1> t25{ di6[ 1 ] };
                SimdVec<FP64,1> t26{ di6[ 0 ] };
                SimdVec<FP64,1> t27 = t26 - t25;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t14[ 0 ], t30[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t28;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38{ t34[ 0 ], t37[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45{ di2[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t23;
                SimdVec<FP64,1> t49 = t22 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t38;
                py0 = t50;
                py2 = t19;
                py4 = t31;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_155: {
                // old_nb_nodes: 8 nodes: [2,3] 3 4 5 [5,6]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi2[ 1 ] };
                SimdVec<U64,1> t9{ pi2[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py4[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py2[ 1 ] };
                SimdVec<FP64,1> t21{ py2[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di6[ 0 ] };
                SimdVec<FP64,1> t27{ di4[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t36{ px4[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di2[ 1 ] };
                SimdVec<FP64,1> t45{ di2[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px2[ 1 ] };
                SimdVec<FP64,1> t53{ px2[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_156: {
                // old_nb_nodes: 8 nodes: [2,3] 3 4 [4,5]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi2[ 1 ] };
                SimdVec<U64,1> t6{ pi2[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 1 ] };
                SimdVec<FP64,1> t10{ py4[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py2[ 1 ] };
                SimdVec<FP64,1> t14{ py2[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di4[ 1 ] };
                SimdVec<FP64,1> t18{ di4[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px4[ 1 ] };
                SimdVec<FP64,1> t26{ px4[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di2[ 1 ] };
                SimdVec<FP64,1> t33{ di2[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41{ px2[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_157: {
                // old_nb_nodes: 8 nodes: [2,3] 3 [3,4]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi2[ 1 ] };
                SimdVec<U64,1> t5{ pi2[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py4[ 0 ] };
                SimdVec<FP64,1> t11{ py2[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py2[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di4[ 0 ] };
                SimdVec<FP64,1> t19{ px4[ 0 ] };
                SimdVec<FP64,1> t21{ di2[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di2[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px2[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px2[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_158: {
                // old_nb_nodes: 8 nodes: [3,4] 4 5 6 7 [7,0]
                nodes_size = 6;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t15{ py6[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,1> t19{ py4[ 1 ] };
                SimdVec<FP64,2> t20{ t19[ 0 ], t17[ 0 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t23{ py2[ 1 ] };
                SimdVec<FP64,1> t24 = t21 - t23;
                SimdVec<FP64,1> t26{ di0[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 1 ] };
                SimdVec<FP64,1> t29 = t28 - t26;
                SimdVec<FP64,1> t30 = t28 / t29;
                SimdVec<FP64,1> t31 = t30 * t16;
                SimdVec<FP64,1> t32 = t15 + t31;
                SimdVec<FP64,2> t33{ t15[ 0 ], t32[ 0 ] };
                SimdVec<FP64,1> t35{ px0[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 1 ] };
                SimdVec<FP64,1> t38 = t35 - t37;
                SimdVec<FP64,1> t39 = t38 * t30;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t44{ di4[ 0 ] };
                SimdVec<FP64,1> t46{ di2[ 1 ] };
                SimdVec<FP64,1> t47 = t46 - t44;
                SimdVec<FP64,1> t48 = t46 / t47;
                SimdVec<FP64,1> t49 = t48 * t24;
                SimdVec<FP64,1> t50 = t23 + t49;
                SimdVec<FP64,2> t51{ t50[ 0 ], t21[ 0 ] };
                SimdVec<FP64,1> t53{ px4[ 1 ] };
                SimdVec<FP64,2> t54{ t53[ 0 ], t42[ 0 ] };
                SimdVec<FP64,1> t55{ px4[ 0 ] };
                SimdVec<FP64,1> t57{ px2[ 1 ] };
                SimdVec<FP64,1> t58 = t55 - t57;
                SimdVec<FP64,1> t59 = t58 * t48;
                SimdVec<FP64,1> t60 = t57 + t59;
                SimdVec<FP64,2> t61{ t60[ 0 ], t55[ 0 ] };
                px0 = t61;
                px2 = t54;
                px4 = t41;
                py0 = t51;
                py2 = t20;
                py4 = t33;
                pi0 = t11;
                pi2 = t7;
                pi4 = t3;
                continue;
            }
            case_159: {
                // old_nb_nodes: 8 nodes: [3,4] 4 5 6 [6,7]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 0 ] };
                SimdVec<U64,1> t10{ pi2[ 1 ] };
                SimdVec<U64,2> t11{ t10[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t14{ py6[ 1 ] };
                SimdVec<FP64,1> t15{ py6[ 0 ] };
                SimdVec<FP64,1> t16 = t14 - t15;
                SimdVec<FP64,1> t18{ py4[ 1 ] };
                SimdVec<FP64,2> t19{ t18[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 0 ] };
                SimdVec<FP64,1> t22{ py2[ 1 ] };
                SimdVec<FP64,1> t23 = t20 - t22;
                SimdVec<FP64,1> t26{ di6[ 1 ] };
                SimdVec<FP64,1> t27{ di6[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t26;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px6[ 1 ] };
                SimdVec<FP64,1> t35{ px6[ 0 ] };
                SimdVec<FP64,1> t36 = t34 - t35;
                SimdVec<FP64,1> t37 = t36 * t29;
                SimdVec<FP64,1> t38 = t35 + t37;
                SimdVec<FP64,2> t39;
                t39[ 0 ] = t38[ 0 ];
                SimdVec<FP64,1> t41{ di4[ 0 ] };
                SimdVec<FP64,1> t43{ di2[ 1 ] };
                SimdVec<FP64,1> t44 = t43 - t41;
                SimdVec<FP64,1> t45 = t43 / t44;
                SimdVec<FP64,1> t46 = t45 * t23;
                SimdVec<FP64,1> t47 = t22 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t50{ px4[ 1 ] };
                SimdVec<FP64,2> t51{ t50[ 0 ], t35[ 0 ] };
                SimdVec<FP64,1> t52{ px4[ 0 ] };
                SimdVec<FP64,1> t54{ px2[ 1 ] };
                SimdVec<FP64,1> t55 = t52 - t54;
                SimdVec<FP64,1> t56 = t55 * t45;
                SimdVec<FP64,1> t57 = t54 + t56;
                SimdVec<FP64,2> t58{ t57[ 0 ], t52[ 0 ] };
                px0 = t58;
                px2 = t51;
                px4 = t39;
                py0 = t48;
                py2 = t19;
                py4 = t32;
                pi0 = t11;
                pi2 = t7;
                pi4 = t2;
                continue;
            }
            case_160: {
                // old_nb_nodes: 8 nodes: [3,4] 4 5 [5,6]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi4[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t15{ py2[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di6[ 0 ] };
                SimdVec<FP64,1> t20{ px6[ 0 ] };
                SimdVec<FP64,1> t22{ di4[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di4[ 0 ] };
                SimdVec<FP64,1> t30{ di2[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px4[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px4[ 0 ] };
                SimdVec<FP64,1> t44{ px2[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_161: {
                // old_nb_nodes: 8 nodes: [3,4] 4 [4,5]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 0 ] };
                SimdVec<U64,1> t6{ pi2[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py4[ 1 ] };
                SimdVec<FP64,1> t11{ py4[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py2[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di4[ 1 ] };
                SimdVec<FP64,1> t19{ di4[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di2[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px4[ 1 ] };
                SimdVec<FP64,1> t34{ px4[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px2[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_162: {
                // old_nb_nodes: 8 nodes: [4,5] 5 6 7 [7,0]
                nodes_size = 5;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 1 ] };
                SimdVec<U64,1> t5{ pi6[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<U64,1> t8{ pi4[ 1 ] };
                SimdVec<U64,1> t9{ pi4[ 0 ] };
                SimdVec<U64,2> t10{ t9[ 0 ], t8[ 0 ] };
                SimdVec<FP64,1> t13{ py0[ 0 ] };
                SimdVec<FP64,1> t15{ py6[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t17{ py6[ 0 ] };
                SimdVec<FP64,2> t18{ t17[ 0 ], t15[ 0 ] };
                SimdVec<FP64,1> t20{ py4[ 1 ] };
                SimdVec<FP64,1> t21{ py4[ 0 ] };
                SimdVec<FP64,1> t22 = t20 - t21;
                SimdVec<FP64,1> t25{ di0[ 0 ] };
                SimdVec<FP64,1> t27{ di6[ 1 ] };
                SimdVec<FP64,1> t28 = t27 - t25;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t16;
                SimdVec<FP64,1> t31 = t15 + t30;
                SimdVec<FP64,2> t32;
                t32[ 0 ] = t31[ 0 ];
                SimdVec<FP64,1> t34{ px0[ 0 ] };
                SimdVec<FP64,1> t36{ px6[ 1 ] };
                SimdVec<FP64,1> t37 = t34 - t36;
                SimdVec<FP64,1> t38 = t37 * t29;
                SimdVec<FP64,1> t39 = t36 + t38;
                SimdVec<FP64,2> t40;
                t40[ 0 ] = t39[ 0 ];
                SimdVec<FP64,1> t41{ px6[ 0 ] };
                SimdVec<FP64,2> t42{ t41[ 0 ], t36[ 0 ] };
                SimdVec<FP64,1> t44{ di4[ 1 ] };
                SimdVec<FP64,1> t45{ di4[ 0 ] };
                SimdVec<FP64,1> t46 = t45 - t44;
                SimdVec<FP64,1> t47 = t45 / t46;
                SimdVec<FP64,1> t48 = t47 * t22;
                SimdVec<FP64,1> t49 = t21 + t48;
                SimdVec<FP64,2> t50{ t49[ 0 ], t20[ 0 ] };
                SimdVec<FP64,1> t52{ px4[ 1 ] };
                SimdVec<FP64,1> t53{ px4[ 0 ] };
                SimdVec<FP64,1> t54 = t52 - t53;
                SimdVec<FP64,1> t55 = t54 * t47;
                SimdVec<FP64,1> t56 = t53 + t55;
                SimdVec<FP64,2> t57{ t56[ 0 ], t52[ 0 ] };
                px0 = t57;
                px2 = t42;
                px4 = t40;
                py0 = t50;
                py2 = t18;
                py4 = t32;
                pi0 = t10;
                pi2 = t6;
                pi4 = t2;
                continue;
            }
            case_163: {
                // old_nb_nodes: 8 nodes: [4,5] 5 6 [6,7]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 0 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t5{ pi4[ 1 ] };
                SimdVec<U64,1> t6{ pi4[ 0 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t5[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 1 ] };
                SimdVec<FP64,1> t10{ py6[ 0 ] };
                SimdVec<FP64,1> t11 = t9 - t10;
                SimdVec<FP64,1> t13{ py4[ 1 ] };
                SimdVec<FP64,1> t14{ py4[ 0 ] };
                SimdVec<FP64,1> t15 = t13 - t14;
                SimdVec<FP64,1> t17{ di6[ 1 ] };
                SimdVec<FP64,1> t18{ di6[ 0 ] };
                SimdVec<FP64,1> t19 = t18 - t17;
                SimdVec<FP64,1> t20 = t18 / t19;
                SimdVec<FP64,1> t21 = t20 * t11;
                SimdVec<FP64,1> t22 = t10 + t21;
                SimdVec<FP64,2> t23{ t10[ 0 ], t22[ 0 ] };
                SimdVec<FP64,1> t25{ px6[ 1 ] };
                SimdVec<FP64,1> t26{ px6[ 0 ] };
                SimdVec<FP64,1> t27 = t25 - t26;
                SimdVec<FP64,1> t28 = t27 * t20;
                SimdVec<FP64,1> t29 = t26 + t28;
                SimdVec<FP64,2> t30{ t26[ 0 ], t29[ 0 ] };
                SimdVec<FP64,1> t32{ di4[ 1 ] };
                SimdVec<FP64,1> t33{ di4[ 0 ] };
                SimdVec<FP64,1> t34 = t33 - t32;
                SimdVec<FP64,1> t35 = t33 / t34;
                SimdVec<FP64,1> t36 = t35 * t15;
                SimdVec<FP64,1> t37 = t14 + t36;
                SimdVec<FP64,2> t38{ t37[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,1> t41{ px4[ 0 ] };
                SimdVec<FP64,1> t42 = t40 - t41;
                SimdVec<FP64,1> t43 = t42 * t35;
                SimdVec<FP64,1> t44 = t41 + t43;
                SimdVec<FP64,2> t45{ t44[ 0 ], t40[ 0 ] };
                px0 = t45;
                px2 = t30;
                py0 = t38;
                py2 = t23;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_164: {
                // old_nb_nodes: 8 nodes: [4,5] 5 [5,6]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi4[ 1 ] };
                SimdVec<U64,1> t5{ pi4[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py6[ 0 ] };
                SimdVec<FP64,1> t11{ py4[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py4[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di6[ 0 ] };
                SimdVec<FP64,1> t19{ px6[ 0 ] };
                SimdVec<FP64,1> t21{ di4[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di4[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px4[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px4[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_165: {
                // old_nb_nodes: 8 nodes: [5,6] 6 7 [7,0]
                nodes_size = 4;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,1> t2{ pi6[ 1 ] };
                SimdVec<U64,2> t3{ t2[ 0 ], snis[ num_cut ][ 0 ] };
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py6[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t15{ py4[ 1 ] };
                SimdVec<FP64,1> t16 = t13 - t15;
                SimdVec<FP64,1> t18{ di0[ 0 ] };
                SimdVec<FP64,1> t20{ px0[ 0 ] };
                SimdVec<FP64,1> t22{ di6[ 1 ] };
                SimdVec<FP64,1> t23 = t22 - t18;
                SimdVec<FP64,1> t24 = t22 / t23;
                SimdVec<FP64,1> t25 = t24 * t12;
                SimdVec<FP64,1> t26 = t11 + t25;
                SimdVec<FP64,2> t27{ t11[ 0 ], t26[ 0 ] };
                SimdVec<FP64,1> t28{ di6[ 0 ] };
                SimdVec<FP64,1> t30{ di4[ 1 ] };
                SimdVec<FP64,1> t31 = t30 - t28;
                SimdVec<FP64,1> t32 = t30 / t31;
                SimdVec<FP64,1> t33 = t32 * t16;
                SimdVec<FP64,1> t34 = t15 + t33;
                SimdVec<FP64,2> t35{ t34[ 0 ], t13[ 0 ] };
                SimdVec<FP64,1> t37{ px6[ 1 ] };
                SimdVec<FP64,1> t38 = t20 - t37;
                SimdVec<FP64,1> t39 = t38 * t24;
                SimdVec<FP64,1> t40 = t37 + t39;
                SimdVec<FP64,2> t41{ t37[ 0 ], t40[ 0 ] };
                SimdVec<FP64,1> t42{ px6[ 0 ] };
                SimdVec<FP64,1> t44{ px4[ 1 ] };
                SimdVec<FP64,1> t45 = t42 - t44;
                SimdVec<FP64,1> t46 = t45 * t32;
                SimdVec<FP64,1> t47 = t44 + t46;
                SimdVec<FP64,2> t48{ t47[ 0 ], t42[ 0 ] };
                px0 = t48;
                px2 = t41;
                py0 = t35;
                py2 = t27;
                pi0 = t7;
                pi2 = t3;
                continue;
            }
            case_166: {
                // old_nb_nodes: 8 nodes: [5,6] 6 [6,7]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 0 ] };
                SimdVec<U64,1> t6{ pi4[ 1 ] };
                SimdVec<U64,2> t7{ t6[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t10{ py6[ 1 ] };
                SimdVec<FP64,1> t11{ py6[ 0 ] };
                SimdVec<FP64,1> t12 = t10 - t11;
                SimdVec<FP64,1> t14{ py4[ 1 ] };
                SimdVec<FP64,1> t15 = t11 - t14;
                SimdVec<FP64,1> t18{ di6[ 1 ] };
                SimdVec<FP64,1> t19{ di6[ 0 ] };
                SimdVec<FP64,1> t20 = t19 - t18;
                SimdVec<FP64,1> t21 = t19 / t20;
                SimdVec<FP64,1> t22 = t21 * t12;
                SimdVec<FP64,1> t23 = t11 + t22;
                SimdVec<FP64,2> t24;
                t24[ 0 ] = t23[ 0 ];
                SimdVec<FP64,1> t26{ di4[ 1 ] };
                SimdVec<FP64,1> t27 = t26 - t19;
                SimdVec<FP64,1> t28 = t26 / t27;
                SimdVec<FP64,1> t29 = t28 * t15;
                SimdVec<FP64,1> t30 = t14 + t29;
                SimdVec<FP64,2> t31{ t30[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t33{ px6[ 1 ] };
                SimdVec<FP64,1> t34{ px6[ 0 ] };
                SimdVec<FP64,1> t35 = t33 - t34;
                SimdVec<FP64,1> t36 = t35 * t21;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t40{ px4[ 1 ] };
                SimdVec<FP64,1> t41 = t34 - t40;
                SimdVec<FP64,1> t42 = t41 * t28;
                SimdVec<FP64,1> t43 = t40 + t42;
                SimdVec<FP64,2> t44{ t43[ 0 ], t34[ 0 ] };
                px0 = t44;
                px2 = t38;
                py0 = t31;
                py2 = t24;
                pi0 = t7;
                pi2 = t2;
                continue;
            }
            case_167: {
                // old_nb_nodes: 8 nodes: [6,7] 7 [7,0]
                nodes_size = 3;
                const SimdVec<U64,1> *snis = reinterpret_cast<const SimdVec<U64,1> *>( nis );
                SimdVec<U64,2> t2;
                t2[ 0 ] = snis[ num_cut ][ 0 ];
                SimdVec<U64,1> t4{ pi6[ 1 ] };
                SimdVec<U64,1> t5{ pi6[ 0 ] };
                SimdVec<U64,2> t6{ t5[ 0 ], t4[ 0 ] };
                SimdVec<FP64,1> t9{ py0[ 0 ] };
                SimdVec<FP64,1> t11{ py6[ 1 ] };
                SimdVec<FP64,1> t12 = t9 - t11;
                SimdVec<FP64,1> t13{ py6[ 0 ] };
                SimdVec<FP64,1> t14 = t11 - t13;
                SimdVec<FP64,1> t17{ di0[ 0 ] };
                SimdVec<FP64,1> t19{ px0[ 0 ] };
                SimdVec<FP64,1> t21{ di6[ 1 ] };
                SimdVec<FP64,1> t22 = t21 - t17;
                SimdVec<FP64,1> t23 = t21 / t22;
                SimdVec<FP64,1> t24 = t23 * t12;
                SimdVec<FP64,1> t25 = t11 + t24;
                SimdVec<FP64,2> t26;
                t26[ 0 ] = t25[ 0 ];
                SimdVec<FP64,1> t27{ di6[ 0 ] };
                SimdVec<FP64,1> t28 = t27 - t21;
                SimdVec<FP64,1> t29 = t27 / t28;
                SimdVec<FP64,1> t30 = t29 * t14;
                SimdVec<FP64,1> t31 = t13 + t30;
                SimdVec<FP64,2> t32{ t31[ 0 ], t11[ 0 ] };
                SimdVec<FP64,1> t34{ px6[ 1 ] };
                SimdVec<FP64,1> t35 = t19 - t34;
                SimdVec<FP64,1> t36 = t35 * t23;
                SimdVec<FP64,1> t37 = t34 + t36;
                SimdVec<FP64,2> t38;
                t38[ 0 ] = t37[ 0 ];
                SimdVec<FP64,1> t39{ px6[ 0 ] };
                SimdVec<FP64,1> t40 = t34 - t39;
                SimdVec<FP64,1> t41 = t40 * t29;
                SimdVec<FP64,1> t42 = t39 + t41;
                SimdVec<FP64,2> t43{ t42[ 0 ], t34[ 0 ] };
                px0 = t43;
                px2 = t38;
                py0 = t32;
                py2 = t26;
                pi0 = t6;
                pi2 = t2;
                continue;
            }
            case_168: {
                break;
            }
            case_169: {
                nodes_size = 0;
                return;
            }
            case_170: {
                return;
            }
            store_and_break: {
                SimdVec<FP64,2>::store_aligned( position_xs + 0, px0 );
                SimdVec<FP64,2>::store_aligned( position_ys + 0, py0 );
                SimdVec<U64,2>::store_aligned( cut_ids + 0, pi0 );
                SimdVec<FP64,2>::store_aligned( position_xs + 2, px2 );
                SimdVec<FP64,2>::store_aligned( position_ys + 2, py2 );
                SimdVec<U64,2>::store_aligned( cut_ids + 2, pi2 );
                if ( nodes_size > 4 ) {
                    SimdVec<FP64,2>::store_aligned( position_xs + 4, px4 );
                    SimdVec<FP64,2>::store_aligned( position_ys + 4, py4 );
                    SimdVec<U64,2>::store_aligned( cut_ids + 4, pi4 );
                    if ( nodes_size > 6 ) {
                        SimdVec<FP64,2>::store_aligned( position_xs + 6, px6 );
                        SimdVec<FP64,2>::store_aligned( position_ys + 6, py6 );
                        SimdVec<U64,2>::store_aligned( cut_ids + 6, pi6 );
                    }
                }
                break;
            }
        }
    }

    #ifndef METHOD_INCLUDE
}
#endif
